{
  "address": "0x3C15538ED063e688c8DF3d571Cb7a0062d2fB18D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextProtocolFeeReserveLib",
          "type": "address"
        }
      ],
      "name": "ProtocolFeeReserveLibSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mlnValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mlnBurned",
          "type": "uint256"
        }
      ],
      "name": "SharesBoughtBack",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharesAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mlnValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "buyBackSharesViaTrustedVaultProxy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mlnAmountToBurn_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "dispatcher_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeReserveLib",
      "outputs": [
        {
          "internalType": "address",
          "name": "protocolFeeReserveLib_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dispatcher",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "uuid_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextProtocolFeeReserveLib",
          "type": "address"
        }
      ],
      "name": "setProtocolFeeReserveLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e7ab2b28e98a2713652923266a0e1e89fcc8ec3df29d302677413ea14fe5e03",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3C15538ED063e688c8DF3d571Cb7a0062d2fB18D",
    "transactionIndex": 0,
    "gasUsed": "362536",
    "logsBloom": "0x
    "blockHash": "0x95b991681c6fcde5c383983cda5f0c3ab80328ee150f9ceb5df252c7afd03998",
    "transactionHash": "0x8e7ab2b28e98a2713652923266a0e1e89fcc8ec3df29d302677413ea14fe5e03",
    "logs": [],
    "blockNumber": 14508025,
    "cumulativeGasUsed": "362536",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e128c99a7ad98ab17bfe5eac6103458b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextProtocolFeeReserveLib\",\"type\":\"address\"}],\"name\":\"ProtocolFeeReserveLibSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mlnValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mlnBurned\",\"type\":\"uint256\"}],\"name\":\"SharesBoughtBack\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mlnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyBackSharesViaTrustedVaultProxy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mlnAmountToBurn_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeReserveLib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolFeeReserveLib_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextProtocolFeeReserveLib\",\"type\":\"address\"}],\"name\":\"setProtocolFeeReserveLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"buyBackSharesViaTrustedVaultProxy(uint256,uint256,uint256)\":{\"details\":\"Since VaultProxy instances are completely trusted, all the work of calculating and burning the appropriate amount of shares and MLN can be done by the calling VaultProxy. This contract only needs to provide the discounted MLN amount to burn. Though it is currently unused, passing in GAV would allow creating a tiered system of discounts in a new library, for example.\",\"params\":{\"_mlnValue\":\"The MLN-denominated market value of _sharesAmount\",\"_sharesAmount\":\"The amount of shares to buy back\"},\"returns\":{\"mlnAmountToBurn_\":\"The amount of MLN to burn\"}},\"getDispatcher()\":{\"returns\":{\"dispatcher_\":\"The `dispatcher` variable value\"}},\"getProtocolFeeReserveLib()\":{\"returns\":{\"protocolFeeReserveLib_\":\"The address of the ProtocolFeeReserveLib target\"}},\"init(address)\":{\"details\":\"Serves as a pseudo-constructor\",\"params\":{\"_dispatcher\":\"The Dispatcher contract\"}},\"proxiableUUID()\":{\"returns\":{\"uuid_\":\"The bytes32 hash representing the UUID\"}},\"setProtocolFeeReserveLib(address)\":{\"details\":\"This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextProtocolFeeReserveLib from being the same as the current ProtocolFeeReserveLib\",\"params\":{\"_nextProtocolFeeReserveLib\":\"The address to set as the ProtocolFeeReserveLib\"}}},\"title\":\"ProtocolFeeReserveLib Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyBackSharesViaTrustedVaultProxy(uint256,uint256,uint256)\":{\"notice\":\"Indicates that the calling VaultProxy is buying back shares collected as protocol fee, and returns the amount of MLN that should be burned for the buyback\"},\"getDispatcher()\":{\"notice\":\"Gets the `dispatcher` variable\"},\"getProtocolFeeReserveLib()\":{\"notice\":\"Gets the ProtocolFeeReserveLib target for the ProtocolFeeReserveProxy\"},\"init(address)\":{\"notice\":\"Initializes the ProtocolFeeReserveProxy with core configuration\"},\"proxiableUUID()\":{\"notice\":\"Returns a unique bytes32 hash for ProtocolFeeReserveLib instances\"},\"setProtocolFeeReserveLib(address)\":{\"notice\":\"Sets the ProtocolFeeReserveLib target for the ProtocolFeeReserveProxy\"}},\"notice\":\"The proxiable library contract for ProtocolFeeReserveProxy\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/persistent/protocol-fee-reserve/ProtocolFeeReserveLib.sol\":\"ProtocolFeeReserveLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e6b0e6cf325d4f6332b8eb2b3c446b2ef3ca8456bdf0d12318d0fd9e90aeb30\",\"license\":\"GPL-3.0\"},\"contracts/persistent/protocol-fee-reserve/ProtocolFeeReserveLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./bases/ProtocolFeeReserveLibBase1.sol\\\";\\nimport \\\"./interfaces/IProtocolFeeReserve1.sol\\\";\\n\\n/// @title ProtocolFeeReserveLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The proxiable library contract for ProtocolFeeReserveProxy\\ncontract ProtocolFeeReserveLib is IProtocolFeeReserve1, ProtocolFeeReserveLibBase1 {\\n    using SafeMath for uint256;\\n\\n    // Equates to a 50% discount\\n    uint256 private constant BUYBACK_DISCOUNT_DIVISOR = 2;\\n\\n    /// @notice Indicates that the calling VaultProxy is buying back shares collected as protocol fee,\\n    /// and returns the amount of MLN that should be burned for the buyback\\n    /// @param _sharesAmount The amount of shares to buy back\\n    /// @param _mlnValue The MLN-denominated market value of _sharesAmount\\n    /// @return mlnAmountToBurn_ The amount of MLN to burn\\n    /// @dev Since VaultProxy instances are completely trusted, all the work of calculating and\\n    /// burning the appropriate amount of shares and MLN can be done by the calling VaultProxy.\\n    /// This contract only needs to provide the discounted MLN amount to burn.\\n    /// Though it is currently unused, passing in GAV would allow creating a tiered system of\\n    /// discounts in a new library, for example.\\n    function buyBackSharesViaTrustedVaultProxy(\\n        uint256 _sharesAmount,\\n        uint256 _mlnValue,\\n        uint256\\n    ) external override returns (uint256 mlnAmountToBurn_) {\\n        mlnAmountToBurn_ = _mlnValue.div(BUYBACK_DISCOUNT_DIVISOR);\\n\\n        if (mlnAmountToBurn_ == 0) {\\n            return 0;\\n        }\\n\\n        emit SharesBoughtBack(msg.sender, _sharesAmount, _mlnValue, mlnAmountToBurn_);\\n\\n        return mlnAmountToBurn_;\\n    }\\n}\\n\",\"keccak256\":\"0x3c516554b3b282102721d36855c9e9c5937edd69923cee3e274baef2a3684f26\",\"license\":\"GPL-3.0\"},\"contracts/persistent/protocol-fee-reserve/bases/ProtocolFeeReserveLibBase1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./ProtocolFeeReserveLibBaseCore.sol\\\";\\n\\n/// @title ProtocolFeeReserveLibBase1 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base implementation for ProtocolFeeReserveLib\\n/// @dev Each next base implementation inherits the previous base implementation,\\n/// e.g., `ProtocolFeeReserveLibBase2 is ProtocolFeeReserveLibBase1`\\n/// DO NOT EDIT CONTRACT.\\nabstract contract ProtocolFeeReserveLibBase1 is ProtocolFeeReserveLibBaseCore {\\n    event SharesBoughtBack(\\n        address indexed vaultProxy,\\n        uint256 sharesAmount,\\n        uint256 mlnValue,\\n        uint256 mlnBurned\\n    );\\n}\\n\",\"keccak256\":\"0x1c07ec04e00a4df72fd61e1f4ad8a944d450f289fc852d2b2e28e31a87e13bc5\",\"license\":\"GPL-3.0\"},\"contracts/persistent/protocol-fee-reserve/bases/ProtocolFeeReserveLibBaseCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../dispatcher/IDispatcher.sol\\\";\\nimport \\\"../utils/ProxiableProtocolFeeReserveLib.sol\\\";\\n\\n/// @title ProtocolFeeReserveLibBaseCore Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The core implementation of ProtocolFeeReserveLib\\n/// @dev To be inherited by the first ProtocolFeeReserveLibBase implementation only.\\n/// DO NOT EDIT CONTRACT.\\nabstract contract ProtocolFeeReserveLibBaseCore is ProxiableProtocolFeeReserveLib {\\n    event ProtocolFeeReserveLibSet(address nextProtocolFeeReserveLib);\\n\\n    address private dispatcher;\\n\\n    modifier onlyDispatcherOwner {\\n        require(\\n            msg.sender == IDispatcher(getDispatcher()).getOwner(),\\n            \\\"Only the Dispatcher owner can call this function\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    /// @notice Initializes the ProtocolFeeReserveProxy with core configuration\\n    /// @param _dispatcher The Dispatcher contract\\n    /// @dev Serves as a pseudo-constructor\\n    function init(address _dispatcher) external {\\n        require(getDispatcher() == address(0), \\\"init: Proxy already initialized\\\");\\n\\n        dispatcher = _dispatcher;\\n\\n        emit ProtocolFeeReserveLibSet(getProtocolFeeReserveLib());\\n    }\\n\\n    /// @notice Sets the ProtocolFeeReserveLib target for the ProtocolFeeReserveProxy\\n    /// @param _nextProtocolFeeReserveLib The address to set as the ProtocolFeeReserveLib\\n    /// @dev This function is absolutely critical. __updateCodeAddress() validates that the\\n    /// target is a valid Proxiable contract instance.\\n    /// Does not block _nextProtocolFeeReserveLib from being the same as the current ProtocolFeeReserveLib\\n    function setProtocolFeeReserveLib(address _nextProtocolFeeReserveLib)\\n        external\\n        onlyDispatcherOwner\\n    {\\n        __updateCodeAddress(_nextProtocolFeeReserveLib);\\n\\n        emit ProtocolFeeReserveLibSet(_nextProtocolFeeReserveLib);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `dispatcher` variable\\n    /// @return dispatcher_ The `dispatcher` variable value\\n    function getDispatcher() public view returns (address dispatcher_) {\\n        return dispatcher;\\n    }\\n\\n    /// @notice Gets the ProtocolFeeReserveLib target for the ProtocolFeeReserveProxy\\n    /// @return protocolFeeReserveLib_ The address of the ProtocolFeeReserveLib target\\n    function getProtocolFeeReserveLib() public view returns (address protocolFeeReserveLib_) {\\n        assembly {\\n            protocolFeeReserveLib_ := sload(EIP_1967_SLOT)\\n        }\\n\\n        return protocolFeeReserveLib_;\\n    }\\n}\\n\",\"keccak256\":\"0xcead802a5fcdfdaec115d999ba1ccb94fe973bce97e6a70d46d87f0d39ddc768\",\"license\":\"GPL-3.0\"},\"contracts/persistent/protocol-fee-reserve/interfaces/IProtocolFeeReserve1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IProtocolFeeReserve1 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev Each interface should inherit the previous interface,\\n/// e.g., `IProtocolFeeReserve2 is IProtocolFeeReserve1`\\ninterface IProtocolFeeReserve1 {\\n    function buyBackSharesViaTrustedVaultProxy(\\n        uint256 _sharesAmount,\\n        uint256 _mlnValue,\\n        uint256 _gav\\n    ) external returns (uint256 mlnAmountToBurn_);\\n}\\n\",\"keccak256\":\"0x2728878c423db523bc95189137e8c58d2d7db9f56bbd5c6b1f988c08b551fbab\",\"license\":\"GPL-3.0\"},\"contracts/persistent/protocol-fee-reserve/utils/ProtocolFeeProxyConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ProtocolFeeProxyConstants Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Constant values used in ProtocolFee proxy-related contracts\\nabstract contract ProtocolFeeProxyConstants {\\n    // `bytes32(keccak256('mln.proxiable.protocolFeeReserveLib'))`\\n    bytes32\\n        internal constant EIP_1822_PROXIABLE_UUID = 0xbc966524590ce702cc9340e80d86ea9095afa6b8eecbb5d6213f576332239181;\\n    // `bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)`\\n    bytes32\\n        internal constant EIP_1967_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n}\\n\",\"keccak256\":\"0xd57a23b8978cfd81fcf09a3484b7625b311c5fe14b304bd9a497a869e41d1527\",\"license\":\"GPL-3.0\"},\"contracts/persistent/protocol-fee-reserve/utils/ProxiableProtocolFeeReserveLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport \\\"./ProtocolFeeProxyConstants.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\n/// @title ProxiableProtocolFeeReserveLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A contract that defines the upgrade behavior for ProtocolFeeReserveLib instances\\n/// @dev The recommended implementation of the target of a proxy according to EIP-1822 and EIP-1967\\n/// See: https://eips.ethereum.org/EIPS/eip-1822\\n/// See: https://eips.ethereum.org/EIPS/eip-1967\\nabstract contract ProxiableProtocolFeeReserveLib is ProtocolFeeProxyConstants {\\n    /// @dev Updates the target of the proxy to be the contract at _nextProtocolFeeReserveLib\\n    function __updateCodeAddress(address _nextProtocolFeeReserveLib) internal {\\n        require(\\n            ProxiableProtocolFeeReserveLib(_nextProtocolFeeReserveLib).proxiableUUID() ==\\n                bytes32(EIP_1822_PROXIABLE_UUID),\\n            \\\"__updateCodeAddress: _nextProtocolFeeReserveLib not compatible\\\"\\n        );\\n        assembly {\\n            sstore(EIP_1967_SLOT, _nextProtocolFeeReserveLib)\\n        }\\n    }\\n\\n    /// @notice Returns a unique bytes32 hash for ProtocolFeeReserveLib instances\\n    /// @return uuid_ The bytes32 hash representing the UUID\\n    function proxiableUUID() public pure returns (bytes32 uuid_) {\\n        return EIP_1822_PROXIABLE_UUID;\\n    }\\n}\\n\",\"keccak256\":\"0xefc9befd638e13010c556c2d691949a3ce51171de8007e2daa536b368ad78868\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610598806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806319ab453c1461006757806352d1902d1461008f57806396c45aec146100a9578063b3e2546b146100d2578063c75a882a146100f6578063ebb3d5891461011c575b600080fd5b61008d6004803603602081101561007d57600080fd5b50356001600160a01b0316610124565b005b6100976101eb565b60408051918252519081900360200190f35b610097600480360360608110156100bf57600080fd5b508035906020810135906040013561020f565b6100da610276565b604080516001600160a01b039092168252519081900360200190f35b61008d6004803603602081101561010c57600080fd5b50356001600160a01b031661029b565b6100da610395565b600061012e610395565b6001600160a01b031614610189576040805162461bcd60e51b815260206004820152601f60248201527f696e69743a2050726f787920616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0383161790557f637d0ba5806b2c873952a12cd23e7cf28669dba115b2ded43df3d2d75c71e8c16101cd610276565b604080516001600160a01b039092168252519081900360200190a150565b7fbc966524590ce702cc9340e80d86ea9095afa6b8eecbb5d6213f57633223918190565b600061021c8360026103a4565b90508061022b5750600061026f565b6040805185815260208101859052808201839052905133917f6b63e290827c0f9226da4ffa1b681a509f0764acfc1ab99503a4f55012ec3c19919081900360600190a25b9392505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6102a3610395565b6001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156102db57600080fd5b505afa1580156102ef573d6000803e3d6000fd5b505050506040513d602081101561030557600080fd5b50516001600160a01b0316331461034d5760405162461bcd60e51b81526004018080602001828103825260308152602001806105336030913960400191505060405180910390fd5b6103568161040b565b604080516001600160a01b038316815290517f637d0ba5806b2c873952a12cd23e7cf28669dba115b2ded43df3d2d75c71e8c19181900360200190a150565b6000546001600160a01b031690565b60008082116103fa576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161040357fe5b049392505050565b7fbc966524590ce702cc9340e80d86ea9095afa6b8eecbb5d6213f57633223918160001b816001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046857600080fd5b505afa15801561047c573d6000803e3d6000fd5b505050506040513d602081101561049257600080fd5b5051146104d05760405162461bcd60e51b815260040180806020018281038252603e8152602001806104f5603e913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5556fe5f5f757064617465436f6465416464726573733a205f6e65787450726f746f636f6c466565526573657276654c6962206e6f7420636f6d70617469626c654f6e6c79207468652044697370617463686572206f776e65722063616e2063616c6c20746869732066756e6374696f6ea2646970667358221220a6bbb356c35f1587e32c08f03a822e61c462c84e238085c81ed8a8984b75614964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806319ab453c1461006757806352d1902d1461008f57806396c45aec146100a9578063b3e2546b146100d2578063c75a882a146100f6578063ebb3d5891461011c575b600080fd5b61008d6004803603602081101561007d57600080fd5b50356001600160a01b0316610124565b005b6100976101eb565b60408051918252519081900360200190f35b610097600480360360608110156100bf57600080fd5b508035906020810135906040013561020f565b6100da610276565b604080516001600160a01b039092168252519081900360200190f35b61008d6004803603602081101561010c57600080fd5b50356001600160a01b031661029b565b6100da610395565b600061012e610395565b6001600160a01b031614610189576040805162461bcd60e51b815260206004820152601f60248201527f696e69743a2050726f787920616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0383161790557f637d0ba5806b2c873952a12cd23e7cf28669dba115b2ded43df3d2d75c71e8c16101cd610276565b604080516001600160a01b039092168252519081900360200190a150565b7fbc966524590ce702cc9340e80d86ea9095afa6b8eecbb5d6213f57633223918190565b600061021c8360026103a4565b90508061022b5750600061026f565b6040805185815260208101859052808201839052905133917f6b63e290827c0f9226da4ffa1b681a509f0764acfc1ab99503a4f55012ec3c19919081900360600190a25b9392505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6102a3610395565b6001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156102db57600080fd5b505afa1580156102ef573d6000803e3d6000fd5b505050506040513d602081101561030557600080fd5b50516001600160a01b0316331461034d5760405162461bcd60e51b81526004018080602001828103825260308152602001806105336030913960400191505060405180910390fd5b6103568161040b565b604080516001600160a01b038316815290517f637d0ba5806b2c873952a12cd23e7cf28669dba115b2ded43df3d2d75c71e8c19181900360200190a150565b6000546001600160a01b031690565b60008082116103fa576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161040357fe5b049392505050565b7fbc966524590ce702cc9340e80d86ea9095afa6b8eecbb5d6213f57633223918160001b816001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046857600080fd5b505afa15801561047c573d6000803e3d6000fd5b505050506040513d602081101561049257600080fd5b5051146104d05760405162461bcd60e51b815260040180806020018281038252603e8152602001806104f5603e913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5556fe5f5f757064617465436f6465416464726573733a205f6e65787450726f746f636f6c466565526573657276654c6962206e6f7420636f6d70617469626c654f6e6c79207468652044697370617463686572206f776e65722063616e2063616c6c20746869732066756e6374696f6ea2646970667358221220a6bbb356c35f1587e32c08f03a822e61c462c84e238085c81ed8a8984b75614964736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "buyBackSharesViaTrustedVaultProxy(uint256,uint256,uint256)": {
        "details": "Since VaultProxy instances are completely trusted, all the work of calculating and burning the appropriate amount of shares and MLN can be done by the calling VaultProxy. This contract only needs to provide the discounted MLN amount to burn. Though it is currently unused, passing in GAV would allow creating a tiered system of discounts in a new library, for example.",
        "params": {
          "_mlnValue": "The MLN-denominated market value of _sharesAmount",
          "_sharesAmount": "The amount of shares to buy back"
        },
        "returns": {
          "mlnAmountToBurn_": "The amount of MLN to burn"
        }
      },
      "getDispatcher()": {
        "returns": {
          "dispatcher_": "The `dispatcher` variable value"
        }
      },
      "getProtocolFeeReserveLib()": {
        "returns": {
          "protocolFeeReserveLib_": "The address of the ProtocolFeeReserveLib target"
        }
      },
      "init(address)": {
        "details": "Serves as a pseudo-constructor",
        "params": {
          "_dispatcher": "The Dispatcher contract"
        }
      },
      "proxiableUUID()": {
        "returns": {
          "uuid_": "The bytes32 hash representing the UUID"
        }
      },
      "setProtocolFeeReserveLib(address)": {
        "details": "This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextProtocolFeeReserveLib from being the same as the current ProtocolFeeReserveLib",
        "params": {
          "_nextProtocolFeeReserveLib": "The address to set as the ProtocolFeeReserveLib"
        }
      }
    },
    "title": "ProtocolFeeReserveLib Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyBackSharesViaTrustedVaultProxy(uint256,uint256,uint256)": {
        "notice": "Indicates that the calling VaultProxy is buying back shares collected as protocol fee, and returns the amount of MLN that should be burned for the buyback"
      },
      "getDispatcher()": {
        "notice": "Gets the `dispatcher` variable"
      },
      "getProtocolFeeReserveLib()": {
        "notice": "Gets the ProtocolFeeReserveLib target for the ProtocolFeeReserveProxy"
      },
      "init(address)": {
        "notice": "Initializes the ProtocolFeeReserveProxy with core configuration"
      },
      "proxiableUUID()": {
        "notice": "Returns a unique bytes32 hash for ProtocolFeeReserveLib instances"
      },
      "setProtocolFeeReserveLib(address)": {
        "notice": "Sets the ProtocolFeeReserveLib target for the ProtocolFeeReserveProxy"
      }
    },
    "notice": "The proxiable library contract for ProtocolFeeReserveProxy",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7073,
        "contract": "contracts/persistent/protocol-fee-reserve/ProtocolFeeReserveLib.sol:ProtocolFeeReserveLib",
        "label": "dispatcher",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}