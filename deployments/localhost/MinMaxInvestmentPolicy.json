{
  "address": "0x0fe4223AD99dF788A6Dcad148eB4086E6389cEB6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minInvestmentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxInvestmentAmount",
          "type": "uint256"
        }
      ],
      "name": "FundSettingsSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedSettings",
          "type": "bytes"
        }
      ],
      "name": "addFundSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canDisable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canDisable_",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getFundSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minInvestmentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxInvestmentAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct MinMaxInvestmentPolicy.FundSettings",
          "name": "fundSettings_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPolicyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementedHooks",
      "outputs": [
        {
          "internalType": "enum IPolicyManager.PolicyHook[]",
          "name": "implementedHooks_",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_investmentAmount",
          "type": "uint256"
        }
      ],
      "name": "passesRule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedSettings",
          "type": "bytes"
        }
      ],
      "name": "updateFundSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "enum IPolicyManager.PolicyHook",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_encodedArgs",
          "type": "bytes"
        }
      ],
      "name": "validateRule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb38520067fd88c83195275137746c8da7d85285e1a59addaf4e7872aa9ba28d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0fe4223AD99dF788A6Dcad148eB4086E6389cEB6",
    "transactionIndex": 0,
    "gasUsed": "604058",
    "logsBloom": "0x
    "blockHash": "0xe1bceb8e9784eba4177cd6f338ec8af2bfe86c125dddf6892ea79a9d496def7f",
    "transactionHash": "0xfb38520067fd88c83195275137746c8da7d85285e1a59addaf4e7872aa9ba28d",
    "logs": [],
    "blockNumber": 14508069,
    "cumulativeGasUsed": "604058",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaC9fCBA56E42d5960f813B9D0387F3D3bC003338"
  ],
  "linkedData": {
    "type": "POLICY"
  },
  "solcInputHash": "e128c99a7ad98ab17bfe5eac6103458b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minInvestmentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxInvestmentAmount\",\"type\":\"uint256\"}],\"name\":\"FundSettingsSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedSettings\",\"type\":\"bytes\"}],\"name\":\"addFundSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canDisable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canDisable_\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getFundSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minInvestmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvestmentAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MinMaxInvestmentPolicy.FundSettings\",\"name\":\"fundSettings_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolicyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementedHooks\",\"outputs\":[{\"internalType\":\"enum IPolicyManager.PolicyHook[]\",\"name\":\"implementedHooks_\",\"type\":\"uint8[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentAmount\",\"type\":\"uint256\"}],\"name\":\"passesRule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedSettings\",\"type\":\"bytes\"}],\"name\":\"updateFundSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyManager.PolicyHook\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_encodedArgs\",\"type\":\"bytes\"}],\"name\":\"validateRule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"activateForFund(address)\":{\"details\":\"Unimplemented by default, can be overridden by the policy\"},\"addFundSettings(address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_encodedSettings\":\"Encoded settings to apply to a fund\"}},\"canDisable()\":{\"returns\":{\"canDisable_\":\"True if the policy can be disabled\"}},\"getFundSettings(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"fundSettings_\":\"The fund settings\"}},\"getPolicyManager()\":{\"returns\":{\"policyManager_\":\"The `POLICY_MANAGER` variable value\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"The identifer string\"}},\"implementedHooks()\":{\"returns\":{\"implementedHooks_\":\"The implemented PolicyHooks\"}},\"passesRule(address,uint256)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_investmentAmount\":\"The investment amount for which to check the rule\"},\"returns\":{\"isValid_\":\"True if the rule passes\"}},\"updateFundSettings(address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_encodedSettings\":\"Encoded settings to apply to a fund\"}},\"validateRule(address,uint8,bytes)\":{\"details\":\"onlyPolicyManager validation not necessary, as state is not updated and no events are fired\",\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_encodedArgs\":\"Encoded args with which to validate the rule\"},\"returns\":{\"isValid_\":\"True if the rule passes\"}}},\"title\":\"MinMaxInvestmentPolicy Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(address)\":{\"notice\":\"Validates and initializes a policy as necessary prior to fund activation\"},\"addFundSettings(address,bytes)\":{\"notice\":\"Adds the initial policy settings for a fund\"},\"canDisable()\":{\"notice\":\"Whether or not the policy can be disabled\"},\"getFundSettings(address)\":{\"notice\":\"Gets the min and max investment amount for a given fund\"},\"getPolicyManager()\":{\"notice\":\"Gets the `POLICY_MANAGER` variable value\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for a policy\"},\"implementedHooks()\":{\"notice\":\"Gets the implemented PolicyHooks for a policy\"},\"passesRule(address,uint256)\":{\"notice\":\"Checks whether a particular condition passes the rule for a particular fund\"},\"updateFundSettings(address,bytes)\":{\"notice\":\"Updates the policy settings for a fund\"},\"validateRule(address,uint8,bytes)\":{\"notice\":\"Apply the rule with the specified parameters of a PolicyHook\"}},\"notice\":\"A policy that restricts the amount of the fund's denomination asset that a user can send in a single call to buy shares in a fund\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/policy-manager/policies/new-shareholders/MinMaxInvestmentPolicy.sol\":\"MinMaxInvestmentPolicy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/release/extensions/policy-manager/IPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IPolicyManager.sol\\\";\\n\\n/// @title Policy Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IPolicy {\\n    function activateForFund(address _comptrollerProxy) external;\\n\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _encodedSettings) external;\\n\\n    function canDisable() external pure returns (bool canDisable_);\\n\\n    function identifier() external pure returns (string memory identifier_);\\n\\n    function implementedHooks()\\n        external\\n        pure\\n        returns (IPolicyManager.PolicyHook[] memory implementedHooks_);\\n\\n    function updateFundSettings(address _comptrollerProxy, bytes calldata _encodedSettings)\\n        external;\\n\\n    function validateRule(\\n        address _comptrollerProxy,\\n        IPolicyManager.PolicyHook _hook,\\n        bytes calldata _encodedArgs\\n    ) external returns (bool isValid_);\\n}\\n\",\"keccak256\":\"0xc12663ca72065b256c3b934ab738fde26c147c7b0399de43650df89dd52ee467\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title PolicyManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the PolicyManager\\ninterface IPolicyManager {\\n    // When updating PolicyHook, also update these functions in PolicyManager:\\n    // 1. __getAllPolicyHooks()\\n    // 2. __policyHookRestrictsCurrentInvestorActions()\\n    enum PolicyHook {\\n        PostBuyShares,\\n        PostCallOnIntegration,\\n        PreTransferShares,\\n        RedeemSharesForSpecificAssets,\\n        AddTrackedAssets,\\n        RemoveTrackedAssets,\\n        CreateExternalPosition,\\n        PostCallOnExternalPosition,\\n        RemoveExternalPosition,\\n        ReactivateExternalPosition\\n    }\\n\\n    function validatePolicies(\\n        address,\\n        PolicyHook,\\n        bytes calldata\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1ed5fff925cdfa8808a65aa4c1e45813d87c1f462fc6740be670065ed2f6fd32\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/policies/new-shareholders/MinMaxInvestmentPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../utils/PolicyBase.sol\\\";\\n\\n/// @title MinMaxInvestmentPolicy Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A policy that restricts the amount of the fund's denomination asset that a user can\\n/// send in a single call to buy shares in a fund\\ncontract MinMaxInvestmentPolicy is PolicyBase {\\n    event FundSettingsSet(\\n        address indexed comptrollerProxy,\\n        uint256 minInvestmentAmount,\\n        uint256 maxInvestmentAmount\\n    );\\n\\n    struct FundSettings {\\n        uint256 minInvestmentAmount;\\n        uint256 maxInvestmentAmount;\\n    }\\n\\n    mapping(address => FundSettings) private comptrollerProxyToFundSettings;\\n\\n    constructor(address _policyManager) public PolicyBase(_policyManager) {}\\n\\n    /// @notice Adds the initial policy settings for a fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedSettings Encoded settings to apply to a fund\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _encodedSettings)\\n        external\\n        override\\n        onlyPolicyManager\\n    {\\n        __setFundSettings(_comptrollerProxy, _encodedSettings);\\n    }\\n\\n    /// @notice Whether or not the policy can be disabled\\n    /// @return canDisable_ True if the policy can be disabled\\n    function canDisable() external pure virtual override returns (bool canDisable_) {\\n        return true;\\n    }\\n\\n    /// @notice Provides a constant string identifier for a policy\\n    /// @return identifier_ The identifer string\\n    function identifier() external pure override returns (string memory identifier_) {\\n        return \\\"MIN_MAX_INVESTMENT\\\";\\n    }\\n\\n    /// @notice Gets the implemented PolicyHooks for a policy\\n    /// @return implementedHooks_ The implemented PolicyHooks\\n    function implementedHooks()\\n        external\\n        pure\\n        override\\n        returns (IPolicyManager.PolicyHook[] memory implementedHooks_)\\n    {\\n        implementedHooks_ = new IPolicyManager.PolicyHook[](1);\\n        implementedHooks_[0] = IPolicyManager.PolicyHook.PostBuyShares;\\n\\n        return implementedHooks_;\\n    }\\n\\n    /// @notice Updates the policy settings for a fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedSettings Encoded settings to apply to a fund\\n    function updateFundSettings(address _comptrollerProxy, bytes calldata _encodedSettings)\\n        external\\n        override\\n        onlyPolicyManager\\n    {\\n        __setFundSettings(_comptrollerProxy, _encodedSettings);\\n    }\\n\\n    /// @notice Checks whether a particular condition passes the rule for a particular fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _investmentAmount The investment amount for which to check the rule\\n    /// @return isValid_ True if the rule passes\\n    function passesRule(address _comptrollerProxy, uint256 _investmentAmount)\\n        public\\n        view\\n        returns (bool isValid_)\\n    {\\n        uint256 minInvestmentAmount = comptrollerProxyToFundSettings[_comptrollerProxy]\\n            .minInvestmentAmount;\\n        uint256 maxInvestmentAmount = comptrollerProxyToFundSettings[_comptrollerProxy]\\n            .maxInvestmentAmount;\\n\\n        // Both minInvestmentAmount and maxInvestmentAmount can be 0 in order to close the fund\\n        // temporarily\\n        if (minInvestmentAmount == 0) {\\n            return _investmentAmount <= maxInvestmentAmount;\\n        } else if (maxInvestmentAmount == 0) {\\n            return _investmentAmount >= minInvestmentAmount;\\n        }\\n        return\\n            _investmentAmount >= minInvestmentAmount && _investmentAmount <= maxInvestmentAmount;\\n    }\\n\\n    /// @notice Apply the rule with the specified parameters of a PolicyHook\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedArgs Encoded args with which to validate the rule\\n    /// @return isValid_ True if the rule passes\\n    /// @dev onlyPolicyManager validation not necessary, as state is not updated and no events are fired\\n    function validateRule(\\n        address _comptrollerProxy,\\n        IPolicyManager.PolicyHook,\\n        bytes calldata _encodedArgs\\n    ) external override returns (bool isValid_) {\\n        (, uint256 investmentAmount, , ) = __decodePostBuySharesValidationData(_encodedArgs);\\n\\n        return passesRule(_comptrollerProxy, investmentAmount);\\n    }\\n\\n    /// @dev Helper to set the policy settings for a fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedSettings Encoded settings to apply to a fund\\n    function __setFundSettings(address _comptrollerProxy, bytes memory _encodedSettings) private {\\n        (uint256 minInvestmentAmount, uint256 maxInvestmentAmount) = abi.decode(\\n            _encodedSettings,\\n            (uint256, uint256)\\n        );\\n\\n        require(\\n            maxInvestmentAmount == 0 || minInvestmentAmount < maxInvestmentAmount,\\n            \\\"__setFundSettings: minInvestmentAmount must be less than maxInvestmentAmount\\\"\\n        );\\n\\n        comptrollerProxyToFundSettings[_comptrollerProxy]\\n            .minInvestmentAmount = minInvestmentAmount;\\n        comptrollerProxyToFundSettings[_comptrollerProxy]\\n            .maxInvestmentAmount = maxInvestmentAmount;\\n\\n        emit FundSettingsSet(_comptrollerProxy, minInvestmentAmount, maxInvestmentAmount);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the min and max investment amount for a given fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @return fundSettings_ The fund settings\\n    function getFundSettings(address _comptrollerProxy)\\n        external\\n        view\\n        returns (FundSettings memory fundSettings_)\\n    {\\n        return comptrollerProxyToFundSettings[_comptrollerProxy];\\n    }\\n}\\n\",\"keccak256\":\"0x259befdb6d6c019f7b2269f5d9a4456a2cbfc111bbfcda128d57e80bb4b261c5\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/policies/utils/PolicyBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../IPolicy.sol\\\";\\n\\n/// @title PolicyBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Abstract base contract for all policies\\nabstract contract PolicyBase is IPolicy {\\n    address internal immutable POLICY_MANAGER;\\n\\n    modifier onlyPolicyManager {\\n        require(msg.sender == POLICY_MANAGER, \\\"Only the PolicyManager can make this call\\\");\\n        _;\\n    }\\n\\n    constructor(address _policyManager) public {\\n        POLICY_MANAGER = _policyManager;\\n    }\\n\\n    /// @notice Validates and initializes a policy as necessary prior to fund activation\\n    /// @dev Unimplemented by default, can be overridden by the policy\\n    function activateForFund(address) external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Whether or not the policy can be disabled\\n    /// @return canDisable_ True if the policy can be disabled\\n    /// @dev False by default, can be overridden by the policy\\n    function canDisable() external pure virtual override returns (bool canDisable_) {\\n        return false;\\n    }\\n\\n    /// @notice Updates the policy settings for a fund\\n    /// @dev Disallowed by default, can be overridden by the policy\\n    function updateFundSettings(address, bytes calldata) external virtual override {\\n        revert(\\\"updateFundSettings: Updates not allowed for this policy\\\");\\n    }\\n\\n    //////////////////////////////\\n    // VALIDATION DATA DECODING //\\n    //////////////////////////////\\n\\n    /// @dev Helper to parse validation arguments from encoded data for AddTrackedAssets policy hook\\n    function __decodeAddTrackedAssetsValidationData(bytes memory _validationData)\\n        internal\\n        pure\\n        returns (address caller_, address[] memory assets_)\\n    {\\n        return abi.decode(_validationData, (address, address[]));\\n    }\\n\\n    /// @dev Helper to parse validation arguments from encoded data for CreateExternalPosition policy hook\\n    function __decodeCreateExternalPositionValidationData(bytes memory _validationData)\\n        internal\\n        pure\\n        returns (\\n            address caller_,\\n            uint256 typeId_,\\n            bytes memory initializationData_\\n        )\\n    {\\n        return abi.decode(_validationData, (address, uint256, bytes));\\n    }\\n\\n    /// @dev Helper to parse validation arguments from encoded data for PreTransferShares policy hook\\n    function __decodePreTransferSharesValidationData(bytes memory _validationData)\\n        internal\\n        pure\\n        returns (\\n            address sender_,\\n            address recipient_,\\n            uint256 amount_\\n        )\\n    {\\n        return abi.decode(_validationData, (address, address, uint256));\\n    }\\n\\n    /// @dev Helper to parse validation arguments from encoded data for PostBuyShares policy hook\\n    function __decodePostBuySharesValidationData(bytes memory _validationData)\\n        internal\\n        pure\\n        returns (\\n            address buyer_,\\n            uint256 investmentAmount_,\\n            uint256 sharesIssued_,\\n            uint256 gav_\\n        )\\n    {\\n        return abi.decode(_validationData, (address, uint256, uint256, uint256));\\n    }\\n\\n    /// @dev Helper to parse validation arguments from encoded data for PostCallOnExternalPosition policy hook\\n    function __decodePostCallOnExternalPositionValidationData(bytes memory _validationData)\\n        internal\\n        pure\\n        returns (\\n            address caller_,\\n            address externalPosition_,\\n            address[] memory assetsToTransfer_,\\n            uint256[] memory amountsToTransfer_,\\n            address[] memory assetsToReceive_,\\n            bytes memory encodedActionData_\\n        )\\n    {\\n        return\\n            abi.decode(\\n                _validationData,\\n                (address, address, address[], uint256[], address[], bytes)\\n            );\\n    }\\n\\n    /// @dev Helper to parse validation arguments from encoded data for PostCallOnIntegration policy hook\\n    function __decodePostCallOnIntegrationValidationData(bytes memory _validationData)\\n        internal\\n        pure\\n        returns (\\n            address caller_,\\n            address adapter_,\\n            bytes4 selector_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory incomingAssetAmounts_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_\\n        )\\n    {\\n        return\\n            abi.decode(\\n                _validationData,\\n                (address, address, bytes4, address[], uint256[], address[], uint256[])\\n            );\\n    }\\n\\n    /// @dev Helper to parse validation arguments from encoded data for ReactivateExternalPosition policy hook\\n    function __decodeReactivateExternalPositionValidationData(bytes memory _validationData)\\n        internal\\n        pure\\n        returns (address caller_, address externalPosition_)\\n    {\\n        return abi.decode(_validationData, (address, address));\\n    }\\n\\n    /// @dev Helper to parse validation arguments from encoded data for RedeemSharesForSpecificAssets policy hook\\n    function __decodeRedeemSharesForSpecificAssetsValidationData(bytes memory _validationData)\\n        internal\\n        pure\\n        returns (\\n            address redeemer_,\\n            address recipient_,\\n            uint256 sharesToRedeemPostFees_,\\n            address[] memory assets_,\\n            uint256[] memory assetAmounts_,\\n            uint256 gavPreRedeem_\\n        )\\n    {\\n        return\\n            abi.decode(\\n                _validationData,\\n                (address, address, uint256, address[], uint256[], uint256)\\n            );\\n    }\\n\\n    /// @dev Helper to parse validation arguments from encoded data for RemoveExternalPosition policy hook\\n    function __decodeRemoveExternalPositionValidationData(bytes memory _validationData)\\n        internal\\n        pure\\n        returns (address caller_, address externalPosition_)\\n    {\\n        return abi.decode(_validationData, (address, address));\\n    }\\n\\n    /// @dev Helper to parse validation arguments from encoded data for RemoveTrackedAssets policy hook\\n    function __decodeRemoveTrackedAssetsValidationData(bytes memory _validationData)\\n        internal\\n        pure\\n        returns (address caller_, address[] memory assets_)\\n    {\\n        return abi.decode(_validationData, (address, address[]));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `POLICY_MANAGER` variable value\\n    /// @return policyManager_ The `POLICY_MANAGER` variable value\\n    function getPolicyManager() external view returns (address policyManager_) {\\n        return POLICY_MANAGER;\\n    }\\n}\\n\",\"keccak256\":\"0x1504425c78a6428913cb92086c1f8752b9422f537466b9c16a8d9cfbdf3e358a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ab1380380610ab183398101604081905261002f91610055565b60601b6001600160601b0319166080526100a3565b805161004f8161008c565b92915050565b60006020828403121561006757600080fd5b60006100738484610044565b949350505050565b60006001600160a01b03821661004f565b6100958161007b565b81146100a057600080fd5b50565b60805160601c6109ec6100c560003980610179528061038552506109ec6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80636e3a9982116100665780636e3a9982146101095780637998a1c41461011c578063cbf54bb214610131578063ceb9a0ad14610146578063d44ad6cb146101595761009e565b80630d4d7510146100a35780630f5f6b4f146100a35780631ef92578146100b85780634fa4e54b146100d6578063579be718146100f6575b600080fd5b6100b66100b1366004610597565b61016e565b005b6100c0610204565b6040516100cd919061089d565b60405180910390f35b6100e96100e4366004610510565b610209565b6040516100cd91906108dc565b6100c06101043660046105ed565b610246565b6100c0610117366004610655565b6102a1565b6101246102fd565b6040516100cd91906108ab565b610139610329565b6040516100cd9190610885565b6100b6610154366004610510565b610380565b610161610383565b6040516100cd9190610877565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101bf5760405162461bcd60e51b81526004016101b6906108bc565b60405180910390fd5b6101ff8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103a792505050565b505050565b600190565b610211610476565b506001600160a01b0381166000908152602081815260409182902082518084019093528054835260010154908201525b919050565b60008061028884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061044d92505050565b505091505061029786826102a1565b9695505050505050565b6001600160a01b03821660009081526020819052604081208054600190910154816102d25783111591506102f79050565b806102e2575082101590506102f7565b8184101580156102f25750808411155b925050505b92915050565b60408051808201909152601281527113525397d3505617d253959154d51351539560721b602082015290565b6040805160018082528183019092526060916020808301908036833701905050905060008160008151811061035a57fe5b6020026020010190600981111561036d57fe5b9081600981111561037a57fe5b90525090565b50565b7f000000000000000000000000000000000000000000000000000000000000000090565b600080828060200190518101906103be919061068f565b9150915080600014806103d057508082105b6103ec5760405162461bcd60e51b81526004016101b6906108cc565b6001600160a01b03841660008181526020819052604090819020848155600101839055517fed112d6c0e84b6900209ce5a4c04541bc63a517e0160888c447ee70be47ce60f9061043f90859085906108ea565b60405180910390a250505050565b600080600080848060200190518101906104679190610536565b93509350935093509193509193565b604051806040016040528060008152602001600081525090565b80356102f78161098c565b80516102f78161098c565b60008083601f8401126104b857600080fd5b50813567ffffffffffffffff8111156104d057600080fd5b6020830191508360018202830111156104e857600080fd5b9250929050565b80356102f7816109a0565b80356102f7816109ad565b80516102f7816109ad565b60006020828403121561052257600080fd5b600061052e8484610490565b949350505050565b6000806000806080858703121561054c57600080fd5b6000610558878761049b565b945050602061056987828801610505565b935050604061057a87828801610505565b925050606061058b87828801610505565b91505092959194509250565b6000806000604084860312156105ac57600080fd5b60006105b88686610490565b935050602084013567ffffffffffffffff8111156105d557600080fd5b6105e1868287016104a6565b92509250509250925092565b6000806000806060858703121561060357600080fd5b600061060f8787610490565b9450506020610620878288016104ef565b935050604085013567ffffffffffffffff81111561063d57600080fd5b610649878288016104a6565b95989497509550505050565b6000806040838503121561066857600080fd5b60006106748585610490565b9250506020610685858286016104fa565b9150509250929050565b600080604083850312156106a257600080fd5b60006106ae8585610505565b925050602061068585828601610505565b60006106cb8383610744565b505060200190565b6106dc81610918565b82525050565b60006106ed8261090b565b6106f7818561090f565b935061070283610905565b8060005b8381101561073057815161071a88826106bf565b975061072583610905565b925050600101610706565b509495945050505050565b6106dc81610923565b6106dc81610941565b60006107588261090b565b610762818561090f565b935061077281856020860161094c565b61077b81610978565b9093019392505050565b600061079260298361090f565b7f4f6e6c792074686520506f6c6963794d616e616765722063616e206d616b65208152681d1a1a5cc818d85b1b60ba1b602082015260400192915050565b60006107dd604c8361090f565b7f5f5f73657446756e6453657474696e67733a206d696e496e766573746d656e7481527f416d6f756e74206d757374206265206c657373207468616e206d6178496e766560208201526b1cdd1b595b9d105b5bdd5b9d60a21b604082015260600192915050565b80516040830190610855848261086e565b506020820151610868602085018261086e565b50505050565b6106dc8161093e565b602081016102f782846106d3565b6020808252810161089681846106e2565b9392505050565b602081016102f7828461073b565b60208082528101610896818461074d565b602080825281016102f781610785565b602080825281016102f7816107d0565b604081016102f78284610844565b604081016108f8828561086e565b610896602083018461086e565b60200190565b5190565b90815260200190565b60006102f782610932565b151590565b8061024181610982565b6001600160a01b031690565b90565b60006102f782610928565b60005b8381101561096757818101518382015260200161094f565b838111156108685750506000910152565b601f01601f191690565b600a811061038057fe5b61099581610918565b811461038057600080fd5b600a811061038057600080fd5b6109958161093e56fea26469706673582212202ffd98cb536624ccebc18b3b7c58c957128e41782e6485f22baff8d4d46b8d7c64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80636e3a9982116100665780636e3a9982146101095780637998a1c41461011c578063cbf54bb214610131578063ceb9a0ad14610146578063d44ad6cb146101595761009e565b80630d4d7510146100a35780630f5f6b4f146100a35780631ef92578146100b85780634fa4e54b146100d6578063579be718146100f6575b600080fd5b6100b66100b1366004610597565b61016e565b005b6100c0610204565b6040516100cd919061089d565b60405180910390f35b6100e96100e4366004610510565b610209565b6040516100cd91906108dc565b6100c06101043660046105ed565b610246565b6100c0610117366004610655565b6102a1565b6101246102fd565b6040516100cd91906108ab565b610139610329565b6040516100cd9190610885565b6100b6610154366004610510565b610380565b610161610383565b6040516100cd9190610877565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101bf5760405162461bcd60e51b81526004016101b6906108bc565b60405180910390fd5b6101ff8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103a792505050565b505050565b600190565b610211610476565b506001600160a01b0381166000908152602081815260409182902082518084019093528054835260010154908201525b919050565b60008061028884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061044d92505050565b505091505061029786826102a1565b9695505050505050565b6001600160a01b03821660009081526020819052604081208054600190910154816102d25783111591506102f79050565b806102e2575082101590506102f7565b8184101580156102f25750808411155b925050505b92915050565b60408051808201909152601281527113525397d3505617d253959154d51351539560721b602082015290565b6040805160018082528183019092526060916020808301908036833701905050905060008160008151811061035a57fe5b6020026020010190600981111561036d57fe5b9081600981111561037a57fe5b90525090565b50565b7f000000000000000000000000000000000000000000000000000000000000000090565b600080828060200190518101906103be919061068f565b9150915080600014806103d057508082105b6103ec5760405162461bcd60e51b81526004016101b6906108cc565b6001600160a01b03841660008181526020819052604090819020848155600101839055517fed112d6c0e84b6900209ce5a4c04541bc63a517e0160888c447ee70be47ce60f9061043f90859085906108ea565b60405180910390a250505050565b600080600080848060200190518101906104679190610536565b93509350935093509193509193565b604051806040016040528060008152602001600081525090565b80356102f78161098c565b80516102f78161098c565b60008083601f8401126104b857600080fd5b50813567ffffffffffffffff8111156104d057600080fd5b6020830191508360018202830111156104e857600080fd5b9250929050565b80356102f7816109a0565b80356102f7816109ad565b80516102f7816109ad565b60006020828403121561052257600080fd5b600061052e8484610490565b949350505050565b6000806000806080858703121561054c57600080fd5b6000610558878761049b565b945050602061056987828801610505565b935050604061057a87828801610505565b925050606061058b87828801610505565b91505092959194509250565b6000806000604084860312156105ac57600080fd5b60006105b88686610490565b935050602084013567ffffffffffffffff8111156105d557600080fd5b6105e1868287016104a6565b92509250509250925092565b6000806000806060858703121561060357600080fd5b600061060f8787610490565b9450506020610620878288016104ef565b935050604085013567ffffffffffffffff81111561063d57600080fd5b610649878288016104a6565b95989497509550505050565b6000806040838503121561066857600080fd5b60006106748585610490565b9250506020610685858286016104fa565b9150509250929050565b600080604083850312156106a257600080fd5b60006106ae8585610505565b925050602061068585828601610505565b60006106cb8383610744565b505060200190565b6106dc81610918565b82525050565b60006106ed8261090b565b6106f7818561090f565b935061070283610905565b8060005b8381101561073057815161071a88826106bf565b975061072583610905565b925050600101610706565b509495945050505050565b6106dc81610923565b6106dc81610941565b60006107588261090b565b610762818561090f565b935061077281856020860161094c565b61077b81610978565b9093019392505050565b600061079260298361090f565b7f4f6e6c792074686520506f6c6963794d616e616765722063616e206d616b65208152681d1a1a5cc818d85b1b60ba1b602082015260400192915050565b60006107dd604c8361090f565b7f5f5f73657446756e6453657474696e67733a206d696e496e766573746d656e7481527f416d6f756e74206d757374206265206c657373207468616e206d6178496e766560208201526b1cdd1b595b9d105b5bdd5b9d60a21b604082015260600192915050565b80516040830190610855848261086e565b506020820151610868602085018261086e565b50505050565b6106dc8161093e565b602081016102f782846106d3565b6020808252810161089681846106e2565b9392505050565b602081016102f7828461073b565b60208082528101610896818461074d565b602080825281016102f781610785565b602080825281016102f7816107d0565b604081016102f78284610844565b604081016108f8828561086e565b610896602083018461086e565b60200190565b5190565b90815260200190565b60006102f782610932565b151590565b8061024181610982565b6001600160a01b031690565b90565b60006102f782610928565b60005b8381101561096757818101518382015260200161094f565b838111156108685750506000910152565b601f01601f191690565b600a811061038057fe5b61099581610918565b811461038057600080fd5b600a811061038057600080fd5b6109958161093e56fea26469706673582212202ffd98cb536624ccebc18b3b7c58c957128e41782e6485f22baff8d4d46b8d7c64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "activateForFund(address)": {
        "details": "Unimplemented by default, can be overridden by the policy"
      },
      "addFundSettings(address,bytes)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_encodedSettings": "Encoded settings to apply to a fund"
        }
      },
      "canDisable()": {
        "returns": {
          "canDisable_": "True if the policy can be disabled"
        }
      },
      "getFundSettings(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "fundSettings_": "The fund settings"
        }
      },
      "getPolicyManager()": {
        "returns": {
          "policyManager_": "The `POLICY_MANAGER` variable value"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "The identifer string"
        }
      },
      "implementedHooks()": {
        "returns": {
          "implementedHooks_": "The implemented PolicyHooks"
        }
      },
      "passesRule(address,uint256)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_investmentAmount": "The investment amount for which to check the rule"
        },
        "returns": {
          "isValid_": "True if the rule passes"
        }
      },
      "updateFundSettings(address,bytes)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_encodedSettings": "Encoded settings to apply to a fund"
        }
      },
      "validateRule(address,uint8,bytes)": {
        "details": "onlyPolicyManager validation not necessary, as state is not updated and no events are fired",
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_encodedArgs": "Encoded args with which to validate the rule"
        },
        "returns": {
          "isValid_": "True if the rule passes"
        }
      }
    },
    "title": "MinMaxInvestmentPolicy Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(address)": {
        "notice": "Validates and initializes a policy as necessary prior to fund activation"
      },
      "addFundSettings(address,bytes)": {
        "notice": "Adds the initial policy settings for a fund"
      },
      "canDisable()": {
        "notice": "Whether or not the policy can be disabled"
      },
      "getFundSettings(address)": {
        "notice": "Gets the min and max investment amount for a given fund"
      },
      "getPolicyManager()": {
        "notice": "Gets the `POLICY_MANAGER` variable value"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for a policy"
      },
      "implementedHooks()": {
        "notice": "Gets the implemented PolicyHooks for a policy"
      },
      "passesRule(address,uint256)": {
        "notice": "Checks whether a particular condition passes the rule for a particular fund"
      },
      "updateFundSettings(address,bytes)": {
        "notice": "Updates the policy settings for a fund"
      },
      "validateRule(address,uint8,bytes)": {
        "notice": "Apply the rule with the specified parameters of a PolicyHook"
      }
    },
    "notice": "A policy that restricts the amount of the fund's denomination asset that a user can send in a single call to buy shares in a fund",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 38576,
        "contract": "contracts/release/extensions/policy-manager/policies/new-shareholders/MinMaxInvestmentPolicy.sol:MinMaxInvestmentPolicy",
        "label": "comptrollerProxyToFundSettings",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(FundSettings)38572_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(FundSettings)38572_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MinMaxInvestmentPolicy.FundSettings)",
        "numberOfBytes": "32",
        "value": "t_struct(FundSettings)38572_storage"
      },
      "t_struct(FundSettings)38572_storage": {
        "encoding": "inplace",
        "label": "struct MinMaxInvestmentPolicy.FundSettings",
        "members": [
          {
            "astId": 38569,
            "contract": "contracts/release/extensions/policy-manager/policies/new-shareholders/MinMaxInvestmentPolicy.sol:MinMaxInvestmentPolicy",
            "label": "minInvestmentAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 38571,
            "contract": "contracts/release/extensions/policy-manager/policies/new-shareholders/MinMaxInvestmentPolicy.sol:MinMaxInvestmentPolicy",
            "label": "maxInvestmentAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}