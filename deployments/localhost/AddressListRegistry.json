{
  "address": "0xB2b580ce436E6F77A5713D80887e14788Ef49c9A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dispatcher",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "ItemAddedToList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "ItemRemovedFromList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ListAttested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum AddressListRegistry.UpdateType",
          "name": "updateType",
          "type": "uint8"
        }
      ],
      "name": "ListCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nextOwner",
          "type": "address"
        }
      ],
      "name": "ListOwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum AddressListRegistry.UpdateType",
          "name": "prevUpdateType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "enum AddressListRegistry.UpdateType",
          "name": "nextUpdateType",
          "type": "uint8"
        }
      ],
      "name": "ListUpdateTypeSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_items",
          "type": "address[]"
        }
      ],
      "name": "addToList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_items",
          "type": "address[]"
        }
      ],
      "name": "areAllInAllLists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "areAllInAllLists_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_items",
          "type": "address[]"
        }
      ],
      "name": "areAllInList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "areAllInList_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_items",
          "type": "address[]"
        }
      ],
      "name": "areAllInSomeOfLists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "areAllInSomeOfLists_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_items",
          "type": "address[]"
        }
      ],
      "name": "areAllNotInAnyOfLists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "areAllNotInAnyOfLists_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_items",
          "type": "address[]"
        }
      ],
      "name": "areAllNotInList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "areAllNotInList_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_descriptions",
          "type": "string[]"
        }
      ],
      "name": "attestLists",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "enum AddressListRegistry.UpdateType",
          "name": "_updateType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_initialItems",
          "type": "address[]"
        }
      ],
      "name": "createList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "dispatcher_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getListOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getListUpdateType",
      "outputs": [
        {
          "internalType": "enum AddressListRegistry.UpdateType",
          "name": "updateType_",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_item",
          "type": "address"
        }
      ],
      "name": "isInAllLists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isInAllLists_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_item",
          "type": "address"
        }
      ],
      "name": "isInList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isInList_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_item",
          "type": "address"
        }
      ],
      "name": "isInSomeOfLists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isInSomeOfLists_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_items",
          "type": "address[]"
        }
      ],
      "name": "removeFromList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nextOwner",
          "type": "address"
        }
      ],
      "name": "setListOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "enum AddressListRegistry.UpdateType",
          "name": "_nextUpdateType",
          "type": "uint8"
        }
      ],
      "name": "setListUpdateType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc16a499849e6fd6ccc9a34affaabb0af8fbdb2877afa6fbfd68064360ea4d5b7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xB2b580ce436E6F77A5713D80887e14788Ef49c9A",
    "transactionIndex": 0,
    "gasUsed": "1223954",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0d243c57323bea5fdbe6f3dc6b98596ce897ab90b258d1984ac0c673ce780dc3",
    "transactionHash": "0xc16a499849e6fd6ccc9a34affaabb0af8fbdb2877afa6fbfd68064360ea4d5b7",
    "logs": [],
    "blockNumber": 14507984,
    "cumulativeGasUsed": "1223954",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc582Bc0317dbb0908203541971a358c44b1F3766"
  ],
  "solcInputHash": "e128c99a7ad98ab17bfe5eac6103458b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"ItemAddedToList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"ItemRemovedFromList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ListAttested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum AddressListRegistry.UpdateType\",\"name\":\"updateType\",\"type\":\"uint8\"}],\"name\":\"ListCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"ListOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum AddressListRegistry.UpdateType\",\"name\":\"prevUpdateType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum AddressListRegistry.UpdateType\",\"name\":\"nextUpdateType\",\"type\":\"uint8\"}],\"name\":\"ListUpdateTypeSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_items\",\"type\":\"address[]\"}],\"name\":\"addToList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_items\",\"type\":\"address[]\"}],\"name\":\"areAllInAllLists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"areAllInAllLists_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_items\",\"type\":\"address[]\"}],\"name\":\"areAllInList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"areAllInList_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_items\",\"type\":\"address[]\"}],\"name\":\"areAllInSomeOfLists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"areAllInSomeOfLists_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_items\",\"type\":\"address[]\"}],\"name\":\"areAllNotInAnyOfLists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"areAllNotInAnyOfLists_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_items\",\"type\":\"address[]\"}],\"name\":\"areAllNotInList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"areAllNotInList_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_descriptions\",\"type\":\"string[]\"}],\"name\":\"attestLists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"enum AddressListRegistry.UpdateType\",\"name\":\"_updateType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_initialItems\",\"type\":\"address[]\"}],\"name\":\"createList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getListOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getListUpdateType\",\"outputs\":[{\"internalType\":\"enum AddressListRegistry.UpdateType\",\"name\":\"updateType_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"isInAllLists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isInAllLists_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"isInList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isInList_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"isInSomeOfLists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isInSomeOfLists_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_items\",\"type\":\"address[]\"}],\"name\":\"removeFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"setListOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enum AddressListRegistry.UpdateType\",\"name\":\"_nextUpdateType\",\"type\":\"uint8\"}],\"name\":\"setListUpdateType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"addToList(uint256,address[])\":{\"params\":{\"_id\":\"The id of the list\",\"_items\":\"The items to add to the list\"}},\"areAllInAllLists(uint256[],address[])\":{\"params\":{\"_ids\":\"The list ids\",\"_items\":\"The items to check\"},\"returns\":{\"areAllInAllLists_\":\"True if all items are in all of the lists\"}},\"areAllInList(uint256,address[])\":{\"params\":{\"_id\":\"The list id\",\"_items\":\"The items to check\"},\"returns\":{\"areAllInList_\":\"True if all items are in the list\"}},\"areAllInSomeOfLists(uint256[],address[])\":{\"params\":{\"_ids\":\"The list ids\",\"_items\":\"The items to check\"},\"returns\":{\"areAllInSomeOfLists_\":\"True if all items are in one of the lists\"}},\"areAllNotInAnyOfLists(uint256[],address[])\":{\"params\":{\"_ids\":\"The list ids\",\"_items\":\"The items to check\"},\"returns\":{\"areAllNotInAnyOfLists_\":\"True if all items are absent from all lists\"}},\"areAllNotInList(uint256,address[])\":{\"params\":{\"_id\":\"The list id\",\"_items\":\"The items to check\"},\"returns\":{\"areAllNotInList_\":\"True if no items are in the list\"}},\"attestLists(uint256[],string[])\":{\"details\":\"Since UserA can create a list on behalf of UserB, this function provides a mechanism for UserB to attest to their management of the items therein. It will not be visible on-chain, but will be available in event logs.\",\"params\":{\"_descriptions\":\"The descriptions of the lists' content\",\"_ids\":\"The ids of the lists\"}},\"createList(address,uint8,address[])\":{\"details\":\"Specify the DISPATCHER as the _owner to make the Enzyme Council the owner\",\"params\":{\"_initialItems\":\"The initial items to add to the list\",\"_owner\":\"The owner of the list\",\"_updateType\":\"The UpdateType for the list\"},\"returns\":{\"id_\":\"The id of the newly-created list\"}},\"getDispatcher()\":{\"returns\":{\"dispatcher_\":\"The `DISPATCHER` variable value\"}},\"getListCount()\":{\"returns\":{\"count_\":\"The total count\"}},\"getListOwner(uint256)\":{\"params\":{\"_id\":\"The list id\"},\"returns\":{\"owner_\":\"The owner\"}},\"getListUpdateType(uint256)\":{\"params\":{\"_id\":\"The list id\"},\"returns\":{\"updateType_\":\"The UpdateType\"}},\"isInAllLists(uint256[],address)\":{\"params\":{\"_ids\":\"The list ids\",\"_item\":\"The item to check\"},\"returns\":{\"isInAllLists_\":\"True if item is in all of the lists\"}},\"isInList(uint256,address)\":{\"params\":{\"_id\":\"The list id\",\"_item\":\"The item to check\"},\"returns\":{\"isInList_\":\"True if the item is in the list\"}},\"isInSomeOfLists(uint256[],address)\":{\"params\":{\"_ids\":\"The list ids\",\"_item\":\"The item to check\"},\"returns\":{\"isInSomeOfLists_\":\"True if item is in one of the lists\"}},\"removeFromList(uint256,address[])\":{\"params\":{\"_id\":\"The id of the list\",\"_items\":\"The items to remove from the list\"}},\"setListOwner(uint256,address)\":{\"params\":{\"_id\":\"The id of the list\",\"_nextOwner\":\"The owner to set\"}},\"setListUpdateType(uint256,uint8)\":{\"details\":\"Can only change to a less mutable option (e.g., both add and remove => add only)\",\"params\":{\"_id\":\"The id of the list\",\"_nextUpdateType\":\"The UpdateType to set\"}}},\"title\":\"AddressListRegistry Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToList(uint256,address[])\":{\"notice\":\"Adds items to a given list\"},\"areAllInAllLists(uint256[],address[])\":{\"notice\":\"Checks if multiple items are all in all of a given set of lists\"},\"areAllInList(uint256,address[])\":{\"notice\":\"Checks if multiple items are all in a given list\"},\"areAllInSomeOfLists(uint256[],address[])\":{\"notice\":\"Checks if multiple items are all in one of a given set of lists\"},\"areAllNotInAnyOfLists(uint256[],address[])\":{\"notice\":\"Checks if multiple items are all absent from all of a given set of lists\"},\"areAllNotInList(uint256,address[])\":{\"notice\":\"Checks if multiple items are all absent from a given list\"},\"attestLists(uint256[],string[])\":{\"notice\":\"Attests active ownership for lists and (optionally) a description of each list's content\"},\"createList(address,uint8,address[])\":{\"notice\":\"Creates a new list\"},\"getDispatcher()\":{\"notice\":\"Gets the `DISPATCHER` variable\"},\"getListCount()\":{\"notice\":\"Gets the total count of lists\"},\"getListOwner(uint256)\":{\"notice\":\"Gets the owner of a given list\"},\"getListUpdateType(uint256)\":{\"notice\":\"Gets the UpdateType of a given list\"},\"isInAllLists(uint256[],address)\":{\"notice\":\"Checks if an item is in all of a given set of lists\"},\"isInList(uint256,address)\":{\"notice\":\"Checks if an item is in a given list\"},\"isInSomeOfLists(uint256[],address)\":{\"notice\":\"Checks if an item is in at least one of a given set of lists\"},\"removeFromList(uint256,address[])\":{\"notice\":\"Removes items from a given list\"},\"setListOwner(uint256,address)\":{\"notice\":\"Sets the owner for a given list\"},\"setListUpdateType(uint256,uint8)\":{\"notice\":\"Sets the UpdateType for a given list\"}},\"notice\":\"A contract for creating and updating lists of addresses\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/persistent/address-list-registry/AddressListRegistry.sol\":\"AddressListRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/persistent/address-list-registry/AddressListRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../dispatcher/IDispatcher.sol\\\";\\n\\n/// @title AddressListRegistry Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A contract for creating and updating lists of addresses\\ncontract AddressListRegistry {\\n    enum UpdateType {None, AddOnly, RemoveOnly, AddAndRemove}\\n\\n    event ItemAddedToList(uint256 indexed id, address item);\\n\\n    event ItemRemovedFromList(uint256 indexed id, address item);\\n\\n    event ListAttested(uint256 indexed id, string description);\\n\\n    event ListCreated(\\n        address indexed creator,\\n        address indexed owner,\\n        uint256 id,\\n        UpdateType updateType\\n    );\\n\\n    event ListOwnerSet(uint256 indexed id, address indexed nextOwner);\\n\\n    event ListUpdateTypeSet(\\n        uint256 indexed id,\\n        UpdateType prevUpdateType,\\n        UpdateType indexed nextUpdateType\\n    );\\n\\n    struct ListInfo {\\n        address owner;\\n        UpdateType updateType;\\n        mapping(address => bool) itemToIsInList;\\n    }\\n\\n    address private immutable DISPATCHER;\\n\\n    ListInfo[] private lists;\\n\\n    modifier onlyListOwner(uint256 _id) {\\n        require(__isListOwner(msg.sender, _id), \\\"Only callable by list owner\\\");\\n        _;\\n    }\\n\\n    constructor(address _dispatcher) public {\\n        DISPATCHER = _dispatcher;\\n\\n        // Create the first list as completely empty and immutable, to protect the default `id`\\n        lists.push(ListInfo({owner: address(0), updateType: UpdateType.None}));\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Adds items to a given list\\n    /// @param _id The id of the list\\n    /// @param _items The items to add to the list\\n    function addToList(uint256 _id, address[] calldata _items) external onlyListOwner(_id) {\\n        UpdateType updateType = getListUpdateType(_id);\\n        require(\\n            updateType == UpdateType.AddOnly || updateType == UpdateType.AddAndRemove,\\n            \\\"addToList: Cannot add to list\\\"\\n        );\\n\\n        __addToList(_id, _items);\\n    }\\n\\n    /// @notice Attests active ownership for lists and (optionally) a description of each list's content\\n    /// @param _ids The ids of the lists\\n    /// @param _descriptions The descriptions of the lists' content\\n    /// @dev Since UserA can create a list on behalf of UserB, this function provides a mechanism\\n    /// for UserB to attest to their management of the items therein. It will not be visible\\n    /// on-chain, but will be available in event logs.\\n    function attestLists(uint256[] calldata _ids, string[] calldata _descriptions) external {\\n        require(_ids.length == _descriptions.length, \\\"attestLists: Unequal arrays\\\");\\n\\n        for (uint256 i; i < _ids.length; i++) {\\n            require(\\n                __isListOwner(msg.sender, _ids[i]),\\n                \\\"attestLists: Only callable by list owner\\\"\\n            );\\n\\n            emit ListAttested(_ids[i], _descriptions[i]);\\n        }\\n    }\\n\\n    /// @notice Creates a new list\\n    /// @param _owner The owner of the list\\n    /// @param _updateType The UpdateType for the list\\n    /// @param _initialItems The initial items to add to the list\\n    /// @return id_ The id of the newly-created list\\n    /// @dev Specify the DISPATCHER as the _owner to make the Enzyme Council the owner\\n    function createList(\\n        address _owner,\\n        UpdateType _updateType,\\n        address[] calldata _initialItems\\n    ) external returns (uint256 id_) {\\n        id_ = getListCount();\\n\\n        lists.push(ListInfo({owner: _owner, updateType: _updateType}));\\n\\n        emit ListCreated(msg.sender, _owner, id_, _updateType);\\n\\n        __addToList(id_, _initialItems);\\n\\n        return id_;\\n    }\\n\\n    /// @notice Removes items from a given list\\n    /// @param _id The id of the list\\n    /// @param _items The items to remove from the list\\n    function removeFromList(uint256 _id, address[] calldata _items) external onlyListOwner(_id) {\\n        UpdateType updateType = getListUpdateType(_id);\\n        require(\\n            updateType == UpdateType.RemoveOnly || updateType == UpdateType.AddAndRemove,\\n            \\\"removeFromList: Cannot remove from list\\\"\\n        );\\n\\n        // Silently ignores items that are not in the list\\n        for (uint256 i; i < _items.length; i++) {\\n            if (isInList(_id, _items[i])) {\\n                lists[_id].itemToIsInList[_items[i]] = false;\\n\\n                emit ItemRemovedFromList(_id, _items[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Sets the owner for a given list\\n    /// @param _id The id of the list\\n    /// @param _nextOwner The owner to set\\n    function setListOwner(uint256 _id, address _nextOwner) external onlyListOwner(_id) {\\n        lists[_id].owner = _nextOwner;\\n\\n        emit ListOwnerSet(_id, _nextOwner);\\n    }\\n\\n    /// @notice Sets the UpdateType for a given list\\n    /// @param _id The id of the list\\n    /// @param _nextUpdateType The UpdateType to set\\n    /// @dev Can only change to a less mutable option (e.g., both add and remove => add only)\\n    function setListUpdateType(uint256 _id, UpdateType _nextUpdateType)\\n        external\\n        onlyListOwner(_id)\\n    {\\n        UpdateType prevUpdateType = getListUpdateType(_id);\\n        require(\\n            _nextUpdateType == UpdateType.None || prevUpdateType == UpdateType.AddAndRemove,\\n            \\\"setListUpdateType: _nextUpdateType not allowed\\\"\\n        );\\n\\n        lists[_id].updateType = _nextUpdateType;\\n\\n        emit ListUpdateTypeSet(_id, prevUpdateType, _nextUpdateType);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to add items to a list\\n    function __addToList(uint256 _id, address[] memory _items) private {\\n        for (uint256 i; i < _items.length; i++) {\\n            if (!isInList(_id, _items[i])) {\\n                lists[_id].itemToIsInList[_items[i]] = true;\\n\\n                emit ItemAddedToList(_id, _items[i]);\\n            }\\n        }\\n    }\\n\\n    /// @dev Helper to check if an account is the owner of a given list\\n    function __isListOwner(address _who, uint256 _id) private view returns (bool isListOwner_) {\\n        address owner = getListOwner(_id);\\n        return\\n            _who == owner ||\\n            (owner == getDispatcher() && _who == IDispatcher(getDispatcher()).getOwner());\\n    }\\n\\n    /////////////////\\n    // LIST SEARCH //\\n    /////////////////\\n\\n    // These functions are concerned with exiting quickly and do not consider empty params.\\n    // Developers should sanitize empty params as necessary for their own use cases.\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    // Multiple items, single list\\n\\n    /// @notice Checks if multiple items are all in a given list\\n    /// @param _id The list id\\n    /// @param _items The items to check\\n    /// @return areAllInList_ True if all items are in the list\\n    function areAllInList(uint256 _id, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllInList_)\\n    {\\n        for (uint256 i; i < _items.length; i++) {\\n            if (!isInList(_id, _items[i])) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Checks if multiple items are all absent from a given list\\n    /// @param _id The list id\\n    /// @param _items The items to check\\n    /// @return areAllNotInList_ True if no items are in the list\\n    function areAllNotInList(uint256 _id, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllNotInList_)\\n    {\\n        for (uint256 i; i < _items.length; i++) {\\n            if (isInList(_id, _items[i])) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    // Multiple items, multiple lists\\n\\n    /// @notice Checks if multiple items are all in all of a given set of lists\\n    /// @param _ids The list ids\\n    /// @param _items The items to check\\n    /// @return areAllInAllLists_ True if all items are in all of the lists\\n    function areAllInAllLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllInAllLists_)\\n    {\\n        for (uint256 i; i < _items.length; i++) {\\n            if (!isInAllLists(_ids, _items[i])) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Checks if multiple items are all in one of a given set of lists\\n    /// @param _ids The list ids\\n    /// @param _items The items to check\\n    /// @return areAllInSomeOfLists_ True if all items are in one of the lists\\n    function areAllInSomeOfLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllInSomeOfLists_)\\n    {\\n        for (uint256 i; i < _items.length; i++) {\\n            if (!isInSomeOfLists(_ids, _items[i])) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Checks if multiple items are all absent from all of a given set of lists\\n    /// @param _ids The list ids\\n    /// @param _items The items to check\\n    /// @return areAllNotInAnyOfLists_ True if all items are absent from all lists\\n    function areAllNotInAnyOfLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllNotInAnyOfLists_)\\n    {\\n        for (uint256 i; i < _items.length; i++) {\\n            if (isInSomeOfLists(_ids, _items[i])) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    // Single item, multiple lists\\n\\n    /// @notice Checks if an item is in all of a given set of lists\\n    /// @param _ids The list ids\\n    /// @param _item The item to check\\n    /// @return isInAllLists_ True if item is in all of the lists\\n    function isInAllLists(uint256[] memory _ids, address _item)\\n        public\\n        view\\n        returns (bool isInAllLists_)\\n    {\\n        for (uint256 i; i < _ids.length; i++) {\\n            if (!isInList(_ids[i], _item)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Checks if an item is in at least one of a given set of lists\\n    /// @param _ids The list ids\\n    /// @param _item The item to check\\n    /// @return isInSomeOfLists_ True if item is in one of the lists\\n    function isInSomeOfLists(uint256[] memory _ids, address _item)\\n        public\\n        view\\n        returns (bool isInSomeOfLists_)\\n    {\\n        for (uint256 i; i < _ids.length; i++) {\\n            if (isInList(_ids[i], _item)) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `DISPATCHER` variable\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\n    function getDispatcher() public view returns (address dispatcher_) {\\n        return DISPATCHER;\\n    }\\n\\n    /// @notice Gets the total count of lists\\n    /// @return count_ The total count\\n    function getListCount() public view returns (uint256 count_) {\\n        return lists.length;\\n    }\\n\\n    /// @notice Gets the owner of a given list\\n    /// @param _id The list id\\n    /// @return owner_ The owner\\n    function getListOwner(uint256 _id) public view returns (address owner_) {\\n        return lists[_id].owner;\\n    }\\n\\n    /// @notice Gets the UpdateType of a given list\\n    /// @param _id The list id\\n    /// @return updateType_ The UpdateType\\n    function getListUpdateType(uint256 _id) public view returns (UpdateType updateType_) {\\n        return lists[_id].updateType;\\n    }\\n\\n    /// @notice Checks if an item is in a given list\\n    /// @param _id The list id\\n    /// @param _item The item to check\\n    /// @return isInList_ True if the item is in the list\\n    function isInList(uint256 _id, address _item) public view returns (bool isInList_) {\\n        return lists[_id].itemToIsInList[_item];\\n    }\\n}\\n\",\"keccak256\":\"0x396b0bad5049811b91ff1445e1b341079cb81a857a1a81551628542ab2dd6b66\",\"license\":\"GPL-3.0\"},\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e6b0e6cf325d4f6332b8eb2b3c446b2ef3ca8456bdf0d12318d0fd9e90aeb30\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001606380380620016068339810160408190526200003491620000ef565b606081901b6001600160601b031916608052604080518082019091526000808252602082018181528154600181018355918052825160029092027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b039093166001600160a01b031990931692909217808355905190829060ff60a01b1916600160a01b836003811115620000ce57fe5b021790555050505062000144565b8051620000e9816200012a565b92915050565b6000602082840312156200010257600080fd5b6000620001108484620000dc565b949350505050565b60006001600160a01b038216620000e9565b620001358162000118565b81146200014157600080fd5b50565b60805160601c6114a462000162600039806109c052506114a46000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806375674f46116100a2578063afc8dd6111610071578063afc8dd6114610246578063b426f94614610259578063be68406e1461026c578063ebb3d5891461027f578063ee4483dc1461028757610116565b806375674f46146101fa5780638da3d7361461020d578063956e8faa14610220578063abdf62151461023357610116565b806330bdd386116100e957806330bdd3861461018c5780633a6914fe1461019f5780634446fe37146101b257806351d3a322146101c5578063539f2ab4146101da57610116565b8063107df6c51461011b57806319bcc938146101445780631c563204146101645780632ce37b1014610177575b600080fd5b61012e610129366004610f55565b61029a565b60405161013b9190611288565b60405180910390f35b610157610152366004610fb4565b6102e6565b60405161013b919061127a565b61012e610172366004610fd2565b610316565b61017f610358565b60405161013b9190611316565b61012e61019a366004610f55565b61035e565b61012e6101ad366004610f55565b61039e565b61012e6101c0366004611047565b6103d2565b6101d86101d3366004610ff1565b610413565b005b6101ed6101e8366004610fb4565b610599565b60405161013b9190611296565b61012e610208366004610f04565b6105c8565b6101d861021b366004610ff1565b610613565b6101d861022e366004610fd2565b6106cc565b61012e610241366004611047565b61075c565b61012e610254366004610f04565b61078f565b6101d8610267366004610eac565b6107c1565b61017f61027a366004610e44565b610893565b6101576109be565b6101d8610295366004611066565b6109e2565b6000805b82518110156102da576102c4848483815181106102b757fe5b602002602001015161078f565b6102d25760009150506102e0565b60010161029e565b50600190505b92915050565b60008082815481106102f457fe5b60009182526020909120600290910201546001600160a01b031690505b919050565b600080838154811061032457fe5b600091825260208083206001600160a01b03861684526001600290930201919091019052604090205460ff16905092915050565b60005490565b6000805b82518110156102da576103888484838151811061037b57fe5b60200260200101516105c8565b6103965760009150506102e0565b600101610362565b6000805b82518110156102da576103bb8484838151811061037b57fe5b156103ca5760009150506102e0565b6001016103a2565b6000805b82518110156102da576103fc848483815181106103ef57fe5b6020026020010151610316565b1561040b5760009150506102e0565b6001016103d6565b8261041e3382610ade565b6104435760405162461bcd60e51b815260040161043a906112b6565b60405180910390fd5b600061044e85610599565b9050600281600381111561045e57fe5b14806104755750600381600381111561047357fe5b145b6104915760405162461bcd60e51b815260040161043a906112e6565b60005b83811015610591576104c1868686848181106104ac57fe5b90506020020160208101906101729190610e08565b156105895760008087815481106104d457fe5b906000526020600020906002020160010160008787858181106104f357fe5b90506020020160208101906105089190610e08565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055857f810f138e6e0ca6f5ac0bf2efc960187bce2c3b5afbb1e2d05905f2be7b3810b686868481811061055e57fe5b90506020020160208101906105739190610e08565b604051610580919061127a565b60405180910390a25b600101610494565b505050505050565b60008082815481106105a757fe5b6000918252602090912060029091020154600160a01b900460ff1692915050565b6000805b8351811015610609576105f28482815181106105e457fe5b602002602001015184610316565b156106015760019150506102e0565b6001016105cc565b5060009392505050565b8261061e3382610ade565b61063a5760405162461bcd60e51b815260040161043a906112b6565b600061064585610599565b9050600181600381111561065557fe5b148061066c5750600381600381111561066a57fe5b145b6106885760405162461bcd60e51b815260040161043a906112f6565b6106c585858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610bbe92505050565b5050505050565b816106d73382610ade565b6106f35760405162461bcd60e51b815260040161043a906112b6565b816000848154811061070157fe5b6000918252602082206002919091020180546001600160a01b0319166001600160a01b039384161790556040519184169185917f2d1c424d2803af2219fba896bc3092aed0ab3f7b022f412b79562b0fc2c2907d91a3505050565b6000805b82518110156102da57610779848483815181106103ef57fe5b6107875760009150506102e0565b600101610760565b6000805b83518110156102da576107ab8482815181106105e457fe5b6107b95760009150506102e0565b600101610793565b8281146107e05760405162461bcd60e51b815260040161043a906112c6565b60005b838110156106c557610807338686848181106107fb57fe5b90506020020135610ade565b6108235760405162461bcd60e51b815260040161043a906112d6565b84848281811061082f57fe5b905060200201357fddbb257b211697fab7f1ee9f59674cba284dbd7b9f6e1f3da5b645c890bf940084848481811061086357fe5b90506020028101906108759190611346565b6040516108839291906112a4565b60405180910390a26001016107e3565b600061089d610358565b905060006040518060400160405280876001600160a01b031681526020018660038111156108c757fe5b905281546001810183556000928352602092839020825160029092020180546001600160a01b0319166001600160a01b0390921691909117808255928201519192909190829060ff60a01b1916600160a01b83600381111561092557fe5b02179055505050846001600160a01b0316336001600160a01b03167fc2b2d696fda57bcf0347d9ea036ce8258434f4171cd131b4c1d22a6f0ae960d28387604051610971929190611324565b60405180910390a36109b681848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610bbe92505050565b949350505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b816109ed3382610ade565b610a095760405162461bcd60e51b815260040161043a906112b6565b6000610a1484610599565b90506000836003811115610a2457fe5b1480610a3b57506003816003811115610a3957fe5b145b610a575760405162461bcd60e51b815260040161043a90611306565b8260008581548110610a6557fe5b60009182526020909120600290910201805460ff60a01b1916600160a01b836003811115610a8f57fe5b0217905550826003811115610aa057fe5b847f44966c6bc2b3eef1eea6958dc704bb8527d350a282589bb13dd056819bd9d64683604051610ad09190611296565b60405180910390a350505050565b600080610aea836102e6565b9050806001600160a01b0316846001600160a01b031614806109b65750610b0f6109be565b6001600160a01b0316816001600160a01b03161480156109b65750610b326109be565b6001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6a57600080fd5b505afa158015610b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba29190610e26565b6001600160a01b0316846001600160a01b031614949350505050565b60005b8151811015610c9f57610bda838383815181106103ef57fe5b610c9757600160008481548110610bed57fe5b90600052602060002090600202016001016000848481518110610c0c57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550827fb8848f994c7d66cdc76defd3606ffefb56ad840b408bf51230110196d5f4d8c4838381518110610c7957fe5b6020026020010151604051610c8e919061127a565b60405180910390a25b600101610bc1565b505050565b80356102e081611444565b80516102e081611444565b60008083601f840112610ccc57600080fd5b50813567ffffffffffffffff811115610ce457600080fd5b602083019150836020820283011115610cfc57600080fd5b9250929050565b600082601f830112610d1457600080fd5b8135610d27610d22826113c3565b61139c565b91508181835260208401935060208101905083856020840282011115610d4c57600080fd5b60005b83811015610d785781610d628882610ca4565b8452506020928301929190910190600101610d4f565b5050505092915050565b600082601f830112610d9357600080fd5b8135610da1610d22826113c3565b91508181835260208401935060208101905083856020840282011115610dc657600080fd5b60005b83811015610d785781610ddc8882610dfd565b8452506020928301929190910190600101610dc9565b80356102e081611458565b80356102e081611465565b600060208284031215610e1a57600080fd5b60006109b68484610ca4565b600060208284031215610e3857600080fd5b60006109b68484610caf565b60008060008060608587031215610e5a57600080fd5b6000610e668787610ca4565b9450506020610e7787828801610df2565b935050604085013567ffffffffffffffff811115610e9457600080fd5b610ea087828801610cba565b95989497509550505050565b60008060008060408587031215610ec257600080fd5b843567ffffffffffffffff811115610ed957600080fd5b610ee587828801610cba565b9450945050602085013567ffffffffffffffff811115610e9457600080fd5b60008060408385031215610f1757600080fd5b823567ffffffffffffffff811115610f2e57600080fd5b610f3a85828601610d82565b9250506020610f4b85828601610ca4565b9150509250929050565b60008060408385031215610f6857600080fd5b823567ffffffffffffffff811115610f7f57600080fd5b610f8b85828601610d82565b925050602083013567ffffffffffffffff811115610fa857600080fd5b610f4b85828601610d03565b600060208284031215610fc657600080fd5b60006109b68484610dfd565b60008060408385031215610fe557600080fd5b6000610f3a8585610dfd565b60008060006040848603121561100657600080fd5b60006110128686610dfd565b935050602084013567ffffffffffffffff81111561102f57600080fd5b61103b86828701610cba565b92509250509250925092565b6000806040838503121561105a57600080fd5b6000610f8b8585610dfd565b6000806040838503121561107957600080fd5b60006110858585610dfd565b9250506020610f4b85828601610df2565b61109f816113ed565b82525050565b61109f816113f8565b61109f81611416565b60006110c383856113e4565b93506110d0838584611421565b6110d98361142d565b9093019392505050565b60006110f0601b836113e4565b7f4f6e6c792063616c6c61626c65206279206c697374206f776e65720000000000815260200192915050565b6000611129601b836113e4565b7f6174746573744c697374733a20556e657175616c206172726179730000000000815260200192915050565b60006111626028836113e4565b7f6174746573744c697374733a204f6e6c792063616c6c61626c65206279206c6981526739ba1037bbb732b960c11b602082015260400192915050565b60006111ac6027836113e4565b7f72656d6f766546726f6d4c6973743a2043616e6e6f742072656d6f76652066728152661bdb481b1a5cdd60ca1b602082015260400192915050565b60006111f5601d836113e4565b7f616464546f4c6973743a2043616e6e6f742061646420746f206c697374000000815260200192915050565b600061122e602e836113e4565b7f7365744c697374557064617465547970653a205f6e657874557064617465547981526d1c19481b9bdd08185b1b1bddd95960921b602082015260400192915050565b61109f81611413565b602081016102e08284611096565b602081016102e082846110a5565b602081016102e082846110ae565b602080825281016109b68184866110b7565b602080825281016102e0816110e3565b602080825281016102e08161111c565b602080825281016102e081611155565b602080825281016102e08161119f565b602080825281016102e0816111e8565b602080825281016102e081611221565b602081016102e08284611271565b604081016113328285611271565b61133f60208301846110ae565b9392505050565b6000808335601e193685900301811261135e57600080fd5b80840192508235915067ffffffffffffffff82111561137c57600080fd5b60208301925060018202360383131561139457600080fd5b509250929050565b60405181810167ffffffffffffffff811182821017156113bb57600080fd5b604052919050565b600067ffffffffffffffff8211156113da57600080fd5b5060209081020190565b90815260200190565b60006102e082611407565b151590565b8061031181611437565b6001600160a01b031690565b90565b60006102e0826113fd565b82818337506000910152565b601f01601f191690565b6004811061144157fe5b50565b61144d816113ed565b811461144157600080fd5b6004811061144157600080fd5b61144d8161141356fea2646970667358221220236d32aa3bf2cc6d4724f41356c6f61c50183e3cbbeceb2f5a1c7bbd6148ccf864736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "addToList(uint256,address[])": {
        "params": {
          "_id": "The id of the list",
          "_items": "The items to add to the list"
        }
      },
      "areAllInAllLists(uint256[],address[])": {
        "params": {
          "_ids": "The list ids",
          "_items": "The items to check"
        },
        "returns": {
          "areAllInAllLists_": "True if all items are in all of the lists"
        }
      },
      "areAllInList(uint256,address[])": {
        "params": {
          "_id": "The list id",
          "_items": "The items to check"
        },
        "returns": {
          "areAllInList_": "True if all items are in the list"
        }
      },
      "areAllInSomeOfLists(uint256[],address[])": {
        "params": {
          "_ids": "The list ids",
          "_items": "The items to check"
        },
        "returns": {
          "areAllInSomeOfLists_": "True if all items are in one of the lists"
        }
      },
      "areAllNotInAnyOfLists(uint256[],address[])": {
        "params": {
          "_ids": "The list ids",
          "_items": "The items to check"
        },
        "returns": {
          "areAllNotInAnyOfLists_": "True if all items are absent from all lists"
        }
      },
      "areAllNotInList(uint256,address[])": {
        "params": {
          "_id": "The list id",
          "_items": "The items to check"
        },
        "returns": {
          "areAllNotInList_": "True if no items are in the list"
        }
      },
      "attestLists(uint256[],string[])": {
        "details": "Since UserA can create a list on behalf of UserB, this function provides a mechanism for UserB to attest to their management of the items therein. It will not be visible on-chain, but will be available in event logs.",
        "params": {
          "_descriptions": "The descriptions of the lists' content",
          "_ids": "The ids of the lists"
        }
      },
      "createList(address,uint8,address[])": {
        "details": "Specify the DISPATCHER as the _owner to make the Enzyme Council the owner",
        "params": {
          "_initialItems": "The initial items to add to the list",
          "_owner": "The owner of the list",
          "_updateType": "The UpdateType for the list"
        },
        "returns": {
          "id_": "The id of the newly-created list"
        }
      },
      "getDispatcher()": {
        "returns": {
          "dispatcher_": "The `DISPATCHER` variable value"
        }
      },
      "getListCount()": {
        "returns": {
          "count_": "The total count"
        }
      },
      "getListOwner(uint256)": {
        "params": {
          "_id": "The list id"
        },
        "returns": {
          "owner_": "The owner"
        }
      },
      "getListUpdateType(uint256)": {
        "params": {
          "_id": "The list id"
        },
        "returns": {
          "updateType_": "The UpdateType"
        }
      },
      "isInAllLists(uint256[],address)": {
        "params": {
          "_ids": "The list ids",
          "_item": "The item to check"
        },
        "returns": {
          "isInAllLists_": "True if item is in all of the lists"
        }
      },
      "isInList(uint256,address)": {
        "params": {
          "_id": "The list id",
          "_item": "The item to check"
        },
        "returns": {
          "isInList_": "True if the item is in the list"
        }
      },
      "isInSomeOfLists(uint256[],address)": {
        "params": {
          "_ids": "The list ids",
          "_item": "The item to check"
        },
        "returns": {
          "isInSomeOfLists_": "True if item is in one of the lists"
        }
      },
      "removeFromList(uint256,address[])": {
        "params": {
          "_id": "The id of the list",
          "_items": "The items to remove from the list"
        }
      },
      "setListOwner(uint256,address)": {
        "params": {
          "_id": "The id of the list",
          "_nextOwner": "The owner to set"
        }
      },
      "setListUpdateType(uint256,uint8)": {
        "details": "Can only change to a less mutable option (e.g., both add and remove => add only)",
        "params": {
          "_id": "The id of the list",
          "_nextUpdateType": "The UpdateType to set"
        }
      }
    },
    "title": "AddressListRegistry Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToList(uint256,address[])": {
        "notice": "Adds items to a given list"
      },
      "areAllInAllLists(uint256[],address[])": {
        "notice": "Checks if multiple items are all in all of a given set of lists"
      },
      "areAllInList(uint256,address[])": {
        "notice": "Checks if multiple items are all in a given list"
      },
      "areAllInSomeOfLists(uint256[],address[])": {
        "notice": "Checks if multiple items are all in one of a given set of lists"
      },
      "areAllNotInAnyOfLists(uint256[],address[])": {
        "notice": "Checks if multiple items are all absent from all of a given set of lists"
      },
      "areAllNotInList(uint256,address[])": {
        "notice": "Checks if multiple items are all absent from a given list"
      },
      "attestLists(uint256[],string[])": {
        "notice": "Attests active ownership for lists and (optionally) a description of each list's content"
      },
      "createList(address,uint8,address[])": {
        "notice": "Creates a new list"
      },
      "getDispatcher()": {
        "notice": "Gets the `DISPATCHER` variable"
      },
      "getListCount()": {
        "notice": "Gets the total count of lists"
      },
      "getListOwner(uint256)": {
        "notice": "Gets the owner of a given list"
      },
      "getListUpdateType(uint256)": {
        "notice": "Gets the UpdateType of a given list"
      },
      "isInAllLists(uint256[],address)": {
        "notice": "Checks if an item is in all of a given set of lists"
      },
      "isInList(uint256,address)": {
        "notice": "Checks if an item is in a given list"
      },
      "isInSomeOfLists(uint256[],address)": {
        "notice": "Checks if an item is in at least one of a given set of lists"
      },
      "removeFromList(uint256,address[])": {
        "notice": "Removes items from a given list"
      },
      "setListOwner(uint256,address)": {
        "notice": "Sets the owner for a given list"
      },
      "setListUpdateType(uint256,uint8)": {
        "notice": "Sets the UpdateType for a given list"
      }
    },
    "notice": "A contract for creating and updating lists of addresses",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3477,
        "contract": "contracts/persistent/address-list-registry/AddressListRegistry.sol:AddressListRegistry",
        "label": "lists",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(ListInfo)3472_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ListInfo)3472_storage)dyn_storage": {
        "base": "t_struct(ListInfo)3472_storage",
        "encoding": "dynamic_array",
        "label": "struct AddressListRegistry.ListInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(UpdateType)3421": {
        "encoding": "inplace",
        "label": "enum AddressListRegistry.UpdateType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(ListInfo)3472_storage": {
        "encoding": "inplace",
        "label": "struct AddressListRegistry.ListInfo",
        "members": [
          {
            "astId": 3465,
            "contract": "contracts/persistent/address-list-registry/AddressListRegistry.sol:AddressListRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3467,
            "contract": "contracts/persistent/address-list-registry/AddressListRegistry.sol:AddressListRegistry",
            "label": "updateType",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(UpdateType)3421"
          },
          {
            "astId": 3471,
            "contract": "contracts/persistent/address-list-registry/AddressListRegistry.sol:AddressListRegistry",
            "label": "itemToIsInList",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}