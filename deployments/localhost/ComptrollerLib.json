{
  "address": "0x2Dd78Fd9B8F40659Af32eF98555B8b31bC97A351",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dispatcher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeReserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_valueInterpreter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_externalPositionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetFinalityResolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasRelayPaymasterFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mlnToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "autoProtocolFeeSharesBuyback",
          "type": "bool"
        }
      ],
      "name": "AutoProtocolFeeSharesBuybackSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "failureReturnData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buybackValueInMln",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gav",
          "type": "uint256"
        }
      ],
      "name": "BuyBackMaxProtocolFeeSharesFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DeactivateFeeManagerFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "gasRelayPaymaster",
          "type": "address"
        }
      ],
      "name": "GasRelayPaymasterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "MigratedSharesDuePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PayProtocolFeeDuringDestructFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "failureReturnData",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesAmount",
          "type": "uint256"
        }
      ],
      "name": "PreRedeemSharesHookFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RedeemSharesInKindCalcGavFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesIssued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesReceived",
          "type": "uint256"
        }
      ],
      "name": "SharesBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "receivedAssets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "receivedAssetAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "SharesRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        }
      ],
      "name": "VaultProxySet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isMigration",
          "type": "bool"
        }
      ],
      "name": "activate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharesAmount",
          "type": "uint256"
        }
      ],
      "name": "buyBackProtocolFeeShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_investmentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minSharesQuantity",
          "type": "uint256"
        }
      ],
      "name": "buyShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesReceived_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_investmentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minSharesQuantity",
          "type": "uint256"
        }
      ],
      "name": "buySharesOnBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesReceived_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_finalizeAssets",
          "type": "bool"
        }
      ],
      "name": "calcGav",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gav_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_requireFinality",
          "type": "bool"
        }
      ],
      "name": "calcGrossShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "grossShareValue_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_extension",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callArgs",
          "type": "bytes"
        }
      ],
      "name": "callOnExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployGasRelayPaymaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToGasRelayPaymaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deactivateFeeManagerGasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payProtocolFeeGasLimit",
          "type": "uint256"
        }
      ],
      "name": "destructActivated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destructUnactivated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "doesAutoProtocolFeeSharesBuyback",
      "outputs": [
        {
          "internalType": "bool",
          "name": "doesAutoBuyback_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetFinalityResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "assetFinalityResolver_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDenominationAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "denominationAsset_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "dispatcher_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExternalPositionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "externalPositionManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasRelayPaymaster",
      "outputs": [
        {
          "internalType": "address",
          "name": "gasRelayPaymaster_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasRelayPaymasterFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "gasRelayPaymasterFactory_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasRelayTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "getLastSharesBoughtTimestampForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastSharesBoughtTimestamp_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMlnToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "mlnToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPolicyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeReserve",
      "outputs": [
        {
          "internalType": "address",
          "name": "protocolFeeReserve_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSharesActionTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesActionTimelock_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValueInterpreter",
      "outputs": [
        {
          "internalType": "address",
          "name": "valueInterpreter_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "vaultProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "wethToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_denominationAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesActionTimelock",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IVault.VaultAction",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        }
      ],
      "name": "permissionedVaultAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "preTransferSharesHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "preTransferSharesHookFreelyTransferable",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "pullWethForGasRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_payoutAssets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_payoutAssetPercentages",
          "type": "uint256[]"
        }
      ],
      "name": "redeemSharesForSpecificAssets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "payoutAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_additionalAssets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assetsToSkip",
          "type": "address[]"
        }
      ],
      "name": "redeemSharesInKind",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "payoutAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payoutAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_nextAutoProtocolFeeSharesBuyback",
          "type": "bool"
        }
      ],
      "name": "setAutoProtocolFeeSharesBuyback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextGasRelayPaymaster",
          "type": "address"
        }
      ],
      "name": "setGasRelayPaymaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        }
      ],
      "name": "setVaultProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdownGasRelayPaymaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_encodedArgs",
          "type": "bytes"
        }
      ],
      "name": "vaultCallOnContract",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "returnData_",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2fd6b5094c98799ba0c4f11afe43331d73dd66dc8d22e5cc5bba281a51b5c89",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2Dd78Fd9B8F40659Af32eF98555B8b31bC97A351",
    "transactionIndex": 0,
    "gasUsed": "5317675",
    "logsBloom": "0x
    "blockHash": "0x42f122d0298aead7b4ee910c0ae71815096c046ad28629e3a13e4c314dee8740",
    "transactionHash": "0xb2fd6b5094c98799ba0c4f11afe43331d73dd66dc8d22e5cc5bba281a51b5c89",
    "logs": [],
    "blockNumber": 14508028,
    "cumulativeGasUsed": "5317675",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc582Bc0317dbb0908203541971a358c44b1F3766",
    "0x3904b8f5b0F49cD206b7d5AABeE5D1F37eE15D8d",
    "0xaca81583840B1bf2dDF6CDe824ada250C1936B4D",
    "0xeF31027350Be2c7439C1b0BE022d49421488b72C",
    "0xf090f16dEc8b6D24082Edd25B1C8D26f2bC86128",
    "0x071586BA1b380B00B793Cc336fe01106B0BFbE6D",
    "0xe70f935c32dA4dB13e7876795f1e175465e6458e",
    "0xaC9fCBA56E42d5960f813B9D0387F3D3bC003338",
    "0xA56F946D6398Dd7d9D4D9B337Cf9E0F68982ca5B",
    "0xefAB0Beb0A557E452b398035eA964948c750b2Fd",
    "0xec67005c4E498Ec7f55E092bd1d35cbC47C91892",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
  ],
  "solcInputHash": "e128c99a7ad98ab17bfe5eac6103458b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeReserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_valueInterpreter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalPositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetFinalityResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasRelayPaymasterFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mlnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoProtocolFeeSharesBuyback\",\"type\":\"bool\"}],\"name\":\"AutoProtocolFeeSharesBuybackSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"failureReturnData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackValueInMln\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gav\",\"type\":\"uint256\"}],\"name\":\"BuyBackMaxProtocolFeeSharesFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DeactivateFeeManagerFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasRelayPaymaster\",\"type\":\"address\"}],\"name\":\"GasRelayPaymasterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"MigratedSharesDuePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PayProtocolFeeDuringDestructFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"failureReturnData\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"PreRedeemSharesHookFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RedeemSharesInKindCalcGavFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesIssued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesReceived\",\"type\":\"uint256\"}],\"name\":\"SharesBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"receivedAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"receivedAssetAmounts\",\"type\":\"uint256[]\"}],\"name\":\"SharesRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"}],\"name\":\"VaultProxySet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMigration\",\"type\":\"bool\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"buyBackProtocolFeeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSharesQuantity\",\"type\":\"uint256\"}],\"name\":\"buyShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesReceived_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSharesQuantity\",\"type\":\"uint256\"}],\"name\":\"buySharesOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesReceived_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_finalizeAssets\",\"type\":\"bool\"}],\"name\":\"calcGav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gav_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_requireFinality\",\"type\":\"bool\"}],\"name\":\"calcGrossShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"grossShareValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extension\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callArgs\",\"type\":\"bytes\"}],\"name\":\"callOnExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployGasRelayPaymaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToGasRelayPaymaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deactivateFeeManagerGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payProtocolFeeGasLimit\",\"type\":\"uint256\"}],\"name\":\"destructActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructUnactivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doesAutoProtocolFeeSharesBuyback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"doesAutoBuyback_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetFinalityResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetFinalityResolver_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDenominationAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"denominationAsset_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExternalPositionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"externalPositionManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasRelayPaymaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gasRelayPaymaster_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasRelayPaymasterFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gasRelayPaymasterFactory_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasRelayTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getLastSharesBoughtTimestampForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastSharesBoughtTimestamp_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMlnToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mlnToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolicyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolFeeReserve_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSharesActionTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesActionTimelock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValueInterpreter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"valueInterpreter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultProxy_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_denominationAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesActionTimelock\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.VaultAction\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"permissionedVaultAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"preTransferSharesHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"preTransferSharesHookFreelyTransferable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pullWethForGasRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_payoutAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_payoutAssetPercentages\",\"type\":\"uint256[]\"}],\"name\":\"redeemSharesForSpecificAssets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"payoutAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_additionalAssets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assetsToSkip\",\"type\":\"address[]\"}],\"name\":\"redeemSharesInKind\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"payoutAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_nextAutoProtocolFeeSharesBuyback\",\"type\":\"bool\"}],\"name\":\"setAutoProtocolFeeSharesBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextGasRelayPaymaster\",\"type\":\"address\"}],\"name\":\"setGasRelayPaymaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"setVaultProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownGasRelayPaymaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_encodedArgs\",\"type\":\"bytes\"}],\"name\":\"vaultCallOnContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData_\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"activate(bool)\":{\"details\":\"No need to assert anything beyond FundDeployer access.\",\"params\":{\"_isMigration\":\"True if a migrated fund is being activated\"}},\"buyBackProtocolFeeShares(uint256)\":{\"params\":{\"_sharesAmount\":\"The amount of shares to buy back\"}},\"buyShares(uint256,uint256)\":{\"params\":{\"_investmentAmount\":\"The amount of the fund's denomination asset with which to buy shares\",\"_minSharesQuantity\":\"The minimum quantity of shares to buy\"},\"returns\":{\"sharesReceived_\":\"The actual amount of shares received\"}},\"buySharesOnBehalf(address,uint256,uint256)\":{\"details\":\"This function is freely callable if there is no sharesActionTimelock set, but it is limited to a list of trusted callers otherwise, in order to prevent a griefing attack where the caller buys shares for a _buyer, thereby resetting their lastSharesBought value.\",\"params\":{\"_buyer\":\"The account on behalf of whom to buy shares\",\"_investmentAmount\":\"The amount of the fund's denomination asset with which to buy shares\",\"_minSharesQuantity\":\"The minimum quantity of shares to buy\"},\"returns\":{\"sharesReceived_\":\"The actual amount of shares received\"}},\"calcGav(bool)\":{\"params\":{\"_finalizeAssets\":\"True if all assets must have exact final balances settled\"},\"returns\":{\"gav_\":\"The fund GAV\"}},\"calcGrossShareValue(bool)\":{\"details\":\"Does not account for any fees outstanding.\",\"params\":{\"_requireFinality\":\"True if all assets must have exact final balances settled\"},\"returns\":{\"grossShareValue_\":\"The amount of the denomination asset per share\"}},\"callOnExtension(address,uint256,bytes)\":{\"details\":\"Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy (for access control). Uses a mutex of sorts that allows \\\"permissioned vault actions\\\" during calls originating from this function.\",\"params\":{\"_actionId\":\"An ID representing the action to take on the extension (see extension)\",\"_callArgs\":\"The encoded data for the call\",\"_extension\":\"The Extension contract to call (e.g., FeeManager)\"}},\"destructActivated(uint256,uint256)\":{\"details\":\"No need to assert anything beyond FundDeployer access. Uses the try/catch pattern throughout out of an abundance of caution for the function's success. All external calls must use limited forwarded gas to ensure that a migration to another release does not get bricked by logic that consumes too much gas for the block limit.\",\"params\":{\"_deactivateFeeManagerGasLimit\":\"The amount of gas to forward to deactivate the FeeManager\",\"_payProtocolFeeGasLimit\":\"The amount of gas to forward to pay the protocol fee\"}},\"doesAutoProtocolFeeSharesBuyback()\":{\"returns\":{\"doesAutoBuyback_\":\"True if shares are automatically bought back\"}},\"getAssetFinalityResolver()\":{\"returns\":{\"assetFinalityResolver_\":\"The `ASSET_FINALITY_RESOLVER` variable value\"}},\"getDenominationAsset()\":{\"returns\":{\"denominationAsset_\":\"The `denominationAsset` variable value\"}},\"getDispatcher()\":{\"returns\":{\"dispatcher_\":\"The `DISPATCHER` variable value\"}},\"getExternalPositionManager()\":{\"returns\":{\"externalPositionManager_\":\"The `EXTERNAL_POSITION_MANAGER` variable value\"}},\"getFeeManager()\":{\"returns\":{\"feeManager_\":\"The `FEE_MANAGER` variable value\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getGasRelayPaymaster()\":{\"returns\":{\"gasRelayPaymaster_\":\"The `gasRelayPaymaster` variable value\"}},\"getGasRelayPaymasterFactory()\":{\"returns\":{\"gasRelayPaymasterFactory_\":\"The `GAS_RELAY_PAYMASTER_FACTORY` variable value\"}},\"getGasRelayTrustedForwarder()\":{\"returns\":{\"trustedForwarder_\":\"The trusted forwarder\"}},\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"getLastSharesBoughtTimestampForAccount(address)\":{\"params\":{\"_who\":\"The account for which to get the timestamp\"},\"returns\":{\"lastSharesBoughtTimestamp_\":\"The timestamp of the last shares bought\"}},\"getMlnToken()\":{\"returns\":{\"mlnToken_\":\"The `MLN_TOKEN` variable value\"}},\"getPolicyManager()\":{\"returns\":{\"policyManager_\":\"The `POLICY_MANAGER` variable value\"}},\"getProtocolFeeReserve()\":{\"returns\":{\"protocolFeeReserve_\":\"The `PROTOCOL_FEE_RESERVE` variable value\"}},\"getSharesActionTimelock()\":{\"returns\":{\"sharesActionTimelock_\":\"The `sharesActionTimelock` variable value\"}},\"getValueInterpreter()\":{\"returns\":{\"valueInterpreter_\":\"The `VALUE_INTERPRETER` variable value\"}},\"getVaultProxy()\":{\"returns\":{\"vaultProxy_\":\"The `vaultProxy` variable value\"}},\"getWethToken()\":{\"returns\":{\"wethToken_\":\"The `WETH_TOKEN` variable value\"}},\"init(address,uint256)\":{\"details\":\"Pseudo-constructor per proxy. No need to assert access because this is called atomically on deployment, and once it's called, it cannot be called again.\",\"params\":{\"_denominationAsset\":\"The asset in which the fund's value should be denominated\",\"_sharesActionTimelock\":\"The minimum number of seconds between any two \\\"shares actions\\\" (buying or selling shares) by the same user\"}},\"permissionedVaultAction(uint8,bytes)\":{\"params\":{\"_action\":\"The enum representing the VaultAction to perform on the VaultProxy\",\"_actionData\":\"The call data for the action to perform\"}},\"preTransferSharesHook(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of shares\",\"_recipient\":\"The recipient of the shares\",\"_sender\":\"The sender of the shares\"}},\"preTransferSharesHookFreelyTransferable(address)\":{\"details\":\"No need to validate caller, as policies are not run\",\"params\":{\"_sender\":\"The sender of the shares\"}},\"pullWethForGasRelayer(uint256)\":{\"params\":{\"_amount\":\"Amount of the WETH to pull from the vault\"}},\"redeemSharesForSpecificAssets(address,uint256,address[],uint256[])\":{\"details\":\"Redeem all shares of the sender by setting _sharesQuantity to the max uint value. _payoutAssetPercentages must total exactly 100%. In order to specify less and forgo the remaining gav owed on the redeemed shares, pass in address(0) with the percentage to forego. Unlike redeemSharesInKind(), this function allows policies to run and prevent redemption.\",\"params\":{\"_payoutAssetPercentages\":\"The percentage of the owed amount to pay out in each asset\",\"_payoutAssets\":\"The assets to payout\",\"_recipient\":\"The account that will receive the specified assets\",\"_sharesQuantity\":\"The quantity of shares to redeem\"},\"returns\":{\"payoutAmounts_\":\"The amount of each asset paid out to the _recipient\"}},\"redeemSharesInKind(address,uint256,address[],address[])\":{\"details\":\"Redeem all shares of the sender by setting _sharesQuantity to the max uint value. Any claim to passed _assetsToSkip will be forfeited entirely. This should generally only be exercised if a bad asset is causing redemption to fail. This function should never fail without a way to bypass the failure, which is assured through two mechanisms: 1. The FeeManager is called with the try/catch pattern to assure that calls to it can never block redemption. 2. If a token fails upon transfer(), that token can be skipped (and its balance forfeited) by explicitly specifying _assetsToSkip. Because of these assurances, shares should always be redeemable, with the exception of the timelock period on shares actions that must be respected.\",\"params\":{\"_additionalAssets\":\"Additional (non-tracked) assets to claim\",\"_assetsToSkip\":\"Tracked assets to forfeit\",\"_recipient\":\"The account that will receive the proportionate slice of assets\",\"_sharesQuantity\":\"The quantity of shares to redeem\"},\"returns\":{\"payoutAmounts_\":\"The amount of each asset paid out to the _recipient\",\"payoutAssets_\":\"The assets paid out to the _recipient\"}},\"setAutoProtocolFeeSharesBuyback(bool)\":{\"params\":{\"_nextAutoProtocolFeeSharesBuyback\":\"True if protocol fee shares should be attempted to be bought back immediately when collected\"}},\"setGasRelayPaymaster(address)\":{\"params\":{\"_nextGasRelayPaymaster\":\"The next gasRelayPaymaster value\"}},\"setVaultProxy(address)\":{\"details\":\"No need to assert anything beyond FundDeployer access. Called atomically with init(), but after ComptrollerProxy has been deployed.\",\"params\":{\"_vaultProxy\":\"The VaultProxy contract\"}},\"vaultCallOnContract(address,bytes4,bytes)\":{\"params\":{\"_contract\":\"The contract to call\",\"_encodedArgs\":\"The encoded arguments for the call\",\"_selector\":\"The selector to call\"},\"returns\":{\"returnData_\":\"The data returned by the call\"}}},\"title\":\"ComptrollerLib Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activate(bool)\":{\"notice\":\"Runs atomic logic after a ComptrollerProxy has become its vaultProxy's `accessor`\"},\"buyBackProtocolFeeShares(uint256)\":{\"notice\":\"Buys back shares collected as protocol fee at a discounted shares price, using MLN\"},\"buyShares(uint256,uint256)\":{\"notice\":\"Buys shares\"},\"buySharesOnBehalf(address,uint256,uint256)\":{\"notice\":\"Buys shares on behalf of another user\"},\"calcGav(bool)\":{\"notice\":\"Calculates the gross asset value (GAV) of the fund\"},\"calcGrossShareValue(bool)\":{\"notice\":\"Calculates the gross value of 1 unit of shares in the fund's denomination asset\"},\"callOnExtension(address,uint256,bytes)\":{\"notice\":\"Calls a specified action on an Extension\"},\"deployGasRelayPaymaster()\":{\"notice\":\"Deploys a paymaster contract and deposits WETH, enabling gas relaying\"},\"depositToGasRelayPaymaster()\":{\"notice\":\"Tops up the gas relay paymaster deposit\"},\"destructActivated(uint256,uint256)\":{\"notice\":\"Wind down and destroy a ComptrollerProxy that is active\"},\"destructUnactivated()\":{\"notice\":\"Destroy a ComptrollerProxy that has not been activated\"},\"doesAutoProtocolFeeSharesBuyback()\":{\"notice\":\"Checks if collected protocol fee shares are automatically bought back while buying or redeeming shares\"},\"getAssetFinalityResolver()\":{\"notice\":\"Gets the `ASSET_FINALITY_RESOLVER` variable\"},\"getDenominationAsset()\":{\"notice\":\"Gets the `denominationAsset` variable\"},\"getDispatcher()\":{\"notice\":\"Gets the `DISPATCHER` variable\"},\"getExternalPositionManager()\":{\"notice\":\"Gets the `EXTERNAL_POSITION_MANAGER` variable\"},\"getFeeManager()\":{\"notice\":\"Gets the `FEE_MANAGER` variable\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getGasRelayPaymaster()\":{\"notice\":\"Gets the `gasRelayPaymaster` variable\"},\"getGasRelayPaymasterFactory()\":{\"notice\":\"Gets the `GAS_RELAY_PAYMASTER_FACTORY` variable\"},\"getGasRelayTrustedForwarder()\":{\"notice\":\"Gets the trusted forwarder for GSN relaying\"},\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"getLastSharesBoughtTimestampForAccount(address)\":{\"notice\":\"Gets the timestamp of the last time shares were bought for a given account\"},\"getMlnToken()\":{\"notice\":\"Gets the `MLN_TOKEN` variable\"},\"getPolicyManager()\":{\"notice\":\"Gets the `POLICY_MANAGER` variable\"},\"getProtocolFeeReserve()\":{\"notice\":\"Gets the `PROTOCOL_FEE_RESERVE` variable\"},\"getSharesActionTimelock()\":{\"notice\":\"Gets the `sharesActionTimelock` variable\"},\"getValueInterpreter()\":{\"notice\":\"Gets the `VALUE_INTERPRETER` variable\"},\"getVaultProxy()\":{\"notice\":\"Gets the `vaultProxy` variable\"},\"getWethToken()\":{\"notice\":\"Gets the `WETH_TOKEN` variable\"},\"init(address,uint256)\":{\"notice\":\"Initializes a fund with its core config\"},\"permissionedVaultAction(uint8,bytes)\":{\"notice\":\"Makes a permissioned, state-changing call on the VaultProxy contract\"},\"preTransferSharesHook(address,address,uint256)\":{\"notice\":\"Runs logic prior to transferring shares that are not freely transferable\"},\"preTransferSharesHookFreelyTransferable(address)\":{\"notice\":\"Runs logic prior to transferring shares that are freely transferable\"},\"pullWethForGasRelayer(uint256)\":{\"notice\":\"Pull WETH from vault to gas relay paymaster\"},\"redeemSharesForSpecificAssets(address,uint256,address[],uint256[])\":{\"notice\":\"Redeems a specified amount of the sender's shares for specified asset proportions\"},\"redeemSharesInKind(address,uint256,address[],address[])\":{\"notice\":\"Redeems a specified amount of the sender's shares for a proportionate slice of the vault's assets\"},\"setAutoProtocolFeeSharesBuyback(bool)\":{\"notice\":\"Sets whether to attempt to buyback protocol fee shares immediately when collected\"},\"setGasRelayPaymaster(address)\":{\"notice\":\"Sets the gasRelayPaymaster variable value\"},\"setVaultProxy(address)\":{\"notice\":\"Sets the VaultProxy\"},\"shutdownGasRelayPaymaster()\":{\"notice\":\"Removes the gas relay paymaster, withdrawing the remaining WETH balance and disabling gas relaying\"},\"vaultCallOnContract(address,bytes4,bytes)\":{\"notice\":\"Makes an arbitrary call with the VaultProxy contract as the sender\"}},\"notice\":\"The core logic library shared by all funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/core/fund/comptroller/ComptrollerLib.sol\":\"ComptrollerLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e6b0e6cf325d4f6332b8eb2b3c446b2ef3ca8456bdf0d12318d0fd9e90aeb30\",\"license\":\"GPL-3.0\"},\"contracts/persistent/external-positions/IExternalPosition.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPosition Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IExternalPosition {\\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function init(bytes memory) external;\\n\\n    function receiveCallFromVault(bytes memory) external;\\n}\\n\",\"keccak256\":\"0x00e6ea9721e5fd1e72215e4c744306097d7f8b1a834cced5d65a17a924f750ad\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IExternalPositionVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPositionVault interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// Provides an interface to get the externalPositionLib for a given type from the Vault\\ninterface IExternalPositionVault {\\n    function getExternalPositionLibForType(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c047551a9bab8cb84299c4cf17d0435f1d4d0791ecc1d03e0d55cb3450baad6\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFreelyTransferableSharesVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Provides the interface for determining whether a vault's shares\\n/// are guaranteed to be freely transferable.\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IFreelyTransferableSharesVault {\\n    function sharesAreFreelyTransferable()\\n        external\\n        view\\n        returns (bool sharesAreFreelyTransferable_);\\n}\\n\",\"keccak256\":\"0xe31f063493e6e3a4434eaa5629c0a706b8fa0569aff3f4ef9d62e27a1928cfa0\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IMigratableVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IMigratableVault {\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\n\\n    function init(\\n        address _owner,\\n        address _accessor,\\n        string calldata _fundName\\n    ) external;\\n\\n    function setAccessor(address _nextAccessor) external;\\n\\n    function setVaultLib(address _nextVaultLib) external;\\n}\\n\",\"keccak256\":\"0x8e1355a7efa8ec2172f5c9b532071def392b86ab1e5534d2fc73417a6e9f7238\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    function getOwner() external view returns (address);\\n\\n    function hasReconfigurationRequest(address) external view returns (bool);\\n\\n    function isAllowedBuySharesOnBehalfCaller(address) external view returns (bool);\\n\\n    function isAllowedVaultCall(\\n        address,\\n        bytes4,\\n        bytes32\\n    ) external view returns (bool);\\n\\n    function createNewFund(\\n        address _fundOwner,\\n        string calldata _fundName,\\n        address _denominationAsset,\\n        uint256 _sharesActionTimelock,\\n        bytes calldata _feeManagerConfigData,\\n        bytes calldata _policyManagerConfigData\\n    ) external returns (address, address);\\n\\n    function getVaultLib() external view returns (address);\\n\\n    function getComptrollerLib() external view returns (address comptrollerLib_);\\n}\\n\",\"keccak256\":\"0x9b5ca131a671abc04c69936268889177db0952004849df65947d1beddd6c9daf\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/ComptrollerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\nimport \\\"../../../../persistent/external-positions/IExternalPosition.sol\\\";\\nimport \\\"../../../extensions/IExtension.sol\\\";\\nimport \\\"../../../extensions/fee-manager/IFeeManager.sol\\\";\\nimport \\\"../../../extensions/policy-manager/IPolicyManager.sol\\\";\\nimport \\\"../../../infrastructure/asset-finality/IAssetFinalityResolver.sol\\\";\\nimport \\\"../../../infrastructure/gas-relayer/GasRelayRecipientMixin.sol\\\";\\nimport \\\"../../../infrastructure/gas-relayer/IGasRelayPaymaster.sol\\\";\\nimport \\\"../../../infrastructure/gas-relayer/IGasRelayPaymasterDepositor.sol\\\";\\nimport \\\"../../../infrastructure/value-interpreter/IValueInterpreter.sol\\\";\\nimport \\\"../../../utils/beacon-proxy/IBeaconProxyFactory.sol\\\";\\nimport \\\"../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../../fund-deployer/IFundDeployer.sol\\\";\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\n\\n/// @title ComptrollerLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The core logic library shared by all funds\\ncontract ComptrollerLib is IComptroller, IGasRelayPaymasterDepositor, GasRelayRecipientMixin {\\n    using AddressArrayLib for address[];\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    event AutoProtocolFeeSharesBuybackSet(bool autoProtocolFeeSharesBuyback);\\n\\n    event BuyBackMaxProtocolFeeSharesFailed(\\n        bytes indexed failureReturnData,\\n        uint256 sharesAmount,\\n        uint256 buybackValueInMln,\\n        uint256 gav\\n    );\\n    event DeactivateFeeManagerFailed();\\n\\n    event GasRelayPaymasterSet(address gasRelayPaymaster);\\n\\n    event MigratedSharesDuePaid(uint256 sharesDue);\\n\\n    event PayProtocolFeeDuringDestructFailed();\\n\\n    event PreRedeemSharesHookFailed(\\n        bytes indexed failureReturnData,\\n        address indexed redeemer,\\n        uint256 sharesAmount\\n    );\\n\\n    event RedeemSharesInKindCalcGavFailed();\\n\\n    event SharesBought(\\n        address indexed buyer,\\n        uint256 investmentAmount,\\n        uint256 sharesIssued,\\n        uint256 sharesReceived\\n    );\\n\\n    event SharesRedeemed(\\n        address indexed redeemer,\\n        address indexed recipient,\\n        uint256 sharesAmount,\\n        address[] receivedAssets,\\n        uint256[] receivedAssetAmounts\\n    );\\n\\n    event VaultProxySet(address vaultProxy);\\n\\n    // Constants and immutables - shared by all proxies\\n    uint256 private constant ONE_HUNDRED_PERCENT = 10000;\\n    uint256 private constant SHARES_UNIT = 10**18;\\n    address\\n        private constant SPECIFIC_ASSET_REDEMPTION_DUMMY_FORFEIT_ADDRESS = 0x000000000000000000000000000000000000aaaa;\\n    address private immutable ASSET_FINALITY_RESOLVER;\\n    address private immutable DISPATCHER;\\n    address private immutable EXTERNAL_POSITION_MANAGER;\\n    address private immutable FUND_DEPLOYER;\\n    address private immutable FEE_MANAGER;\\n    address private immutable INTEGRATION_MANAGER;\\n    address private immutable MLN_TOKEN;\\n    address private immutable POLICY_MANAGER;\\n    address private immutable PROTOCOL_FEE_RESERVE;\\n    address private immutable VALUE_INTERPRETER;\\n    address private immutable WETH_TOKEN;\\n\\n    // Pseudo-constants (can only be set once)\\n\\n    address internal denominationAsset;\\n    address internal vaultProxy;\\n    // True only for the one non-proxy\\n    bool internal isLib;\\n\\n    // Storage\\n\\n    // Attempts to buy back protocol fee shares immediately after collection\\n    bool internal autoProtocolFeeSharesBuyback;\\n    // A reverse-mutex, granting atomic permission for particular contracts to make vault calls\\n    bool internal permissionedVaultActionAllowed;\\n    // A mutex to protect against reentrancy\\n    bool internal reentranceLocked;\\n    // A timelock after the last time shares were bought for an account\\n    // that must expire before that account transfers or redeems their shares\\n    uint256 internal sharesActionTimelock;\\n    mapping(address => uint256) internal acctToLastSharesBoughtTimestamp;\\n    // The contract which manages paying gas relayers\\n    address private gasRelayPaymaster;\\n\\n    ///////////////\\n    // MODIFIERS //\\n    ///////////////\\n\\n    modifier allowsPermissionedVaultAction {\\n        __assertPermissionedVaultActionNotAllowed();\\n        permissionedVaultActionAllowed = true;\\n        _;\\n        permissionedVaultActionAllowed = false;\\n    }\\n\\n    modifier locksReentrance() {\\n        __assertNotReentranceLocked();\\n        reentranceLocked = true;\\n        _;\\n        reentranceLocked = false;\\n    }\\n\\n    modifier onlyFundDeployer() {\\n        __assertIsFundDeployer();\\n        _;\\n    }\\n    modifier onlyGasRelayPaymaster() {\\n        __assertIsGasRelayPaymaster();\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        __assertIsOwner(__msgSender());\\n        _;\\n    }\\n\\n    modifier onlyOwnerNotRelayable() {\\n        __assertIsOwner(msg.sender);\\n        _;\\n    }\\n\\n    // ASSERTION HELPERS\\n\\n    // Modifiers are inefficient in terms of contract size,\\n    // so we use helper functions to prevent repetitive inlining of expensive string values.\\n\\n    function __assertIsFundDeployer() private view {\\n        require(msg.sender == getFundDeployer(), \\\"Only FundDeployer callable\\\");\\n    }\\n\\n    function __assertIsGasRelayPaymaster() private view {\\n        require(msg.sender == getGasRelayPaymaster(), \\\"Only Gas Relay Paymaster callable\\\");\\n    }\\n\\n    function __assertIsOwner(address _who) private view {\\n        require(_who == IVault(getVaultProxy()).getOwner(), \\\"Only fund owner callable\\\");\\n    }\\n\\n    function __assertNotReentranceLocked() private view {\\n        require(!reentranceLocked, \\\"Re-entrance\\\");\\n    }\\n\\n    function __assertPermissionedVaultActionNotAllowed() private view {\\n        require(!permissionedVaultActionAllowed, \\\"Vault action re-entrance\\\");\\n    }\\n\\n    function __assertSharesActionNotTimelocked(address _vaultProxy, address _account)\\n        private\\n        view\\n    {\\n        uint256 lastSharesBoughtTimestamp = getLastSharesBoughtTimestampForAccount(_account);\\n\\n        require(\\n            lastSharesBoughtTimestamp == 0 ||\\n                block.timestamp.sub(lastSharesBoughtTimestamp) >= getSharesActionTimelock() ||\\n                __hasPendingMigrationOrReconfiguration(_vaultProxy),\\n            \\\"Shares action timelocked\\\"\\n        );\\n    }\\n\\n    constructor(\\n        address _dispatcher,\\n        address _protocolFeeReserve,\\n        address _fundDeployer,\\n        address _valueInterpreter,\\n        address _externalPositionManager,\\n        address _feeManager,\\n        address _integrationManager,\\n        address _policyManager,\\n        address _assetFinalityResolver,\\n        address _gasRelayPaymasterFactory,\\n        address _mlnToken,\\n        address _wethToken\\n    ) public GasRelayRecipientMixin(_gasRelayPaymasterFactory) {\\n        ASSET_FINALITY_RESOLVER = _assetFinalityResolver;\\n        DISPATCHER = _dispatcher;\\n        EXTERNAL_POSITION_MANAGER = _externalPositionManager;\\n        FEE_MANAGER = _feeManager;\\n        FUND_DEPLOYER = _fundDeployer;\\n        INTEGRATION_MANAGER = _integrationManager;\\n        MLN_TOKEN = _mlnToken;\\n        POLICY_MANAGER = _policyManager;\\n        PROTOCOL_FEE_RESERVE = _protocolFeeReserve;\\n        VALUE_INTERPRETER = _valueInterpreter;\\n        WETH_TOKEN = _wethToken;\\n        isLib = true;\\n    }\\n\\n    /////////////\\n    // GENERAL //\\n    /////////////\\n\\n    /// @notice Calls a specified action on an Extension\\n    /// @param _extension The Extension contract to call (e.g., FeeManager)\\n    /// @param _actionId An ID representing the action to take on the extension (see extension)\\n    /// @param _callArgs The encoded data for the call\\n    /// @dev Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy\\n    /// (for access control). Uses a mutex of sorts that allows \\\"permissioned vault actions\\\"\\n    /// during calls originating from this function.\\n    function callOnExtension(\\n        address _extension,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external override locksReentrance allowsPermissionedVaultAction {\\n        require(\\n            _extension == getFeeManager() ||\\n                _extension == getIntegrationManager() ||\\n                _extension == getExternalPositionManager(),\\n            \\\"callOnExtension: _extension invalid\\\"\\n        );\\n\\n        IExtension(_extension).receiveCallFromComptroller(__msgSender(), _actionId, _callArgs);\\n    }\\n\\n    /// @notice Makes an arbitrary call with the VaultProxy contract as the sender\\n    /// @param _contract The contract to call\\n    /// @param _selector The selector to call\\n    /// @param _encodedArgs The encoded arguments for the call\\n    /// @return returnData_ The data returned by the call\\n    function vaultCallOnContract(\\n        address _contract,\\n        bytes4 _selector,\\n        bytes calldata _encodedArgs\\n    ) external onlyOwner returns (bytes memory returnData_) {\\n        require(\\n            IFundDeployer(getFundDeployer()).isAllowedVaultCall(\\n                _contract,\\n                _selector,\\n                keccak256(_encodedArgs)\\n            ),\\n            \\\"vaultCallOnContract: Not allowed\\\"\\n        );\\n\\n        return\\n            IVault(getVaultProxy()).callOnContract(\\n                _contract,\\n                abi.encodePacked(_selector, _encodedArgs)\\n            );\\n    }\\n\\n    /// @dev Helper to check if a VaultProxy has a pending migration or reconfiguration request\\n    function __hasPendingMigrationOrReconfiguration(address _vaultProxy)\\n        private\\n        view\\n        returns (bool hasPendingMigrationOrReconfiguration)\\n    {\\n        return\\n            IDispatcher(getDispatcher()).hasMigrationRequest(_vaultProxy) ||\\n            IFundDeployer(getFundDeployer()).hasReconfigurationRequest(_vaultProxy);\\n    }\\n\\n    //////////////////\\n    // PROTOCOL FEE //\\n    //////////////////\\n\\n    /// @notice Buys back shares collected as protocol fee at a discounted shares price, using MLN\\n    /// @param _sharesAmount The amount of shares to buy back\\n    function buyBackProtocolFeeShares(uint256 _sharesAmount) external {\\n        address vaultProxyCopy = vaultProxy;\\n        require(\\n            IVault(vaultProxyCopy).canManageAssets(__msgSender()),\\n            \\\"buyBackProtocolFeeShares: Unauthorized\\\"\\n        );\\n\\n        uint256 gav = calcGav(true);\\n\\n        IVault(vaultProxyCopy).buyBackProtocolFeeShares(\\n            _sharesAmount,\\n            __getBuybackValueInMln(vaultProxyCopy, _sharesAmount, gav),\\n            gav\\n        );\\n    }\\n\\n    /// @notice Sets whether to attempt to buyback protocol fee shares immediately when collected\\n    /// @param _nextAutoProtocolFeeSharesBuyback True if protocol fee shares should be attempted\\n    /// to be bought back immediately when collected\\n    function setAutoProtocolFeeSharesBuyback(bool _nextAutoProtocolFeeSharesBuyback)\\n        external\\n        onlyOwner\\n    {\\n        autoProtocolFeeSharesBuyback = _nextAutoProtocolFeeSharesBuyback;\\n\\n        emit AutoProtocolFeeSharesBuybackSet(_nextAutoProtocolFeeSharesBuyback);\\n    }\\n\\n    /// @dev Helper to buyback the max available protocol fee shares, during an auto-buyback\\n    function __buyBackMaxProtocolFeeShares(address _vaultProxy, uint256 _gav) private {\\n        uint256 sharesAmount = ERC20(_vaultProxy).balanceOf(getProtocolFeeReserve());\\n        uint256 buybackValueInMln = __getBuybackValueInMln(_vaultProxy, sharesAmount, _gav);\\n\\n        try\\n            IVault(_vaultProxy).buyBackProtocolFeeShares(sharesAmount, buybackValueInMln, _gav)\\n         {} catch (bytes memory reason) {\\n            emit BuyBackMaxProtocolFeeSharesFailed(reason, sharesAmount, buybackValueInMln, _gav);\\n        }\\n    }\\n\\n    /// @dev Helper to buyback the max available protocol fee shares\\n    function __getBuybackValueInMln(\\n        address _vaultProxy,\\n        uint256 _sharesAmount,\\n        uint256 _gav\\n    ) private returns (uint256 buybackValueInMln_) {\\n        address denominationAssetCopy = getDenominationAsset();\\n\\n        uint256 grossShareValue = __calcGrossShareValue(\\n            _gav,\\n            ERC20(_vaultProxy).totalSupply(),\\n            10**uint256(ERC20(denominationAssetCopy).decimals())\\n        );\\n\\n        uint256 buybackValueInDenominationAsset = grossShareValue.mul(_sharesAmount).div(\\n            SHARES_UNIT\\n        );\\n\\n        return\\n            IValueInterpreter(getValueInterpreter()).calcCanonicalAssetValue(\\n                denominationAssetCopy,\\n                buybackValueInDenominationAsset,\\n                getMlnToken()\\n            );\\n    }\\n\\n    ////////////////////////////////\\n    // PERMISSIONED VAULT ACTIONS //\\n    ////////////////////////////////\\n\\n    /// @notice Makes a permissioned, state-changing call on the VaultProxy contract\\n    /// @param _action The enum representing the VaultAction to perform on the VaultProxy\\n    /// @param _actionData The call data for the action to perform\\n    function permissionedVaultAction(IVault.VaultAction _action, bytes calldata _actionData)\\n        external\\n        override\\n    {\\n        __assertPermissionedVaultAction(msg.sender, _action);\\n\\n        // Validate action as needed\\n        if (_action == IVault.VaultAction.RemoveTrackedAsset) {\\n            require(\\n                abi.decode(_actionData, (address)) != getDenominationAsset(),\\n                \\\"permissionedVaultAction: Cannot untrack denomination asset\\\"\\n            );\\n        }\\n\\n        IVault(getVaultProxy()).receiveValidatedVaultAction(_action, _actionData);\\n    }\\n\\n    /// @dev Helper to assert that a caller is allowed to perform a particular VaultAction.\\n    /// Uses this pattern rather than multiple `require` statements to save on contract size.\\n    function __assertPermissionedVaultAction(address _caller, IVault.VaultAction _action)\\n        private\\n        view\\n    {\\n        bool validAction;\\n        if (permissionedVaultActionAllowed) {\\n            // Calls are roughly ordered by likely frequency\\n            if (_caller == getIntegrationManager()) {\\n                if (\\n                    _action == IVault.VaultAction.AddTrackedAsset ||\\n                    _action == IVault.VaultAction.RemoveTrackedAsset ||\\n                    _action == IVault.VaultAction.WithdrawAssetTo ||\\n                    _action == IVault.VaultAction.ApproveAssetSpender\\n                ) {\\n                    validAction = true;\\n                }\\n            } else if (_caller == getFeeManager()) {\\n                if (\\n                    _action == IVault.VaultAction.MintShares ||\\n                    _action == IVault.VaultAction.BurnShares ||\\n                    _action == IVault.VaultAction.TransferShares\\n                ) {\\n                    validAction = true;\\n                }\\n            } else if (_caller == getExternalPositionManager()) {\\n                if (\\n                    _action == IVault.VaultAction.CallOnExternalPosition ||\\n                    _action == IVault.VaultAction.AddExternalPosition ||\\n                    _action == IVault.VaultAction.RemoveExternalPosition\\n                ) {\\n                    validAction = true;\\n                }\\n            }\\n        }\\n\\n        require(validAction, \\\"__assertPermissionedVaultAction: Action not allowed\\\");\\n    }\\n\\n    ///////////////\\n    // LIFECYCLE //\\n    ///////////////\\n\\n    // Ordered by execution in the lifecycle\\n\\n    /// @notice Initializes a fund with its core config\\n    /// @param _denominationAsset The asset in which the fund's value should be denominated\\n    /// @param _sharesActionTimelock The minimum number of seconds between any two \\\"shares actions\\\"\\n    /// (buying or selling shares) by the same user\\n    /// @dev Pseudo-constructor per proxy.\\n    /// No need to assert access because this is called atomically on deployment,\\n    /// and once it's called, it cannot be called again.\\n    function init(address _denominationAsset, uint256 _sharesActionTimelock) external override {\\n        require(getDenominationAsset() == address(0), \\\"init: Already initialized\\\");\\n        require(\\n            IValueInterpreter(getValueInterpreter()).isSupportedPrimitiveAsset(_denominationAsset),\\n            \\\"init: Bad denomination asset\\\"\\n        );\\n\\n        denominationAsset = _denominationAsset;\\n        sharesActionTimelock = _sharesActionTimelock;\\n    }\\n\\n    /// @notice Sets the VaultProxy\\n    /// @param _vaultProxy The VaultProxy contract\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    /// Called atomically with init(), but after ComptrollerProxy has been deployed.\\n    function setVaultProxy(address _vaultProxy) external override onlyFundDeployer {\\n        vaultProxy = _vaultProxy;\\n\\n        emit VaultProxySet(_vaultProxy);\\n    }\\n\\n    /// @notice Runs atomic logic after a ComptrollerProxy has become its vaultProxy's `accessor`\\n    /// @param _isMigration True if a migrated fund is being activated\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    function activate(bool _isMigration) external override onlyFundDeployer {\\n        address vaultProxyCopy = getVaultProxy();\\n\\n        if (_isMigration) {\\n            // Distribute any shares in the VaultProxy to the fund owner.\\n            // This is a mechanism to ensure that even in the edge case of a fund being unable\\n            // to payout fee shares owed during migration, these shares are not lost.\\n            uint256 sharesDue = ERC20(vaultProxyCopy).balanceOf(vaultProxyCopy);\\n            if (sharesDue > 0) {\\n                IVault(vaultProxyCopy).transferShares(\\n                    vaultProxyCopy,\\n                    IVault(vaultProxyCopy).getOwner(),\\n                    sharesDue\\n                );\\n\\n                emit MigratedSharesDuePaid(sharesDue);\\n            }\\n        }\\n\\n        IVault(vaultProxyCopy).addTrackedAsset(getDenominationAsset());\\n\\n        // Activate extensions\\n        IExtension(getFeeManager()).activateForFund(_isMigration);\\n        IExtension(getPolicyManager()).activateForFund(_isMigration);\\n    }\\n\\n    /// @notice Wind down and destroy a ComptrollerProxy that is active\\n    /// @param _deactivateFeeManagerGasLimit The amount of gas to forward to deactivate the FeeManager\\n    /// @param _payProtocolFeeGasLimit The amount of gas to forward to pay the protocol fee\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    /// Uses the try/catch pattern throughout out of an abundance of caution for the function's success.\\n    /// All external calls must use limited forwarded gas to ensure that a migration to another release\\n    /// does not get bricked by logic that consumes too much gas for the block limit.\\n    function destructActivated(\\n        uint256 _deactivateFeeManagerGasLimit,\\n        uint256 _payProtocolFeeGasLimit\\n    ) external override onlyFundDeployer allowsPermissionedVaultAction {\\n        // Forwarding limited gas here also protects fee recipients by guaranteeing that fee payout logic\\n        // will run in the next function call\\n        try IVault(getVaultProxy()).payProtocolFee{gas: _payProtocolFeeGasLimit}()  {} catch {\\n            emit PayProtocolFeeDuringDestructFailed();\\n        }\\n\\n        // Do not attempt to auto-buyback protocol fee shares in this case,\\n        // as the call is gav-dependent and can consume too much gas\\n\\n        // Deactivate extensions only as-necessary\\n\\n        // Pays out shares outstanding for fees\\n        try\\n            IExtension(getFeeManager()).deactivateForFund{gas: _deactivateFeeManagerGasLimit}()\\n         {} catch {\\n            emit DeactivateFeeManagerFailed();\\n        }\\n\\n        __selfDestruct();\\n    }\\n\\n    /// @notice Destroy a ComptrollerProxy that has not been activated\\n    function destructUnactivated() external override onlyFundDeployer {\\n        __selfDestruct();\\n    }\\n\\n    /// @dev Helper to self-destruct the contract.\\n    /// There should never be ETH in the ComptrollerLib,\\n    /// so no need to waste gas to get the fund owner\\n    function __selfDestruct() private {\\n        // Not necessary, but failsafe to protect the lib against selfdestruct\\n        require(!isLib, \\\"__selfDestruct: Only delegate callable\\\");\\n\\n        selfdestruct(payable(address(this)));\\n    }\\n\\n    ////////////////\\n    // ACCOUNTING //\\n    ////////////////\\n\\n    /// @notice Calculates the gross asset value (GAV) of the fund\\n    /// @param _finalizeAssets True if all assets must have exact final balances settled\\n    /// @return gav_ The fund GAV\\n    function calcGav(bool _finalizeAssets) public override returns (uint256 gav_) {\\n        address vaultProxyAddress = getVaultProxy();\\n        address[] memory assets = IVault(vaultProxyAddress).getTrackedAssets();\\n        address[] memory externalPositions = IVault(vaultProxyAddress)\\n            .getActiveExternalPositions();\\n\\n        if (assets.length == 0 && externalPositions.length == 0) {\\n            return 0;\\n        }\\n\\n        // It is not necessary to finalize assets in external positions, as synths will have\\n        // already been settled prior to transferring to the external position contract\\n        if (_finalizeAssets) {\\n            IAssetFinalityResolver(getAssetFinalityResolver()).finalizeAssets(\\n                vaultProxyAddress,\\n                assets\\n            );\\n        }\\n\\n        uint256[] memory balances = new uint256[](assets.length);\\n        for (uint256 i; i < assets.length; i++) {\\n            balances[i] = ERC20(assets[i]).balanceOf(vaultProxyAddress);\\n            IVault(vaultProxyAddress).debugGav(assets[i], balances[i], vaultProxyAddress);\\n        }\\n\\n        gav_ = IValueInterpreter(getValueInterpreter()).calcCanonicalAssetsTotalValue(\\n            assets,\\n            balances,\\n            getDenominationAsset()\\n        );\\n\\n        if (externalPositions.length > 0) {\\n            for (uint256 i; i < externalPositions.length; i++) {\\n                uint256 externalPositionValue = __calcExternalPositionValue(externalPositions[i]);\\n\\n                gav_ = gav_.add(externalPositionValue);\\n            }\\n        }\\n\\n        return gav_;\\n    }\\n\\n    /// @notice Calculates the gross value of 1 unit of shares in the fund's denomination asset\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\n    /// @return grossShareValue_ The amount of the denomination asset per share\\n    /// @dev Does not account for any fees outstanding.\\n    function calcGrossShareValue(bool _requireFinality)\\n        external\\n        override\\n        returns (uint256 grossShareValue_)\\n    {\\n        uint256 gav = calcGav(_requireFinality);\\n\\n        grossShareValue_ = __calcGrossShareValue(\\n            gav,\\n            ERC20(getVaultProxy()).totalSupply(),\\n            10**uint256(ERC20(getDenominationAsset()).decimals())\\n        );\\n\\n        return grossShareValue_;\\n    }\\n\\n    // @dev Helper for calculating a external position value. Prevents from stack too deep\\n    function __calcExternalPositionValue(address _externalPosition)\\n        private\\n        returns (uint256 value_)\\n    {\\n        (address[] memory managedAssets, uint256[] memory managedAmounts) = IExternalPosition(\\n            _externalPosition\\n        )\\n            .getManagedAssets();\\n\\n        uint256 managedValue = IValueInterpreter(getValueInterpreter())\\n            .calcCanonicalAssetsTotalValue(managedAssets, managedAmounts, getDenominationAsset());\\n\\n        (address[] memory debtAssets, uint256[] memory debtAmounts) = IExternalPosition(\\n            _externalPosition\\n        )\\n            .getDebtAssets();\\n\\n        uint256 debtValue = IValueInterpreter(getValueInterpreter()).calcCanonicalAssetsTotalValue(\\n            debtAssets,\\n            debtAmounts,\\n            getDenominationAsset()\\n        );\\n\\n        if (managedValue > debtValue) {\\n            value_ = managedValue.sub(debtValue);\\n        }\\n\\n        return value_;\\n    }\\n\\n    /// @dev Helper for calculating the gross share value\\n    function __calcGrossShareValue(\\n        uint256 _gav,\\n        uint256 _sharesSupply,\\n        uint256 _denominationAssetUnit\\n    ) private pure returns (uint256 grossShareValue_) {\\n        if (_sharesSupply == 0) {\\n            return _denominationAssetUnit;\\n        }\\n\\n        return _gav.mul(SHARES_UNIT).div(_sharesSupply);\\n    }\\n\\n    ///////////////////\\n    // PARTICIPATION //\\n    ///////////////////\\n\\n    // BUY SHARES\\n\\n    /// @notice Buys shares on behalf of another user\\n    /// @param _buyer The account on behalf of whom to buy shares\\n    /// @param _investmentAmount The amount of the fund's denomination asset with which to buy shares\\n    /// @param _minSharesQuantity The minimum quantity of shares to buy\\n    /// @return sharesReceived_ The actual amount of shares received\\n    /// @dev This function is freely callable if there is no sharesActionTimelock set, but it is\\n    /// limited to a list of trusted callers otherwise, in order to prevent a griefing attack\\n    /// where the caller buys shares for a _buyer, thereby resetting their lastSharesBought value.\\n    function buySharesOnBehalf(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _minSharesQuantity\\n    ) external returns (uint256 sharesReceived_) {\\n        bool hasSharesActionTimelock = getSharesActionTimelock() > 0;\\n        address canonicalSender = __msgSender();\\n\\n        require(\\n            !hasSharesActionTimelock ||\\n                IFundDeployer(getFundDeployer()).isAllowedBuySharesOnBehalfCaller(canonicalSender),\\n            \\\"buySharesOnBehalf: Unauthorized\\\"\\n        );\\n\\n        return\\n            __buyShares(\\n                _buyer,\\n                _investmentAmount,\\n                _minSharesQuantity,\\n                hasSharesActionTimelock,\\n                canonicalSender\\n            );\\n    }\\n\\n    /// @notice Buys shares\\n    /// @param _investmentAmount The amount of the fund's denomination asset\\n    /// with which to buy shares\\n    /// @param _minSharesQuantity The minimum quantity of shares to buy\\n    /// @return sharesReceived_ The actual amount of shares received\\n    function buyShares(uint256 _investmentAmount, uint256 _minSharesQuantity)\\n        external\\n        returns (uint256 sharesReceived_)\\n    {\\n        bool hasSharesActionTimelock = getSharesActionTimelock() > 0;\\n        address canonicalSender = __msgSender();\\n\\n        return\\n            __buyShares(\\n                canonicalSender,\\n                _investmentAmount,\\n                _minSharesQuantity,\\n                hasSharesActionTimelock,\\n                canonicalSender\\n            );\\n    }\\n\\n    /// @dev Helper for buy shares logic\\n    function __buyShares(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _minSharesQuantity,\\n        bool _hasSharesActionTimelock,\\n        address _canonicalSender\\n    ) private locksReentrance allowsPermissionedVaultAction returns (uint256 sharesReceived_) {\\n        // Enforcing a _minSharesQuantity also validates `_investmentAmount > 0`\\n        // and guarantees the function cannot succeed while minting 0 shares\\n        require(_minSharesQuantity > 0, \\\"__buyShares: _minSharesQuantity must be >0\\\");\\n\\n        address vaultProxyCopy = getVaultProxy();\\n        require(\\n            !_hasSharesActionTimelock || !__hasPendingMigrationOrReconfiguration(vaultProxyCopy),\\n            \\\"__buyShares: Pending migration or reconfiguration\\\"\\n        );\\n\\n        uint256 gav = calcGav(true);\\n\\n        // Gives Extensions a chance to run logic prior to the minting of bought shares.\\n        // Fees implementing this hook should be aware that\\n        // it might be the case that _investmentAmount != actualInvestmentAmount,\\n        // if the denomination asset charges a transfer fee, for example.\\n        __preBuySharesHook(_buyer, _investmentAmount, gav);\\n\\n        // Pay the protocol fee after running other fees, but before minting new shares\\n        IVault(vaultProxyCopy).payProtocolFee();\\n        if (doesAutoProtocolFeeSharesBuyback()) {\\n            __buyBackMaxProtocolFeeShares(vaultProxyCopy, gav);\\n        }\\n\\n        // Transfer the investment asset to the fund.\\n        // Does not follow the checks-effects-interactions pattern, but it is necessary to\\n        // do this delta balance calculation before calculating shares to mint.\\n        uint256 receivedInvestmentAmount = __transferFromWithReceivedAmount(\\n            getDenominationAsset(),\\n            _canonicalSender,\\n            vaultProxyCopy,\\n            _investmentAmount\\n        );\\n\\n        // Calculate the amount of shares to issue with the investment amount\\n        uint256 sharePrice = __calcGrossShareValue(\\n            gav,\\n            ERC20(vaultProxyCopy).totalSupply(),\\n            10**uint256(ERC20(getDenominationAsset()).decimals())\\n        );\\n        uint256 sharesIssued = receivedInvestmentAmount.mul(SHARES_UNIT).div(sharePrice);\\n\\n        // Mint shares to the buyer\\n        uint256 prevBuyerShares = ERC20(vaultProxyCopy).balanceOf(_buyer);\\n        IVault(vaultProxyCopy).mintShares(_buyer, sharesIssued);\\n\\n        // Gives Extensions a chance to run logic after shares are issued\\n        __postBuySharesHook(_buyer, receivedInvestmentAmount, sharesIssued, gav);\\n\\n        // The number of actual shares received may differ from shares issued due to\\n        // how the PostBuyShares hooks are invoked by Extensions (i.e., fees)\\n        sharesReceived_ = ERC20(vaultProxyCopy).balanceOf(_buyer).sub(prevBuyerShares);\\n        require(\\n            sharesReceived_ >= _minSharesQuantity,\\n            \\\"__buyShares: Shares received < _minSharesQuantity\\\"\\n        );\\n\\n        if (_hasSharesActionTimelock) {\\n            acctToLastSharesBoughtTimestamp[_buyer] = block.timestamp;\\n        }\\n\\n        emit SharesBought(_buyer, receivedInvestmentAmount, sharesIssued, sharesReceived_);\\n\\n        return sharesReceived_;\\n    }\\n\\n    /// @dev Helper for Extension actions immediately prior to issuing shares\\n    function __preBuySharesHook(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _gav\\n    ) private {\\n        IFeeManager(getFeeManager()).invokeHook(\\n            IFeeManager.FeeHook.PreBuyShares,\\n            abi.encode(_buyer, _investmentAmount),\\n            _gav\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions immediately after issuing shares.\\n    /// This could be cleaned up so both Extensions take the same encoded args and handle GAV\\n    /// in the same way, but there is not the obvious need for gas savings of recycling\\n    /// the GAV value for the current policies as there is for the fees.\\n    function __postBuySharesHook(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _sharesIssued,\\n        uint256 _preBuySharesGav\\n    ) private {\\n        uint256 gav = _preBuySharesGav.add(_investmentAmount);\\n        IFeeManager(getFeeManager()).invokeHook(\\n            IFeeManager.FeeHook.PostBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued),\\n            gav\\n        );\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.PostBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued, gav)\\n        );\\n    }\\n\\n    /// @dev Helper to execute ERC20.transferFrom() while calculating the actual amount received\\n    function __transferFromWithReceivedAmount(\\n        address _asset,\\n        address _sender,\\n        address _recipient,\\n        uint256 _transferAmount\\n    ) private returns (uint256 receivedAmount_) {\\n        uint256 preTransferRecipientBalance = ERC20(_asset).balanceOf(_recipient);\\n\\n        ERC20(_asset).safeTransferFrom(_sender, _recipient, _transferAmount);\\n\\n        return ERC20(_asset).balanceOf(_recipient).sub(preTransferRecipientBalance);\\n    }\\n\\n    // REDEEM SHARES\\n\\n    /// @notice Redeems a specified amount of the sender's shares for specified asset proportions\\n    /// @param _recipient The account that will receive the specified assets\\n    /// @param _sharesQuantity The quantity of shares to redeem\\n    /// @param _payoutAssets The assets to payout\\n    /// @param _payoutAssetPercentages The percentage of the owed amount to pay out in each asset\\n    /// @return payoutAmounts_ The amount of each asset paid out to the _recipient\\n    /// @dev Redeem all shares of the sender by setting _sharesQuantity to the max uint value.\\n    /// _payoutAssetPercentages must total exactly 100%. In order to specify less and forgo the\\n    /// remaining gav owed on the redeemed shares, pass in address(0) with the percentage to forego.\\n    /// Unlike redeemSharesInKind(), this function allows policies to run and prevent redemption.\\n    function redeemSharesForSpecificAssets(\\n        address _recipient,\\n        uint256 _sharesQuantity,\\n        address[] calldata _payoutAssets,\\n        uint256[] calldata _payoutAssetPercentages\\n    ) external locksReentrance returns (uint256[] memory payoutAmounts_) {\\n        address canonicalSender = __msgSender();\\n        require(\\n            _payoutAssets.length == _payoutAssetPercentages.length,\\n            \\\"redeemSharesForSpecificAssets: Unequal arrays\\\"\\n        );\\n        require(\\n            _payoutAssets.isUniqueSet(),\\n            \\\"redeemSharesForSpecificAssets: Duplicate payout asset\\\"\\n        );\\n\\n        uint256 gav = calcGav(true);\\n\\n        IVault vaultProxyContract = IVault(getVaultProxy());\\n        (uint256 sharesToRedeem, uint256 sharesSupply) = __redeemSharesSetup(\\n            vaultProxyContract,\\n            canonicalSender,\\n            _sharesQuantity,\\n            true,\\n            gav\\n        );\\n\\n        payoutAmounts_ = __payoutSpecifiedAssetPercentages(\\n            vaultProxyContract,\\n            _recipient,\\n            _payoutAssets,\\n            _payoutAssetPercentages,\\n            gav.mul(sharesToRedeem).div(sharesSupply)\\n        );\\n\\n        // Run post-redemption in order to have access to the payoutAmounts\\n        __postRedeemSharesForSpecificAssetsHook(\\n            canonicalSender,\\n            _recipient,\\n            sharesToRedeem,\\n            _payoutAssets,\\n            payoutAmounts_,\\n            gav\\n        );\\n\\n        emit SharesRedeemed(\\n            canonicalSender,\\n            _recipient,\\n            sharesToRedeem,\\n            _payoutAssets,\\n            payoutAmounts_\\n        );\\n\\n        return payoutAmounts_;\\n    }\\n\\n    /// @notice Redeems a specified amount of the sender's shares\\n    /// for a proportionate slice of the vault's assets\\n    /// @param _recipient The account that will receive the proportionate slice of assets\\n    /// @param _sharesQuantity The quantity of shares to redeem\\n    /// @param _additionalAssets Additional (non-tracked) assets to claim\\n    /// @param _assetsToSkip Tracked assets to forfeit\\n    /// @return payoutAssets_ The assets paid out to the _recipient\\n    /// @return payoutAmounts_ The amount of each asset paid out to the _recipient\\n    /// @dev Redeem all shares of the sender by setting _sharesQuantity to the max uint value.\\n    /// Any claim to passed _assetsToSkip will be forfeited entirely. This should generally\\n    /// only be exercised if a bad asset is causing redemption to fail.\\n    /// This function should never fail without a way to bypass the failure, which is assured\\n    /// through two mechanisms:\\n    /// 1. The FeeManager is called with the try/catch pattern to assure that calls to it\\n    /// can never block redemption.\\n    /// 2. If a token fails upon transfer(), that token can be skipped (and its balance forfeited)\\n    /// by explicitly specifying _assetsToSkip.\\n    /// Because of these assurances, shares should always be redeemable, with the exception\\n    /// of the timelock period on shares actions that must be respected.\\n    function redeemSharesInKind(\\n        address _recipient,\\n        uint256 _sharesQuantity,\\n        address[] calldata _additionalAssets,\\n        address[] calldata _assetsToSkip\\n    )\\n        external\\n        locksReentrance\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\n    {\\n        address canonicalSender = __msgSender();\\n        require(\\n            _additionalAssets.isUniqueSet(),\\n            \\\"redeemSharesInKind: _additionalAssets contains duplicates\\\"\\n        );\\n        require(\\n            _assetsToSkip.isUniqueSet(),\\n            \\\"redeemSharesInKind: _assetsToSkip contains duplicates\\\"\\n        );\\n\\n        // Parse the payout assets given optional params to add or skip assets.\\n        // Note that there is no validation that the _additionalAssets are known assets to\\n        // the protocol. This means that the redeemer could specify a malicious asset,\\n        // but since all state-changing, user-callable functions on this contract share the\\n        // non-reentrant modifier, there is nowhere to perform a reentrancy attack.\\n        payoutAssets_ = __parseRedemptionPayoutAssets(\\n            IVault(vaultProxy).getTrackedAssets(),\\n            _additionalAssets,\\n            _assetsToSkip\\n        );\\n\\n        // Resolve finality of all assets as needed.\\n        // Run this prior to calculating GAV.\\n        IAssetFinalityResolver(getAssetFinalityResolver()).finalizeAssets(\\n            vaultProxy,\\n            payoutAssets_\\n        );\\n\\n        // If protocol fee shares will be auto-bought back, attempt to calculate GAV to pass into fees,\\n        // as we will require GAV later during the buyback.\\n        uint256 gavOrZero;\\n        if (doesAutoProtocolFeeSharesBuyback()) {\\n            // Since GAV calculation can fail with a revering price or a no-longer-supported asset,\\n            // we must try/catch GAV calculation to ensure that in-kind redemption can still succeed\\n            try this.calcGav(false) returns (uint256 gav) {\\n                gavOrZero = gav;\\n            } catch {\\n                emit RedeemSharesInKindCalcGavFailed();\\n            }\\n        }\\n\\n        (uint256 sharesToRedeem, uint256 sharesSupply) = __redeemSharesSetup(\\n            IVault(vaultProxy),\\n            canonicalSender,\\n            _sharesQuantity,\\n            false,\\n            gavOrZero\\n        );\\n\\n        // Calculate and transfer payout asset amounts due to _recipient\\n        payoutAmounts_ = new uint256[](payoutAssets_.length);\\n        for (uint256 i; i < payoutAssets_.length; i++) {\\n            payoutAmounts_[i] = ERC20(payoutAssets_[i])\\n                .balanceOf(vaultProxy)\\n                .mul(sharesToRedeem)\\n                .div(sharesSupply);\\n\\n            // Transfer payout asset to _recipient\\n            if (payoutAmounts_[i] > 0) {\\n                IVault(vaultProxy).withdrawAssetTo(\\n                    payoutAssets_[i],\\n                    _recipient,\\n                    payoutAmounts_[i]\\n                );\\n            }\\n        }\\n\\n        emit SharesRedeemed(\\n            canonicalSender,\\n            _recipient,\\n            sharesToRedeem,\\n            payoutAssets_,\\n            payoutAmounts_\\n        );\\n\\n        return (payoutAssets_, payoutAmounts_);\\n    }\\n\\n    /// @dev Helper to parse an array of payout assets during redemption, taking into account\\n    /// additional assets and assets to skip. _assetsToSkip ignores _additionalAssets.\\n    /// All input arrays are assumed to be unique.\\n    function __parseRedemptionPayoutAssets(\\n        address[] memory _trackedAssets,\\n        address[] memory _additionalAssets,\\n        address[] memory _assetsToSkip\\n    ) private pure returns (address[] memory payoutAssets_) {\\n        address[] memory trackedAssetsToPayout = _trackedAssets.removeItems(_assetsToSkip);\\n        if (_additionalAssets.length == 0) {\\n            return trackedAssetsToPayout;\\n        }\\n\\n        // Add additional assets. Duplicates of trackedAssets are ignored.\\n        bool[] memory indexesToAdd = new bool[](_additionalAssets.length);\\n        uint256 additionalItemsCount;\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\n            if (!trackedAssetsToPayout.contains(_additionalAssets[i])) {\\n                indexesToAdd[i] = true;\\n                additionalItemsCount++;\\n            }\\n        }\\n        if (additionalItemsCount == 0) {\\n            return trackedAssetsToPayout;\\n        }\\n\\n        payoutAssets_ = new address[](trackedAssetsToPayout.length.add(additionalItemsCount));\\n        for (uint256 i; i < trackedAssetsToPayout.length; i++) {\\n            payoutAssets_[i] = trackedAssetsToPayout[i];\\n        }\\n        uint256 payoutAssetsIndex = trackedAssetsToPayout.length;\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\n            if (indexesToAdd[i]) {\\n                payoutAssets_[payoutAssetsIndex] = _additionalAssets[i];\\n                payoutAssetsIndex++;\\n            }\\n        }\\n\\n        return payoutAssets_;\\n    }\\n\\n    /// @dev Helper to payout specified asset percentages during redeemSharesForSpecificAssets()\\n    function __payoutSpecifiedAssetPercentages(\\n        IVault vaultProxyContract,\\n        address _recipient,\\n        address[] calldata _payoutAssets,\\n        uint256[] calldata _payoutAssetPercentages,\\n        uint256 _owedGav\\n    ) private returns (uint256[] memory payoutAmounts_) {\\n        address denominationAssetCopy = getDenominationAsset();\\n        uint256 percentagesTotal;\\n        payoutAmounts_ = new uint256[](_payoutAssets.length);\\n        for (uint256 i; i < _payoutAssets.length; i++) {\\n            percentagesTotal = percentagesTotal.add(_payoutAssetPercentages[i]);\\n\\n            // Used to explicitly specify less than 100% in total _payoutAssetPercentages\\n            if (_payoutAssets[i] == SPECIFIC_ASSET_REDEMPTION_DUMMY_FORFEIT_ADDRESS) {\\n                continue;\\n            }\\n\\n            payoutAmounts_[i] = IValueInterpreter(getValueInterpreter()).calcCanonicalAssetValue(\\n                denominationAssetCopy,\\n                _owedGav.mul(_payoutAssetPercentages[i]).div(ONE_HUNDRED_PERCENT),\\n                _payoutAssets[i]\\n            );\\n            // Guards against corner case of primitive-to-derivative asset conversion that floors to 0,\\n            // or redeeming a very low shares amount and/or percentage where asset value owed is 0\\n            require(\\n                payoutAmounts_[i] > 0,\\n                \\\"__payoutSpecifiedAssetPercentages: Zero amount for asset\\\"\\n            );\\n\\n            vaultProxyContract.withdrawAssetTo(_payoutAssets[i], _recipient, payoutAmounts_[i]);\\n        }\\n\\n        require(\\n            percentagesTotal == ONE_HUNDRED_PERCENT,\\n            \\\"__payoutSpecifiedAssetPercentages: Percents must total 100%\\\"\\n        );\\n\\n        return payoutAmounts_;\\n    }\\n\\n    /// @dev Helper for system actions immediately prior to redeeming shares.\\n    /// Policy validation is not currently allowed on redemption, to ensure continuous redeemability.\\n    function __preRedeemSharesHook(\\n        address _redeemer,\\n        uint256 _sharesToRedeem,\\n        bool _forSpecifiedAssets,\\n        uint256 _gavIfCalculated\\n    ) private allowsPermissionedVaultAction {\\n        try\\n            IFeeManager(getFeeManager()).invokeHook(\\n                IFeeManager.FeeHook.PreRedeemShares,\\n                abi.encode(_redeemer, _sharesToRedeem, _forSpecifiedAssets),\\n                _gavIfCalculated\\n            )\\n         {} catch (bytes memory reason) {\\n            emit PreRedeemSharesHookFailed(reason, _redeemer, _sharesToRedeem);\\n        }\\n    }\\n\\n    /// @dev Helper to run policy validation after other logic for redeeming shares for specific assets.\\n    /// Avoids stack-too-deep error.\\n    function __postRedeemSharesForSpecificAssetsHook(\\n        address _redeemer,\\n        address _recipient,\\n        uint256 _sharesToRedeemPostFees,\\n        address[] memory _assets,\\n        uint256[] memory _assetAmounts,\\n        uint256 _gavPreRedeem\\n    ) private {\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.RedeemSharesForSpecificAssets,\\n            abi.encode(\\n                _redeemer,\\n                _recipient,\\n                _sharesToRedeemPostFees,\\n                _assets,\\n                _assetAmounts,\\n                _gavPreRedeem\\n            )\\n        );\\n    }\\n\\n    /// @dev Helper to execute common pre-shares redemption logic\\n    function __redeemSharesSetup(\\n        IVault vaultProxyContract,\\n        address _redeemer,\\n        uint256 _sharesQuantityInput,\\n        bool _forSpecifiedAssets,\\n        uint256 _gavIfCalculated\\n    ) private returns (uint256 sharesToRedeem_, uint256 sharesSupply_) {\\n        __assertSharesActionNotTimelocked(address(vaultProxyContract), _redeemer);\\n\\n        ERC20 sharesContract = ERC20(address(vaultProxyContract));\\n\\n        uint256 preFeesRedeemerSharesBalance = sharesContract.balanceOf(_redeemer);\\n\\n        if (_sharesQuantityInput == type(uint256).max) {\\n            sharesToRedeem_ = preFeesRedeemerSharesBalance;\\n        } else {\\n            sharesToRedeem_ = _sharesQuantityInput;\\n        }\\n        require(sharesToRedeem_ > 0, \\\"__redeemSharesSetup: No shares to redeem\\\");\\n\\n        __preRedeemSharesHook(_redeemer, sharesToRedeem_, _forSpecifiedAssets, _gavIfCalculated);\\n\\n        // Update the redemption amount if fees were charged (or accrued) to the redeemer\\n        uint256 postFeesRedeemerSharesBalance = sharesContract.balanceOf(_redeemer);\\n        if (_sharesQuantityInput == type(uint256).max) {\\n            sharesToRedeem_ = postFeesRedeemerSharesBalance;\\n        } else if (postFeesRedeemerSharesBalance < preFeesRedeemerSharesBalance) {\\n            sharesToRedeem_ = sharesToRedeem_.sub(\\n                preFeesRedeemerSharesBalance.sub(postFeesRedeemerSharesBalance)\\n            );\\n        }\\n\\n        // Pay the protocol fee after running other fees, but before burning shares\\n        vaultProxyContract.payProtocolFee();\\n\\n        if (_gavIfCalculated > 0 && doesAutoProtocolFeeSharesBuyback()) {\\n            __buyBackMaxProtocolFeeShares(address(vaultProxyContract), _gavIfCalculated);\\n        }\\n\\n        // Destroy the shares after getting the shares supply\\n        sharesSupply_ = sharesContract.totalSupply();\\n        vaultProxyContract.burnShares(_redeemer, sharesToRedeem_);\\n\\n        return (sharesToRedeem_, sharesSupply_);\\n    }\\n\\n    // TRANSFER SHARES\\n\\n    /// @notice Runs logic prior to transferring shares that are not freely transferable\\n    /// @param _sender The sender of the shares\\n    /// @param _recipient The recipient of the shares\\n    /// @param _amount The amount of shares\\n    function preTransferSharesHook(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external override {\\n        address vaultProxyCopy = getVaultProxy();\\n        require(msg.sender == vaultProxyCopy, \\\"preTransferSharesHook: Only VaultProxy callable\\\");\\n        __assertSharesActionNotTimelocked(vaultProxyCopy, _sender);\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.PreTransferShares,\\n            abi.encode(_sender, _recipient, _amount)\\n        );\\n    }\\n\\n    /// @notice Runs logic prior to transferring shares that are freely transferable\\n    /// @param _sender The sender of the shares\\n    /// @dev No need to validate caller, as policies are not run\\n    function preTransferSharesHookFreelyTransferable(address _sender) external view override {\\n        __assertSharesActionNotTimelocked(getVaultProxy(), _sender);\\n    }\\n\\n    /////////////////\\n    // GAS RELAYER //\\n    /////////////////\\n\\n    /// @notice Deploys a paymaster contract and deposits WETH, enabling gas relaying\\n    function deployGasRelayPaymaster() external onlyOwnerNotRelayable {\\n        require(\\n            getGasRelayPaymaster() == address(0),\\n            \\\"deployGasRelayPaymaster: Paymaster already deployed\\\"\\n        );\\n\\n        bytes memory constructData = abi.encodeWithSignature(\\\"init(address)\\\", getVaultProxy());\\n        address paymaster = IBeaconProxyFactory(getGasRelayPaymasterFactory()).deployProxy(\\n            constructData\\n        );\\n\\n        __setGasRelayPaymaster(paymaster);\\n\\n        __depositToGasRelayPaymaster(paymaster);\\n    }\\n\\n    /// @notice Tops up the gas relay paymaster deposit\\n    function depositToGasRelayPaymaster() external onlyOwner {\\n        __depositToGasRelayPaymaster(getGasRelayPaymaster());\\n    }\\n\\n    /// @notice Pull WETH from vault to gas relay paymaster\\n    /// @param _amount Amount of the WETH to pull from the vault\\n    function pullWethForGasRelayer(uint256 _amount) external override onlyGasRelayPaymaster {\\n        IVault(getVaultProxy()).withdrawAssetTo(getWethToken(), getGasRelayPaymaster(), _amount);\\n    }\\n\\n    /// @notice Sets the gasRelayPaymaster variable value\\n    /// @param _nextGasRelayPaymaster The next gasRelayPaymaster value\\n    function setGasRelayPaymaster(address _nextGasRelayPaymaster)\\n        external\\n        override\\n        onlyFundDeployer\\n    {\\n        __setGasRelayPaymaster(_nextGasRelayPaymaster);\\n    }\\n\\n    /// @notice Removes the gas relay paymaster, withdrawing the remaining WETH balance\\n    /// and disabling gas relaying\\n    function shutdownGasRelayPaymaster() external onlyOwnerNotRelayable {\\n        IGasRelayPaymaster(gasRelayPaymaster).withdrawBalance();\\n\\n        IVault(vaultProxy).addTrackedAsset(getWethToken());\\n\\n        delete gasRelayPaymaster;\\n\\n        emit GasRelayPaymasterSet(address(0));\\n    }\\n\\n    /// @dev Helper to deposit to the gas relay paymaster\\n    function __depositToGasRelayPaymaster(address _paymaster) private {\\n        IGasRelayPaymaster(_paymaster).deposit();\\n    }\\n\\n    /// @dev Helper to set the next `gasRelayPaymaster` variable\\n    function __setGasRelayPaymaster(address _nextGasRelayPaymaster) private {\\n        gasRelayPaymaster = _nextGasRelayPaymaster;\\n\\n        emit GasRelayPaymasterSet(_nextGasRelayPaymaster);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    // LIB IMMUTABLES\\n\\n    /// @notice Gets the `ASSET_FINALITY_RESOLVER` variable\\n    /// @return assetFinalityResolver_ The `ASSET_FINALITY_RESOLVER` variable value\\n    function getAssetFinalityResolver() public view returns (address assetFinalityResolver_) {\\n        return ASSET_FINALITY_RESOLVER;\\n    }\\n\\n    /// @notice Gets the `DISPATCHER` variable\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\n    function getDispatcher() public view returns (address dispatcher_) {\\n        return DISPATCHER;\\n    }\\n\\n    /// @notice Gets the `EXTERNAL_POSITION_MANAGER` variable\\n    /// @return externalPositionManager_ The `EXTERNAL_POSITION_MANAGER` variable value\\n    function getExternalPositionManager()\\n        public\\n        view\\n        override\\n        returns (address externalPositionManager_)\\n    {\\n        return EXTERNAL_POSITION_MANAGER;\\n    }\\n\\n    /// @notice Gets the `FEE_MANAGER` variable\\n    /// @return feeManager_ The `FEE_MANAGER` variable value\\n    function getFeeManager() public view override returns (address feeManager_) {\\n        return FEE_MANAGER;\\n    }\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() public view override returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() public view override returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n\\n    /// @notice Gets the `MLN_TOKEN` variable\\n    /// @return mlnToken_ The `MLN_TOKEN` variable value\\n    function getMlnToken() public view returns (address mlnToken_) {\\n        return MLN_TOKEN;\\n    }\\n\\n    /// @notice Gets the `POLICY_MANAGER` variable\\n    /// @return policyManager_ The `POLICY_MANAGER` variable value\\n    function getPolicyManager() public view override returns (address policyManager_) {\\n        return POLICY_MANAGER;\\n    }\\n\\n    /// @notice Gets the `PROTOCOL_FEE_RESERVE` variable\\n    /// @return protocolFeeReserve_ The `PROTOCOL_FEE_RESERVE` variable value\\n    function getProtocolFeeReserve() public view returns (address protocolFeeReserve_) {\\n        return PROTOCOL_FEE_RESERVE;\\n    }\\n\\n    /// @notice Gets the `VALUE_INTERPRETER` variable\\n    /// @return valueInterpreter_ The `VALUE_INTERPRETER` variable value\\n    function getValueInterpreter() public view returns (address valueInterpreter_) {\\n        return VALUE_INTERPRETER;\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() public view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n\\n    // PROXY STORAGE\\n\\n    /// @notice Checks if collected protocol fee shares are automatically bought back\\n    /// while buying or redeeming shares\\n    /// @return doesAutoBuyback_ True if shares are automatically bought back\\n    function doesAutoProtocolFeeSharesBuyback() public view returns (bool doesAutoBuyback_) {\\n        return autoProtocolFeeSharesBuyback;\\n    }\\n\\n    /// @notice Gets the `denominationAsset` variable\\n    /// @return denominationAsset_ The `denominationAsset` variable value\\n    function getDenominationAsset() public view override returns (address denominationAsset_) {\\n        return denominationAsset;\\n    }\\n\\n    /// @notice Gets the `gasRelayPaymaster` variable\\n    /// @return gasRelayPaymaster_ The `gasRelayPaymaster` variable value\\n    function getGasRelayPaymaster() public view override returns (address gasRelayPaymaster_) {\\n        return gasRelayPaymaster;\\n    }\\n\\n    /// @notice Gets the timestamp of the last time shares were bought for a given account\\n    /// @param _who The account for which to get the timestamp\\n    /// @return lastSharesBoughtTimestamp_ The timestamp of the last shares bought\\n    function getLastSharesBoughtTimestampForAccount(address _who)\\n        public\\n        view\\n        returns (uint256 lastSharesBoughtTimestamp_)\\n    {\\n        return acctToLastSharesBoughtTimestamp[_who];\\n    }\\n\\n    /// @notice Gets the `sharesActionTimelock` variable\\n    /// @return sharesActionTimelock_ The `sharesActionTimelock` variable value\\n    function getSharesActionTimelock() public view returns (uint256 sharesActionTimelock_) {\\n        return sharesActionTimelock;\\n    }\\n\\n    /// @notice Gets the `vaultProxy` variable\\n    /// @return vaultProxy_ The `vaultProxy` variable value\\n    function getVaultProxy() public view override returns (address vaultProxy_) {\\n        return vaultProxy;\\n    }\\n}\\n\",\"keccak256\":\"0xd0ec93463a58713bf08b0bf6f4084bcca5ab1a3977e2cf357e4064589b296921\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\n/// @title IComptroller Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IComptroller {\\n    function activate(bool) external;\\n\\n    function calcGav(bool) external returns (uint256);\\n\\n    function calcGrossShareValue(bool) external returns (uint256);\\n\\n    function callOnExtension(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external;\\n\\n    function destructActivated(uint256, uint256) external;\\n\\n    function destructUnactivated() external;\\n\\n    function getDenominationAsset() external view returns (address);\\n\\n    function getExternalPositionManager() external view returns (address);\\n\\n    function getFeeManager() external view returns (address);\\n\\n    function getFundDeployer() external view returns (address);\\n\\n    function getGasRelayPaymaster() external view returns (address);\\n\\n    function getIntegrationManager() external view returns (address);\\n\\n    function getPolicyManager() external view returns (address);\\n\\n    function getVaultProxy() external view returns (address);\\n\\n    function init(address, uint256) external;\\n\\n    function permissionedVaultAction(IVault.VaultAction, bytes calldata) external;\\n\\n    function preTransferSharesHook(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function preTransferSharesHookFreelyTransferable(address) external view;\\n\\n    function setGasRelayPaymaster(address) external;\\n\\n    function setVaultProxy(address) external;\\n}\\n\",\"keccak256\":\"0xe59c52ad44c1c4643d0f000deb6ebc45bf72393d42d87de5721a79544a0dae37\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../persistent/vault/interfaces/IExternalPositionVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IMigratableVault.sol\\\";\\n\\n/// @title IVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IVault is IMigratableVault, IFreelyTransferableSharesVault, IExternalPositionVault {\\n    enum VaultAction {\\n        None,\\n        // Shares management\\n        BurnShares,\\n        MintShares,\\n        TransferShares,\\n        // Asset management\\n        AddTrackedAsset,\\n        ApproveAssetSpender,\\n        RemoveTrackedAsset,\\n        WithdrawAssetTo,\\n        // External position management\\n        AddExternalPosition,\\n        CallOnExternalPosition,\\n        RemoveExternalPosition\\n    }\\n\\n    function addTrackedAsset(address) external;\\n\\n    function burnShares(address, uint256) external;\\n\\n    function buyBackProtocolFeeShares(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function callOnContract(address, bytes calldata) external returns (bytes memory);\\n\\n    function canManageAssets(address) external view returns (bool);\\n\\n    function canRelayCalls(address) external view returns (bool);\\n\\n    function getAccessor() external view returns (address);\\n\\n    function getOwner() external view returns (address);\\n\\n    function getActiveExternalPositions() external view returns (address[] memory);\\n\\n    function getTrackedAssets() external view returns (address[] memory);\\n\\n    function isActiveExternalPosition(address) external view returns (bool);\\n\\n    function isTrackedAsset(address) external view returns (bool);\\n\\n    function mintShares(address, uint256) external;\\n\\n    function payProtocolFee() external;\\n\\n    function receiveValidatedVaultAction(VaultAction, bytes calldata) external;\\n\\n    function setAccessorForFundReconfiguration(address) external;\\n\\n    function transferShares(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAssetTo(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAssetToVault(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function transferUnderlyingTo(\\n        address asset,\\n        address target,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function debugGav(\\n        address,\\n        uint256,\\n        address\\n    ) external view;\\n\\n    function handleRepayment(address, uint256) external;\\n}\\n\",\"keccak256\":\"0x7ed35e01fb75d8ee6038008d851bf3d3d482ec826a29f0f791ae8ebafaafc995\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/IExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExtension Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all extensions\\ninterface IExtension {\\n    function activateForFund(bool _isMigration) external;\\n\\n    function deactivateForFund() external;\\n\\n    function receiveCallFromComptroller(\\n        address _caller,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external;\\n\\n    function setConfigForFund(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes calldata _configData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x59aaa2ddd32c24271bd4a57e9e1f3426570a78cd56d6d11e63786f36c916e94b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title FeeManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the FeeManager\\ninterface IFeeManager {\\n    // No fees for the current release are implemented post-redeemShares\\n    enum FeeHook {Continuous, PreBuyShares, PostBuyShares, PreRedeemShares}\\n    enum SettlementType {None, Direct, Mint, Burn, MintSharesOutstanding, BurnSharesOutstanding}\\n\\n    function invokeHook(\\n        FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa0cfee013a2a0f8891ee558dec4568dd6e76e3f033a214cbe5e74e93e8f68fd2\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title PolicyManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the PolicyManager\\ninterface IPolicyManager {\\n    // When updating PolicyHook, also update these functions in PolicyManager:\\n    // 1. __getAllPolicyHooks()\\n    // 2. __policyHookRestrictsCurrentInvestorActions()\\n    enum PolicyHook {\\n        PostBuyShares,\\n        PostCallOnIntegration,\\n        PreTransferShares,\\n        RedeemSharesForSpecificAssets,\\n        AddTrackedAssets,\\n        RemoveTrackedAssets,\\n        CreateExternalPosition,\\n        PostCallOnExternalPosition,\\n        RemoveExternalPosition,\\n        ReactivateExternalPosition\\n    }\\n\\n    function validatePolicies(\\n        address,\\n        PolicyHook,\\n        bytes calldata\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1ed5fff925cdfa8808a65aa4c1e45813d87c1f462fc6740be670065ed2f6fd32\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/asset-finality/IAssetFinalityResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IAssetFinalityResolver Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IAssetFinalityResolver {\\n    function finalizeAssets(address, address[] calldata) external;\\n}\\n\",\"keccak256\":\"0x897894f9b2d6e9f85918ddd80ecb2bbaa07d8afac1cfead2fad37ac67dc1c6b4\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/gas-relayer/GasRelayRecipientMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport \\\"../../utils/beacon-proxy/IBeaconProxyFactory.sol\\\";\\nimport \\\"./IGasRelayPaymaster.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\n/// @title GasRelayRecipientMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin that enables receiving GSN-relayed calls\\n/// @dev IMPORTANT: Do not use storage var in this contract,\\n/// unless it is no longer inherited by the VaultLib\\nabstract contract GasRelayRecipientMixin {\\n    address internal immutable GAS_RELAY_PAYMASTER_FACTORY;\\n\\n    constructor(address _gasRelayPaymasterFactory) internal {\\n        GAS_RELAY_PAYMASTER_FACTORY = _gasRelayPaymasterFactory;\\n    }\\n\\n    /// @dev Helper to parse the canonical sender of a tx based on whether it has been relayed\\n    function __msgSender() internal view returns (address payable canonicalSender_) {\\n        if (msg.data.length >= 24 && msg.sender == getGasRelayTrustedForwarder()) {\\n            assembly {\\n                canonicalSender_ := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n\\n            return canonicalSender_;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `GAS_RELAY_PAYMASTER_FACTORY` variable\\n    /// @return gasRelayPaymasterFactory_ The `GAS_RELAY_PAYMASTER_FACTORY` variable value\\n    function getGasRelayPaymasterFactory()\\n        public\\n        view\\n        returns (address gasRelayPaymasterFactory_)\\n    {\\n        return GAS_RELAY_PAYMASTER_FACTORY;\\n    }\\n\\n    /// @notice Gets the trusted forwarder for GSN relaying\\n    /// @return trustedForwarder_ The trusted forwarder\\n    function getGasRelayTrustedForwarder() public view returns (address trustedForwarder_) {\\n        return\\n            IGasRelayPaymaster(\\n                IBeaconProxyFactory(getGasRelayPaymasterFactory()).getCanonicalLib()\\n            )\\n                .trustedForwarder();\\n    }\\n}\\n\",\"keccak256\":\"0xa5741fbd96f87cc20c961d8dfa43937f8a83dfdbdb93b542e789c89698ddd418\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/gas-relayer/IGasRelayPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../interfaces/IGsnPaymaster.sol\\\";\\n\\n/// @title IGasRelayPaymaster Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGasRelayPaymaster is IGsnPaymaster {\\n    function deposit() external;\\n\\n    function withdrawBalance() external;\\n}\\n\",\"keccak256\":\"0xb8b05029aca9eb89ff33c9cc3f97f6d096a5d8185a5ddcdec7cb1a92e4927b01\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/gas-relayer/IGasRelayPaymasterDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IGasRelayPaymasterDepositor Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGasRelayPaymasterDepositor {\\n    function pullWethForGasRelayer(uint256) external;\\n}\\n\",\"keccak256\":\"0xcbfbcc963988ba5ca56e5e54ea8fc7fcdf4a3fd903a73b139d9bef63c18ef196\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/IValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IValueInterpreter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for ValueInterpreter\\ninterface IValueInterpreter {\\n    function calcCanonicalAssetValue(\\n        address,\\n        uint256,\\n        address\\n    ) external returns (uint256);\\n\\n    function calcCanonicalAssetsTotalValue(\\n        address[] calldata,\\n        uint256[] calldata,\\n        address\\n    ) external returns (uint256);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n\\n    function isSupportedDerivativeAsset(address) external view returns (bool);\\n\\n    function isSupportedPrimitiveAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6838a22b0357f3c5f437c1e54b8f63c7df42b41e3b25d56c5017eb75a857a794\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IGsnForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IGsnForwarder interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGsnForwarder {\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntil;\\n    }\\n}\\n\",\"keccak256\":\"0xdf725d6209efe494c5f56c1f3d2cc8c64f0785b4b62fa9869bee3d85d8d9e030\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IGsnPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IGsnTypes.sol\\\";\\n\\n/// @title IGsnPaymaster interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGsnPaymaster {\\n    struct GasAndDataLimits {\\n        uint256 acceptanceBudget;\\n        uint256 preRelayedCallGasLimit;\\n        uint256 postRelayedCallGasLimit;\\n        uint256 calldataSizeLimit;\\n    }\\n\\n    function getGasAndDataLimits() external view returns (GasAndDataLimits memory limits);\\n\\n    function getHubAddr() external view returns (address);\\n\\n    function getRelayHubDeposit() external view returns (uint256);\\n\\n    function preRelayedCall(\\n        IGsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleGas\\n    ) external returns (bytes memory context, bool rejectOnRecipientRevert);\\n\\n    function postRelayedCall(\\n        bytes calldata context,\\n        bool success,\\n        uint256 gasUseWithoutPost,\\n        IGsnTypes.RelayData calldata relayData\\n    ) external;\\n\\n    function trustedForwarder() external view returns (address);\\n\\n    function versionPaymaster() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2b6990c5f1721a994774d431c41563970e9400971df9ba0ff91ead265427272c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IGsnTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IGsnForwarder.sol\\\";\\n\\n/// @title IGsnTypes Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGsnTypes {\\n    struct RelayData {\\n        uint256 gasPrice;\\n        uint256 pctRelayFee;\\n        uint256 baseRelayFee;\\n        address relayWorker;\\n        address paymaster;\\n        address forwarder;\\n        bytes paymasterData;\\n        uint256 clientId;\\n    }\\n\\n    struct RelayRequest {\\n        IGsnForwarder.ForwardRequest request;\\n        RelayData relayData;\\n    }\\n}\\n\",\"keccak256\":\"0xa5e951206789bd818be825058792b233858a9c58ca25d451b3691917a0ce3714\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    /// @dev Helper to remove an item from a storage array\\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\\n        internal\\n        returns (bool removed_)\\n    {\\n        uint256 itemCount = _self.length;\\n        for (uint256 i; i < itemCount; i++) {\\n            if (_self[i] == _itemToRemove) {\\n                if (i < itemCount - 1) {\\n                    _self[i] = _self[itemCount - 1];\\n                }\\n                _self.pop();\\n                removed_ = true;\\n                break;\\n            }\\n        }\\n\\n        return removed_;\\n    }\\n\\n    ////////////\\n    // MEMORY //\\n    ////////////\\n\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to merge the unique items of a second array.\\n    /// Does not consider uniqueness of either array, only relative uniqueness.\\n    /// Preserves ordering.\\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        uint256 newUniqueItemCount;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                newUniqueItemCount++;\\n            }\\n        }\\n\\n        if (newUniqueItemCount == 0) {\\n            return _self;\\n        }\\n\\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        uint256 nextArrayIndex = _self.length;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\\n                nextArrayIndex++;\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0x23809cb635aee1cd1aad36952627ce55739cf0bea3408819a0eddee2932936e7\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/beacon-proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IBeacon interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IBeacon {\\n    function getCanonicalLib() external view returns (address);\\n}\\n\",\"keccak256\":\"0x27a585523828a67a1a7c84eadd22b3056e8ffc51ab71992fd97c9ffb4239eeb2\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/beacon-proxy/IBeaconProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport \\\"./IBeacon.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\n/// @title IBeaconProxyFactory interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IBeaconProxyFactory is IBeacon {\\n    function deployProxy(bytes memory _constructData) external returns (address proxy_);\\n\\n    function setCanonicalLib(address _canonicalLib) external;\\n}\\n\",\"keccak256\":\"0x747e53725f5dbe419893ea447df4f33a3b25d99aae5b724aa1b9778cec1a26bc\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6102006040523480156200001257600080fd5b50604051620061873803806200618783398181016040526101808110156200003957600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505082806001600160a01b03166080816001600160a01b031660601b8152505050836001600160a01b031660a0816001600160a01b031660601b815250508b6001600160a01b031660c0816001600160a01b031660601b81525050876001600160a01b031660e0816001600160a01b031660601b81525050866001600160a01b0316610120816001600160a01b031660601b81525050896001600160a01b0316610100816001600160a01b031660601b81525050856001600160a01b0316610140816001600160a01b031660601b81525050816001600160a01b0316610160816001600160a01b031660601b81525050846001600160a01b0316610180816001600160a01b031660601b815250508a6001600160a01b03166101a0816001600160a01b031660601b81525050886001600160a01b03166101c0816001600160a01b031660601b81525050806001600160a01b03166101e0816001600160a01b031660601b8152505060018060146101000a81548160ff02191690831515021790555050505050505050505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c6101805160601c6101a05160601c6101c05160601c6101e05160601c615e99620002ee600039806112d1525080611bab52508061241b5250806123f75250806128ff52508061292352508061296b525080611e20525080611fa4525080612947525080610caa525080611e545250615e996000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c8063ac25945611610146578063e269c3d6116100c3578063ebb3d58911610087578063ebb3d589146109a6578063f2d63826146109ae578063f513c926146109b6578063f9005af3146109d5578063f9d5fe78146109dd578063faf9096b14610a035761025e565b8063e269c3d614610884578063e53a73b91461088c578063e572ced114610894578063e70e605e14610996578063e7c456901461099e5761025e565b8063c98091871161010a578063c980918714610845578063ce5e84a31461084d578063d44ad6cb1461086c578063da41962e14610874578063db69681f1461087c5761025e565b8063ac259456146107d6578063b10ea2b0146107de578063b3fc38e9146107fb578063b417061214610803578063beebc5da146108225761025e565b80636af8e7eb116101df5780637f20170d116101a35780637f20170d1461072f578063875fb4b314610755578063877fd8941461075d57806392b575b61461078f57806397c0ac87146107b2578063a01fd157146107ba5761025e565b80636af8e7eb146105705780636ea21143146106dc578063716d4da4146106e457806373eecf47146106ec57806379951f0f146107125761025e565b8063397bfe5511610226578063397bfe5514610479578063399ae7241461049f57806339bf70d1146104cb5780634c252f911461054e5780634da471b7146105565761025e565b806310acd06d1461026357806312f20526146102dd5780631ce733c8146103135780632dc7a3a0146103375780633462fcc114610356575b600080fd5b6102db6004803603604081101561027957600080fd5b60ff8235169190810190604081016020820135600160201b81111561029d57600080fd5b8201836020820111156102af57600080fd5b803590602001918460018302840111600160201b831117156102d057600080fd5b509092509050610a0b565b005b6102db600480360360608110156102f357600080fd5b506001600160a01b03813581169160208101359091169060400135610b3b565b61031b610ca8565b604080516001600160a01b039092168252519081900360200190f35b6102db6004803603602081101561034d57600080fd5b50351515610ccd565b6104296004803603608081101561036c57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561039b57600080fd5b8201836020820111156103ad57600080fd5b803590602001918460208302840111600160201b831117156103ce57600080fd5b919390929091602081019035600160201b8111156103eb57600080fd5b8201836020820111156103fd57600080fd5b803590602001918460208302840111600160201b8311171561041e57600080fd5b509092509050610d30565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561046557818101518382015260200161044d565b505050509050019250505060405180910390f35b6102db6004803603602081101561048f57600080fd5b50356001600160a01b0316610f86565b6102db600480360360408110156104b557600080fd5b506001600160a01b038135169060200135610fe2565b6102db600480360360608110156104e157600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561051057600080fd5b82018360208201111561052257600080fd5b803590602001918460018302840111600160201b8311171561054357600080fd5b50909250905061113e565b61031b6112cf565b61055e6112f3565b60408051918252519081900360200190f35b6106436004803603608081101561058657600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156105b557600080fd5b8201836020820111156105c757600080fd5b803590602001918460208302840111600160201b831117156105e857600080fd5b919390929091602081019035600160201b81111561060557600080fd5b82018360208201111561061757600080fd5b803590602001918460208302840111600160201b8311171561063857600080fd5b5090925090506112f9565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561068757818101518382015260200161066f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156106c65781810151838201526020016106ae565b5050505090500194505050505060405180910390f35b61031b6119d8565b6102db611ab9565b6102db6004803603602081101561070257600080fd5b50356001600160a01b0316611ad6565b6102db6004803603602081101561072857600080fd5b5035611aea565b61055e6004803603602081101561074557600080fd5b50356001600160a01b0316611b8a565b61031b611ba9565b61055e6004803603606081101561077357600080fd5b506001600160a01b038135169060208101359060400135611bcd565b6102db600480360360408110156107a557600080fd5b5080359060200135611cdc565b61031b611e1e565b6107c2611e42565b604080519115158252519081900360200190f35b61031b611e52565b6102db600480360360208110156107f457600080fd5b5035611e76565b61031b611fa2565b61055e6004803603602081101561081957600080fd5b50351515611fc6565b61055e6004803603604081101561083857600080fd5b50803590602001356120bb565b61031b6120ef565b6102db6004803603602081101561086357600080fd5b503515156120fe565b61031b6123f5565b61031b612419565b6102db61243d565b61031b6125d9565b6102db6125e8565b610921600480360360608110156108aa57600080fd5b6001600160a01b03823516916001600160e01b031960208201351691810190606081016040820135600160201b8111156108e357600080fd5b8201836020820111156108f557600080fd5b803590602001918460018302840111600160201b8311171561091657600080fd5b5090925090506125f8565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561095b578181015183820152602001610943565b50505050905090810190601f1680156109885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61031b6128fd565b61031b612921565b61031b612945565b61031b612969565b61055e600480360360208110156109cc57600080fd5b5035151561298d565b6102db612f93565b6102db600480360360208110156109f357600080fd5b50356001600160a01b03166130af565b61031b6130c0565b610a1533846130cf565b600683600a811115610a2357fe5b1415610a9257610a316125d9565b6001600160a01b031682826020811015610a4a57600080fd5b50356001600160a01b03161415610a925760405162461bcd60e51b815260040180806020018281038252603a815260200180615daa603a913960400191505060405180910390fd5b610a9a6120ef565b6001600160a01b03166324e600128484846040518463ffffffff1660e01b81526004018084600a811115610aca57fe5b8152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b50505050505050565b6000610b456120ef565b9050336001600160a01b03821614610b8e5760405162461bcd60e51b815260040180806020018281038252602f815260200180615d55602f913960400191505060405180910390fd5b610b98818561325e565b610ba06123f5565b604080516001600160a01b038781166020830152868116828401526060808301879052835180840390910181526080830193849052630442bad560e01b90935230608483018181529490911693630442bad5939192600292919060a40183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610c3c578181015183820152602001610c24565b50505050905090810190601f168015610c695780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b5050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000005b90565b610cdd610cd86132e8565b61332c565b60018054821515600160a81b810260ff60a81b199092169190911790915560408051918252517f8ccd4cc3a51ed6f61f2b34b8d0a1ac137376931714380a7702b410ed174d6a739181900360200190a150565b6060610d3a6133f7565b6001805460ff60b81b1916600160b81b1790556000610d576132e8565b9050848314610d975760405162461bcd60e51b815260040180806020018281038252602d815260200180615b2f602d913960400191505060405180910390fd5b610dd386868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344492505050565b610e0e5760405162461bcd60e51b8152600401808060200182810382526035815260200180615b5c6035913960400191505060405180910390fd5b6000610e1a600161298d565b90506000610e266120ef565b9050600080610e3983868d6001886134d8565b9092509050610e60838d8c8c8c8c610e5b88610e558d8c6137ca565b90613823565b61388a565b9550610ea5858d848d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508b9150613b949050565b8b6001600160a01b0316856001600160a01b03167fbf88879a1555e4d7d38ebeffabce61fdf5e12ea0468abf855a72ec17b432bed5848d8d8b60405180858152602001806020018060200183810383528686828181526020019250602002808284376000838201819052601f909101601f1916909201858103845286518152865160209182019382890193509102908190849084905b83811015610f53578181015183820152602001610f3b565b50505050905001965050505050505060405180910390a350505050506001805460ff60b81b191690559695505050505050565b610f8e613d5d565b600180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f5be181178e61e61e33f79c396c7194b8f3c80f77899da7bd96fe537411300bcb9181900360200190a150565b6000610fec6125d9565b6001600160a01b031614611047576040805162461bcd60e51b815260206004820152601960248201527f696e69743a20416c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b61104f611ba9565b6001600160a01b031663c496f8e8836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561109b57600080fd5b505afa1580156110af573d6000803e3d6000fd5b505050506040513d60208110156110c557600080fd5b5051611118576040805162461bcd60e51b815260206004820152601c60248201527f696e69743a204261642064656e6f6d696e6174696f6e20617373657400000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b039390931692909217909155600255565b6111466133f7565b6001805460ff60b81b1916600160b81b179055611161613dca565b6001805460ff60b01b1916600160b01b17905561117c612969565b6001600160a01b0316846001600160a01b031614806111b3575061119e612921565b6001600160a01b0316846001600160a01b0316145b806111d657506111c1611fa2565b6001600160a01b0316846001600160a01b0316145b6112115760405162461bcd60e51b8152600401808060200182810382526023815260200180615c246023913960400191505060405180910390fd5b836001600160a01b0316631bee801e6112286132e8565b8585856040518563ffffffff1660e01b815260040180856001600160a01b03168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b50506001805461ffff60b01b19169055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60025490565b6060806113046133f7565b6001805460ff60b81b1916600160b81b17905560006113216132e8565b905061135f87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344492505050565b61139a5760405162461bcd60e51b8152600401808060200182810382526039815260200180615c476039913960400191505060405180910390fd5b6113d685858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344492505050565b6114115760405162461bcd60e51b8152600401808060200182810382526035815260200180615e2f6035913960400191505060405180910390fd5b60015460408051630c4b973760e41b81529051611580926001600160a01b03169163c4b97370916004808301926000929190829003018186803b15801561145757600080fd5b505afa15801561146b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561149457600080fd5b8101908080516040519392919084600160201b8211156114b357600080fd5b9083019060208201858111156114c857600080fd5b82518660208202830111600160201b821117156114e457600080fd5b82525081516020918201928201910280838360005b838110156115115781810151838201526020016114f9565b5050505090910160208d810282810182016040528e83529195508e94508d935083925085019084908082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092019190915250613e2992505050565b925061158a610ca8565b60015460408051637620630560e01b81526001600160a01b03928316600482018181526024830193845288516044840152885195909416946376206305949193899390916064909101906020808601910280838360005b838110156115f95781810151838201526020016115e1565b505050509050019350505050600060405180830381600087803b15801561161f57600080fd5b505af1158015611633573d6000803e3d6000fd5b505050506000611641611e42565b156116e957306001600160a01b031663f513c92660006040518263ffffffff1660e01b8152600401808215158152602001915050602060405180830381600087803b15801561168f57600080fd5b505af19250505080156116b457506040513d60208110156116af57600080fd5b505160015b6116e6576040517ff5939ff9a66cf6d21ec93b246060bc17f5c062847e28d967d3dd617636b238d490600090a16116e9565b90505b6001546000908190611707906001600160a01b0316858d84876134d8565b91509150855167ffffffffffffffff8111801561172357600080fd5b5060405190808252806020026020018201604052801561174d578160200160208202803683370190505b50945060005b86518110156118e2576117f782610e55858a858151811061177057fe5b602090810291909101810151600154604080516370a0823160e01b81526001600160a01b039283166004820152905191909216926370a082319260248082019391829003018186803b1580156117c557600080fd5b505afa1580156117d9573d6000803e3d6000fd5b505050506040513d60208110156117ef57600080fd5b5051906137ca565b86828151811061180357fe5b602002602001018181525050600086828151811061181d57fe5b602002602001015111156118da5760015487516001600160a01b039091169063495d753c9089908490811061184e57fe5b60200260200101518f89858151811061186357fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156118c157600080fd5b505af11580156118d5573d6000803e3d6000fd5b505050505b600101611753565b508b6001600160a01b0316846001600160a01b03167fbf88879a1555e4d7d38ebeffabce61fdf5e12ea0468abf855a72ec17b432bed5848989604051808481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561196557818101518382015260200161194d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156119a457818101518382015260200161198c565b505050509050019550505050505060405180910390a3505050506001805460ff60b81b191690559097909650945050505050565b60006119e2611e52565b6001600160a01b03166398a7c4c76040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1a57600080fd5b505afa158015611a2e573d6000803e3d6000fd5b505050506040513d6020811015611a4457600080fd5b505160408051637da0a87760e01b815290516001600160a01b0390921691637da0a87791600480820192602092909190829003018186803b158015611a8857600080fd5b505afa158015611a9c573d6000803e3d6000fd5b505050506040513d6020811015611ab257600080fd5b5051905090565b611ac4610cd86132e8565b611ad4611acf6130c0565b61401b565b565b611ade613d5d565b611ae781614056565b50565b611af26140aa565b611afa6120ef565b6001600160a01b031663495d753c611b106112cf565b611b186130c0565b846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015611b6f57600080fd5b505af1158015611b83573d6000803e3d6000fd5b5050505050565b6001600160a01b0381166000908152600360205260409020545b919050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000806000611bda6112f3565b1190506000611be76132e8565b9050811580611c725750611bf9611e1e565b6001600160a01b03166354391f09826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611c4557600080fd5b505afa158015611c59573d6000803e3d6000fd5b505050506040513d6020811015611c6f57600080fd5b50515b611cc3576040805162461bcd60e51b815260206004820152601f60248201527f6275795368617265734f6e426568616c663a20556e617574686f72697a656400604482015290519081900360640190fd5b611cd08686868585614101565b925050505b9392505050565b611ce4613d5d565b611cec613dca565b6001805460ff60b01b1916600160b01b179055611d076120ef565b6001600160a01b031663d5c20fa2826040518263ffffffff1660e01b8152600401600060405180830381600088803b158015611d4257600080fd5b5087f193505050508015611d54575060015b611d82576040517f8a7579328a911284dedef6a7e68bbb1eae7d59418f2699cb5a3c26f6e57e4d7790600090a15b611d8a612969565b6001600160a01b031663bd8e959a836040518263ffffffff1660e01b8152600401600060405180830381600088803b158015611dc557600080fd5b5087f193505050508015611dd7575060015b611e05576040517f681c534f5c2e473c9cc8ab1693257fb2b0e19a5c5ecd7d040201f1cf2a190c8790600090a15b611e0d614507565b50506001805460ff60b01b19169055565b7f000000000000000000000000000000000000000000000000000000000000000090565b600154600160a81b900460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001546001600160a01b03168063714ca2d1611e906132e8565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611ecd57600080fd5b505afa158015611ee1573d6000803e3d6000fd5b505050506040513d6020811015611ef757600080fd5b5051611f345760405162461bcd60e51b8152600401808060200182810382526026815260200180615d846026913960400191505060405180910390fd5b6000611f40600161298d565b9050816001600160a01b0316631ff46bfa84611f5d858786614553565b846040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b158015610b1e57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000090565b600080611fd28361298d565b9050611cd581611fe06120ef565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561201857600080fd5b505afa15801561202c573d6000803e3d6000fd5b505050506040513d602081101561204257600080fd5b505161204c6125d9565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561208457600080fd5b505afa158015612098573d6000803e3d6000fd5b505050506040513d60208110156120ae57600080fd5b505160ff16600a0a6146d4565b60008060006120c86112f3565b11905060006120d56132e8565b90506120e48186868585614101565b925050505b92915050565b6001546001600160a01b031690565b612106613d5d565b60006121106120ef565b905081156122b5576000816001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561216757600080fd5b505afa15801561217b573d6000803e3d6000fd5b505050506040513d602081101561219157600080fd5b5051905080156122b357816001600160a01b031663bfc77beb83846001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156121e457600080fd5b505afa1580156121f8573d6000803e3d6000fd5b505050506040513d602081101561220e57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820185905251606480830192600092919082900301818387803b15801561226657600080fd5b505af115801561227a573d6000803e3d6000fd5b50506040805184815290517f8f9ec2c1cf1f95fcb5d89d3141949092850c5cfe04da4d9425dd840bf18cdc709350908190036020019150a15b505b806001600160a01b0316634ef0762e6122cc6125d9565b6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561230b57600080fd5b505af115801561231f573d6000803e3d6000fd5b5050505061232b612969565b6001600160a01b03166380d57063836040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561237257600080fd5b505af1158015612386573d6000803e3d6000fd5b505050506123926123f5565b6001600160a01b03166380d57063836040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b1580156123d957600080fd5b505af11580156123ed573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6124463361332c565b60006124506130c0565b6001600160a01b0316146124955760405162461bcd60e51b8152600401808060200182810382526033815260200180615bf16033913960400191505060405180910390fd5b606061249f6120ef565b604080516001600160a01b0390921660248084019190915281518084039091018152604490920190526020810180516001600160e01b031663066ad14f60e21b179052905060006124ee611e52565b6001600160a01b0316630c0872f5836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612549578181015183820152602001612531565b50505050905090810190601f1680156125765780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561259557600080fd5b505af11580156125a9573d6000803e3d6000fd5b505050506040513d60208110156125bf57600080fd5b505190506125cc81614056565b6125d58161401b565b5050565b6000546001600160a01b031690565b6125f0613d5d565b611ad4614507565b6060612605610cd86132e8565b61260d611e1e565b6001600160a01b0316638c500ea38686868660405180838380828437808301925050509250505060405180910390206040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160e01b0319168152602001828152602001935050505060206040518083038186803b15801561269157600080fd5b505afa1580156126a5573d6000803e3d6000fd5b505050506040513d60208110156126bb57600080fd5b505161270e576040805162461bcd60e51b815260206004820181905260248201527f7661756c7443616c6c4f6e436f6e74726163743a204e6f7420616c6c6f776564604482015290519081900360640190fd5b6127166120ef565b6001600160a01b031663a90cce4b8686868660405160200180846001600160e01b03191681526004018383808284378083019250505093505050506040516020818303038152906040526040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156127bb5781810151838201526020016127a3565b50505050905090810190601f1680156127e85780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561280857600080fd5b505af115801561281c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561284557600080fd5b8101908080516040519392919084600160201b82111561286457600080fd5b90830190602082018581111561287957600080fd5b8251600160201b81118282018810171561289257600080fd5b82525081516020918201929091019080838360005b838110156128bf5781810151838201526020016128a7565b50505050905090810190601f1680156128ec5780820380516001836020036101000a031916815260200191505b506040525050509050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000806129986120ef565b90506060816001600160a01b031663c4b973706040518163ffffffff1660e01b815260040160006040518083038186803b1580156129d557600080fd5b505afa1580156129e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612a1257600080fd5b8101908080516040519392919084600160201b821115612a3157600080fd5b908301906020820185811115612a4657600080fd5b82518660208202830111600160201b82111715612a6257600080fd5b82525081516020918201928201910280838360005b83811015612a8f578181015183820152602001612a77565b5050505090500160405250505090506060826001600160a01b031663b8b7f1476040518163ffffffff1660e01b815260040160006040518083038186803b158015612ad957600080fd5b505afa158015612aed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612b1657600080fd5b8101908080516040519392919084600160201b821115612b3557600080fd5b908301906020820185811115612b4a57600080fd5b82518660208202830111600160201b82111715612b6657600080fd5b82525081516020918201928201910280838360005b83811015612b93578181015183820152602001612b7b565b50505050905001604052505050905081516000148015612bb257508051155b15612bc35760009350505050611ba4565b8415612c7e57612bd1610ca8565b6001600160a01b0316637620630584846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612c3f578181015183820152602001612c27565b505050509050019350505050600060405180830381600087803b158015612c6557600080fd5b505af1158015612c79573d6000803e3d6000fd5b505050505b6060825167ffffffffffffffff81118015612c9857600080fd5b50604051908082528060200260200182016040528015612cc2578160200160208202803683370190505b50905060005b8351811015612e2757838181518110612cdd57fe5b60200260200101516001600160a01b03166370a08231866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612d3157600080fd5b505afa158015612d45573d6000803e3d6000fd5b505050506040513d6020811015612d5b57600080fd5b50518251839083908110612d6b57fe5b602002602001018181525050846001600160a01b0316639185349a858381518110612d9257fe5b6020026020010151848481518110612da657fe5b6020026020010151886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b03168152602001935050505060006040518083038186803b158015612e0357600080fd5b505afa158015612e17573d6000803e3d6000fd5b505060019092019150612cc89050565b50612e30611ba9565b6001600160a01b031663ae6f52ad8483612e486125d9565b6040518463ffffffff1660e01b8152600401808060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019060200280838360005b83811015612eaa578181015183820152602001612e92565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015612ee9578181015183820152602001612ed1565b5050505090500195505050505050602060405180830381600087803b158015612f1157600080fd5b505af1158015612f25573d6000803e3d6000fd5b505050506040513d6020811015612f3b57600080fd5b5051825190955015612f8a5760005b8251811015612f88576000612f71848381518110612f6457fe5b6020026020010151614700565b9050612f7d8782614c7c565b965050600101612f4a565b505b50505050919050565b612f9c3361332c565b60048054604080516305fd8c7160e41b815290516001600160a01b0390921692635fd8c71092828201926000929082900301818387803b158015612fdf57600080fd5b505af1158015612ff3573d6000803e3d6000fd5b50506001546001600160a01b03169150634ef0762e90506130126112cf565b6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561305157600080fd5b505af1158015613065573d6000803e3d6000fd5b5050600480546001600160a01b03191690555050604080516000815290517f66756eda85190d0bcec058815fd7e2154167d102e21d96cab701630af02f24739181900360200190a1565b611ae76130ba6120ef565b8261325e565b6004546001600160a01b031690565b600154600090600160b01b900460ff161561321d576130ec612921565b6001600160a01b0316836001600160a01b0316141561316557600482600a81111561311357fe5b148061312a5750600682600a81111561312857fe5b145b806131405750600782600a81111561313e57fe5b145b80613157575060055b82600a81111561315557fe5b145b15613160575060015b61321d565b61316d612969565b6001600160a01b0316836001600160a01b031614156131b857600282600a81111561319457fe5b14806131ab5750600182600a8111156131a957fe5b145b8061315757506003613149565b6131c0611fa2565b6001600160a01b0316836001600160a01b0316141561321d57600982600a8111156131e757fe5b14806131fe5750600882600a8111156131fc57fe5b145b806132145750600a82600a81111561321257fe5b145b1561321d575060015b806132595760405162461bcd60e51b8152600401808060200182810382526033815260200180615d226033913960400191505060405180910390fd5b505050565b600061326982611b8a565b9050801580613288575061327b6112f3565b6132854283614cd6565b10155b80613297575061329783614d33565b613259576040805162461bcd60e51b815260206004820152601860248201527f53686172657320616374696f6e2074696d656c6f636b65640000000000000000604482015290519081900360640190fd5b60006018361080159061331357506132fe6119d8565b6001600160a01b0316336001600160a01b0316145b15613327575060131936013560601c610cca565b503390565b6133346120ef565b6001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561336c57600080fd5b505afa158015613380573d6000803e3d6000fd5b505050506040513d602081101561339657600080fd5b50516001600160a01b03828116911614611ae7576040805162461bcd60e51b815260206004820152601860248201527f4f6e6c792066756e64206f776e65722063616c6c61626c650000000000000000604482015290519081900360640190fd5b600154600160b81b900460ff1615611ad4576040805162461bcd60e51b815260206004820152600b60248201526a52652d656e7472616e636560a81b604482015290519081900360640190fd5b6000600182511161345757506001611ba4565b815160005b818110156134ce57600181015b828110156134c55784818151811061347d57fe5b60200260200101516001600160a01b031685838151811061349a57fe5b60200260200101516001600160a01b031614156134bd5760009350505050611ba4565b600101613469565b5060010161345c565b5060019392505050565b6000806134e5878761325e565b60008790506000816001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561353957600080fd5b505afa15801561354d573d6000803e3d6000fd5b505050506040513d602081101561356357600080fd5b505190506000198714156135795780935061357d565b8693505b600084116135bc5760405162461bcd60e51b8152600401808060200182810382526028815260200180615bc96028913960400191505060405180910390fd5b6135c888858888614e41565b6000826001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561361757600080fd5b505afa15801561362b573d6000803e3d6000fd5b505050506040513d602081101561364157600080fd5b5051905060001988141561365757809450613676565b818110156136765761367361366c8383614cd6565b8690614cd6565b94505b896001600160a01b031663d5c20fa26040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156136b157600080fd5b505af11580156136c5573d6000803e3d6000fd5b505050506000861180156136dc57506136dc611e42565b156136eb576136eb8a8761503d565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561372457600080fd5b505afa158015613738573d6000803e3d6000fd5b505050506040513d602081101561374e57600080fd5b505160408051633b9e9f0160e21b81526001600160a01b038c81166004830152602482018990529151929650908c169163ee7a7c049160448082019260009290919082900301818387803b1580156137a557600080fd5b505af11580156137b9573d6000803e3d6000fd5b505050505050509550959350505050565b6000826137d9575060006120e9565b828202828482816137e657fe5b0414611cd55760405162461bcd60e51b8152600401808060200182810382526021815260200180615c806021913960400191505060405180910390fd5b6000808211613879576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161388257fe5b049392505050565b606060006138966125d9565b905060008667ffffffffffffffff811180156138b157600080fd5b506040519080825280602002602001820160405280156138db578160200160208202803683370190505b50925060005b87811015613b465761390e8787838181106138f857fe5b9050602002013583614c7c90919063ffffffff16565b915061aaaa89898381811061391f57fe5b905060200201356001600160a01b03166001600160a01b0316141561394357613b3e565b61394b611ba9565b6001600160a01b0316634c67e10684613985612710610e558c8c8881811061396f57fe5b905060200201358b6137ca90919063ffffffff16565b8c8c8681811061399157fe5b905060200201356001600160a01b03166040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b031681526020019350505050602060405180830381600087803b1580156139f757600080fd5b505af1158015613a0b573d6000803e3d6000fd5b505050506040513d6020811015613a2157600080fd5b50518451859083908110613a3157fe5b6020026020010181815250506000848281518110613a4b57fe5b602002602001015111613a8f5760405162461bcd60e51b8152600401808060200182810382526038815260200180615b916038913960400191505060405180910390fd5b8a6001600160a01b031663495d753c8a8a84818110613aaa57fe5b905060200201356001600160a01b03168c878581518110613ac757fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015613b2557600080fd5b505af1158015613b39573d6000803e3d6000fd5b505050505b6001016138e1565b506127108114613b875760405162461bcd60e51b815260040180806020018281038252603b815260200180615ac3603b913960400191505060405180910390fd5b5050979650505050505050565b613b9c6123f5565b6001600160a01b0316630442bad530600389898989898960405160200180876001600160a01b03168152602001866001600160a01b031681526020018581526020018060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b83811015613c24578181015183820152602001613c0c565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015613c63578181015183820152602001613c4b565b50505050905001985050505050505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836009811115613cb157fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613cef578181015183820152602001613cd7565b50505050905090810190601f168015613d1c5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015613d3d57600080fd5b505af1158015613d51573d6000803e3d6000fd5b50505050505050505050565b613d65611e1e565b6001600160a01b0316336001600160a01b031614611ad4576040805162461bcd60e51b815260206004820152601a60248201527f4f6e6c792046756e644465706c6f7965722063616c6c61626c65000000000000604482015290519081900360640190fd5b600154600160b01b900460ff1615611ad4576040805162461bcd60e51b815260206004820152601860248201527f5661756c7420616374696f6e2072652d656e7472616e63650000000000000000604482015290519081900360640190fd5b606080613e36858461520c565b9050835160001415613e49579050611cd5565b6060845167ffffffffffffffff81118015613e6357600080fd5b50604051908082528060200260200182016040528015613e8d578160200160208202803683370190505b5090506000805b8651811015613ef457613ec3878281518110613eac57fe5b60200260200101518561539890919063ffffffff16565b613eec576001838281518110613ed557fe5b911515602092830291909101909101526001909101905b600101613e94565b5080613f0557829350505050611cd5565b8251613f119082614c7c565b67ffffffffffffffff81118015613f2757600080fd5b50604051908082528060200260200182016040528015613f51578160200160208202803683370190505b50935060005b8351811015613fa057838181518110613f6c57fe5b6020026020010151858281518110613f8057fe5b6001600160a01b0390921660209283029190910190910152600101613f57565b50825160005b875181101561400f57838181518110613fbb57fe5b60200260200101511561400757878181518110613fd457fe5b6020026020010151868381518110613fe857fe5b6001600160a01b03909216602092830291909101909101526001909101905b600101613fa6565b50505050509392505050565b806001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611b6f57600080fd5b600480546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f66756eda85190d0bcec058815fd7e2154167d102e21d96cab701630af02f24739181900360200190a150565b6140b26130c0565b6001600160a01b0316336001600160a01b031614611ad45760405162461bcd60e51b8152600401808060200182810382526021815260200180615e0e6021913960400191505060405180910390fd5b600061410b6133f7565b6001805460ff60b81b1916600160b81b179055614126613dca565b6001805460ff60b01b1916600160b01b179055836141755760405162461bcd60e51b815260040180806020018281038252602a815260200180615cc7602a913960400191505060405180910390fd5b600061417f6120ef565b9050831580614194575061419281614d33565b155b6141cf5760405162461bcd60e51b8152600401808060200182810382526031815260200180615cf16031913960400191505060405180910390fd5b60006141db600161298d565b90506141e88888836153ee565b816001600160a01b031663d5c20fa26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561422357600080fd5b505af1158015614237573d6000803e3d6000fd5b50505050614243611e42565b1561425257614252828261503d565b600061426761425f6125d9565b86858b6154d3565b905060006142a883856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561201857600080fd5b905060006142c282610e5585670de0b6b3a76400006137ca565b90506000856001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561431357600080fd5b505afa158015614327573d6000803e3d6000fd5b505050506040513d602081101561433d57600080fd5b5051604080516329460cc560e11b81526001600160a01b038f811660048301526024820186905291519293509088169163528c198a9160448082019260009290919082900301818387803b15801561439457600080fd5b505af11580156143a8573d6000803e3d6000fd5b505050506143b88c8584886155c1565b61443b81876001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561440957600080fd5b505afa15801561441d573d6000803e3d6000fd5b505050506040513d602081101561443357600080fd5b505190614cd6565b96508987101561447c5760405162461bcd60e51b8152600401808060200182810382526031815260200180615afe6031913960400191505060405180910390fd5b881561449e576001600160a01b038c1660009081526003602052604090204290555b604080518581526020810184905280820189905290516001600160a01b038e16917f849165c18b9d0fb161bcb145e4ab523d350e5c98f1dbbb1960331e7ee3ca6767919081900360600190a25050505050506001805461ffff60b01b1916905595945050505050565b600154600160a01b900460ff16156145505760405162461bcd60e51b8152600401808060200182810382526026815260200180615ca16026913960400191505060405180910390fd5b30ff5b60008061455e6125d9565b9050600061460b84876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561459f57600080fd5b505afa1580156145b3573d6000803e3d6000fd5b505050506040513d60208110156145c957600080fd5b50516040805163313ce56760e01b815290516001600160a01b0387169163313ce567916004808301926020929190829003018186803b15801561208457600080fd5b90506000614625670de0b6b3a7640000610e5584896137ca565b905061462f611ba9565b6001600160a01b0316634c67e10684836146476128fd565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b031681526020019350505050602060405180830381600087803b15801561469d57600080fd5b505af11580156146b1573d6000803e3d6000fd5b505050506040513d60208110156146c757600080fd5b5051979650505050505050565b6000826146e2575080611cd5565b6146f883610e5586670de0b6b3a76400006137ca565b949350505050565b6000606080836001600160a01b03166380daddb86040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561474057600080fd5b505af1158015614754573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561477d57600080fd5b8101908080516040519392919084600160201b82111561479c57600080fd5b9083019060208201858111156147b157600080fd5b82518660208202830111600160201b821117156147cd57600080fd5b82525081516020918201928201910280838360005b838110156147fa5781810151838201526020016147e2565b5050505090500160405260200180516040519392919084600160201b82111561482257600080fd5b90830190602082018581111561483757600080fd5b82518660208202830111600160201b8211171561485357600080fd5b82525081516020918201928201910280838360005b83811015614880578181015183820152602001614868565b5050505090500160405250505091509150600061489b611ba9565b6001600160a01b031663ae6f52ad84846148b36125d9565b6040518463ffffffff1660e01b8152600401808060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019060200280838360005b838110156149155781810151838201526020016148fd565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561495457818101518382015260200161493c565b5050505090500195505050505050602060405180830381600087803b15801561497c57600080fd5b505af1158015614990573d6000803e3d6000fd5b505050506040513d60208110156149a657600080fd5b505160408051633b35962d60e21b8152905191925060609182916001600160a01b0389169163ecd658b49160048082019260009290919082900301818387803b1580156149f257600080fd5b505af1158015614a06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015614a2f57600080fd5b8101908080516040519392919084600160201b821115614a4e57600080fd5b908301906020820185811115614a6357600080fd5b82518660208202830111600160201b82111715614a7f57600080fd5b82525081516020918201928201910280838360005b83811015614aac578181015183820152602001614a94565b5050505090500160405260200180516040519392919084600160201b821115614ad457600080fd5b908301906020820185811115614ae957600080fd5b82518660208202830111600160201b82111715614b0557600080fd5b82525081516020918201928201910280838360005b83811015614b32578181015183820152602001614b1a565b50505050905001604052505050915091506000614b4d611ba9565b6001600160a01b031663ae6f52ad8484614b656125d9565b6040518463ffffffff1660e01b8152600401808060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019060200280838360005b83811015614bc7578181015183820152602001614baf565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015614c06578181015183820152602001614bee565b5050505090500195505050505050602060405180830381600087803b158015614c2e57600080fd5b505af1158015614c42573d6000803e3d6000fd5b505050506040513d6020811015614c5857600080fd5b5051905080841115614c7157614c6e8482614cd6565b96505b505050505050919050565b600082820183811015611cd5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115614d2d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000614d3d612945565b6001600160a01b031663d0449d3d836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614d8957600080fd5b505afa158015614d9d573d6000803e3d6000fd5b505050506040513d6020811015614db357600080fd5b5051806120e95750614dc3611e1e565b6001600160a01b0316636c579e57836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614e0f57600080fd5b505afa158015614e23573d6000803e3d6000fd5b505050506040513d6020811015614e3957600080fd5b505192915050565b614e49613dca565b6001805460ff60b01b1916600160b01b179055614e64612969565b604080516001600160a01b038781166020830152818301879052851515606080840191909152835180840390910181526080830193849052631dd6705960e21b9093529290921691637759c1649160039185906084018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614f00578181015183820152602001614ee8565b50505050905090810190601f168015614f2d5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015614f4e57600080fd5b505af1925050508015614f5f575060015b61502a573d808015614f8d576040519150601f19603f3d011682016040523d82523d6000602084013e614f92565b606091505b50846001600160a01b0316816040518082805190602001908083835b60208310614fcd5780518252601f199092019160209182019101614fae565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208b835293519395507fb3ea7e5141baf21804d12f5a635e83e0cb869c8b06b88648364769f85aa73fc294509083900301919050a3505b50506001805460ff60b01b191690555050565b6000826001600160a01b03166370a08231615056612419565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561509357600080fd5b505afa1580156150a7573d6000803e3d6000fd5b505050506040513d60208110156150bd57600080fd5b5051905060006150ce848385614553565b9050836001600160a01b0316631ff46bfa8383866040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561512657600080fd5b505af1925050508015615137575060015b615206573d808015615165576040519150601f19603f3d011682016040523d82523d6000602084013e61516a565b606091505b50806040518082805190602001908083835b6020831061519b5780518252601f19909201916020918201910161517c565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208983529082018890528184018a905292519294507f0917b727c8497d0fc305acafacb424e8c9b12715d2b9b19bee777ef9d134f08f935060609083900301919050a2505b50505050565b606081516000141561521f5750816120e9565b6060835167ffffffffffffffff8111801561523957600080fd5b50604051908082528060200260200182016040528015615263578160200160208202803683370190505b50845190915060005b85518110156152c5576152928587838151811061528557fe5b6020026020010151615398565b156152bd5760018382815181106152a557fe5b91151560209283029190910190910152600019909101905b60010161526c565b5084518114156152d757849250615390565b8015615390578067ffffffffffffffff811180156152f457600080fd5b5060405190808252806020026020018201604052801561531e578160200160208202803683370190505b5092506000805b865181101561538d5783818151811061533a57fe5b60200260200101516153855786818151811061535257fe5b602002602001015185838151811061536657fe5b6001600160a01b03909216602092830291909101909101526001909101905b600101615325565b50505b505092915050565b6000805b83518110156153e4578381815181106153b157fe5b60200260200101516001600160a01b0316836001600160a01b031614156153dc5760019150506120e9565b60010161539c565b5060009392505050565b6153f6612969565b604080516001600160a01b0386811660208301528183018690528251808303840181526060830193849052631dd6705960e21b9093529290921691637759c1649160019185906064018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561548557818101518382015260200161546d565b50505050905090810190601f1680156154b25780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610b1e57600080fd5b600080856001600160a01b03166370a08231856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561552357600080fd5b505afa158015615537573d6000803e3d6000fd5b505050506040513d602081101561554d57600080fd5b505190506155666001600160a01b0387168686866157ec565b6155b781876001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561440957600080fd5b9695505050505050565b60006155cd8285614c7c565b90506155d7612969565b604080516001600160a01b0388811660208301528183018890526060808301889052835180840390910181526080830193849052631dd6705960e21b9093529290921691637759c1649160029185906084018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561566f578181015183820152602001615657565b50505050905090810190601f16801561569c5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156156bd57600080fd5b505af11580156156d1573d6000803e3d6000fd5b505050506156dd6123f5565b604080516001600160a01b0388811660208301528183018890526060820187905260808083018690528351808403909101815260a0830193849052630442bad560e01b9093523060a483018181529490911693630442bad5939192600092919060c40183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561577f578181015183820152602001615767565b50505050905090810190601f1680156157ac5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156157cd57600080fd5b505af11580156157e1573d6000803e3d6000fd5b505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526152069085906060615896826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166158f29092919063ffffffff16565b805190915015613259578080602001905160208110156158b557600080fd5b50516132595760405162461bcd60e51b815260040180806020018281038252602a815260200180615de4602a913960400191505060405180910390fd5b60606146f884846000858561590685615a18565b615957576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106159965780518252601f199092019160209182019101615977565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146159f8576040519150601f19603f3d011682016040523d82523d6000602084013e6159fd565b606091505b5091509150615a0d828286615a1e565b979650505050505050565b3b151590565b60608315615a2d575081611cd5565b825115615a3d5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615a87578181015183820152602001615a6f565b50505050905090810190601f168015615ab45780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5f5f7061796f7574537065636966696564417373657450657263656e74616765733a2050657263656e7473206d75737420746f74616c20313030255f5f6275795368617265733a20536861726573207265636569766564203c205f6d696e5368617265735175616e7469747972656465656d536861726573466f7253706563696669634173736574733a20556e657175616c2061727261797372656465656d536861726573466f7253706563696669634173736574733a204475706c6963617465207061796f75742061737365745f5f7061796f7574537065636966696564417373657450657263656e74616765733a205a65726f20616d6f756e7420666f722061737365745f5f72656465656d53686172657353657475703a204e6f2073686172657320746f2072656465656d6465706c6f7947617352656c61795061796d61737465723a205061796d617374657220616c7265616479206465706c6f79656463616c6c4f6e457874656e73696f6e3a205f657874656e73696f6e20696e76616c696472656465656d536861726573496e4b696e643a205f6164646974696f6e616c41737365747320636f6e7461696e73206475706c696361746573536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775f5f73656c6644657374727563743a204f6e6c792064656c65676174652063616c6c61626c655f5f6275795368617265733a205f6d696e5368617265735175616e74697479206d757374206265203e305f5f6275795368617265733a2050656e64696e67206d6967726174696f6e206f72207265636f6e66696775726174696f6e5f5f6173736572745065726d697373696f6e65645661756c74416374696f6e3a20416374696f6e206e6f7420616c6c6f7765647072655472616e73666572536861726573486f6f6b3a204f6e6c79205661756c7450726f78792063616c6c61626c656275794261636b50726f746f636f6c4665655368617265733a20556e617574686f72697a65647065726d697373696f6e65645661756c74416374696f6e3a2043616e6e6f7420756e747261636b2064656e6f6d696e6174696f6e2061737365745361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644f6e6c79204761732052656c6179205061796d61737465722063616c6c61626c6572656465656d536861726573496e4b696e643a205f617373657473546f536b697020636f6e7461696e73206475706c696361746573a26469706673582212201481343778e8ecfce9de1297ba38d6762c32c750a635102a997880e1c337c31864736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c8063ac25945611610146578063e269c3d6116100c3578063ebb3d58911610087578063ebb3d589146109a6578063f2d63826146109ae578063f513c926146109b6578063f9005af3146109d5578063f9d5fe78146109dd578063faf9096b14610a035761025e565b8063e269c3d614610884578063e53a73b91461088c578063e572ced114610894578063e70e605e14610996578063e7c456901461099e5761025e565b8063c98091871161010a578063c980918714610845578063ce5e84a31461084d578063d44ad6cb1461086c578063da41962e14610874578063db69681f1461087c5761025e565b8063ac259456146107d6578063b10ea2b0146107de578063b3fc38e9146107fb578063b417061214610803578063beebc5da146108225761025e565b80636af8e7eb116101df5780637f20170d116101a35780637f20170d1461072f578063875fb4b314610755578063877fd8941461075d57806392b575b61461078f57806397c0ac87146107b2578063a01fd157146107ba5761025e565b80636af8e7eb146105705780636ea21143146106dc578063716d4da4146106e457806373eecf47146106ec57806379951f0f146107125761025e565b8063397bfe5511610226578063397bfe5514610479578063399ae7241461049f57806339bf70d1146104cb5780634c252f911461054e5780634da471b7146105565761025e565b806310acd06d1461026357806312f20526146102dd5780631ce733c8146103135780632dc7a3a0146103375780633462fcc114610356575b600080fd5b6102db6004803603604081101561027957600080fd5b60ff8235169190810190604081016020820135600160201b81111561029d57600080fd5b8201836020820111156102af57600080fd5b803590602001918460018302840111600160201b831117156102d057600080fd5b509092509050610a0b565b005b6102db600480360360608110156102f357600080fd5b506001600160a01b03813581169160208101359091169060400135610b3b565b61031b610ca8565b604080516001600160a01b039092168252519081900360200190f35b6102db6004803603602081101561034d57600080fd5b50351515610ccd565b6104296004803603608081101561036c57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561039b57600080fd5b8201836020820111156103ad57600080fd5b803590602001918460208302840111600160201b831117156103ce57600080fd5b919390929091602081019035600160201b8111156103eb57600080fd5b8201836020820111156103fd57600080fd5b803590602001918460208302840111600160201b8311171561041e57600080fd5b509092509050610d30565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561046557818101518382015260200161044d565b505050509050019250505060405180910390f35b6102db6004803603602081101561048f57600080fd5b50356001600160a01b0316610f86565b6102db600480360360408110156104b557600080fd5b506001600160a01b038135169060200135610fe2565b6102db600480360360608110156104e157600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561051057600080fd5b82018360208201111561052257600080fd5b803590602001918460018302840111600160201b8311171561054357600080fd5b50909250905061113e565b61031b6112cf565b61055e6112f3565b60408051918252519081900360200190f35b6106436004803603608081101561058657600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156105b557600080fd5b8201836020820111156105c757600080fd5b803590602001918460208302840111600160201b831117156105e857600080fd5b919390929091602081019035600160201b81111561060557600080fd5b82018360208201111561061757600080fd5b803590602001918460208302840111600160201b8311171561063857600080fd5b5090925090506112f9565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561068757818101518382015260200161066f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156106c65781810151838201526020016106ae565b5050505090500194505050505060405180910390f35b61031b6119d8565b6102db611ab9565b6102db6004803603602081101561070257600080fd5b50356001600160a01b0316611ad6565b6102db6004803603602081101561072857600080fd5b5035611aea565b61055e6004803603602081101561074557600080fd5b50356001600160a01b0316611b8a565b61031b611ba9565b61055e6004803603606081101561077357600080fd5b506001600160a01b038135169060208101359060400135611bcd565b6102db600480360360408110156107a557600080fd5b5080359060200135611cdc565b61031b611e1e565b6107c2611e42565b604080519115158252519081900360200190f35b61031b611e52565b6102db600480360360208110156107f457600080fd5b5035611e76565b61031b611fa2565b61055e6004803603602081101561081957600080fd5b50351515611fc6565b61055e6004803603604081101561083857600080fd5b50803590602001356120bb565b61031b6120ef565b6102db6004803603602081101561086357600080fd5b503515156120fe565b61031b6123f5565b61031b612419565b6102db61243d565b61031b6125d9565b6102db6125e8565b610921600480360360608110156108aa57600080fd5b6001600160a01b03823516916001600160e01b031960208201351691810190606081016040820135600160201b8111156108e357600080fd5b8201836020820111156108f557600080fd5b803590602001918460018302840111600160201b8311171561091657600080fd5b5090925090506125f8565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561095b578181015183820152602001610943565b50505050905090810190601f1680156109885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61031b6128fd565b61031b612921565b61031b612945565b61031b612969565b61055e600480360360208110156109cc57600080fd5b5035151561298d565b6102db612f93565b6102db600480360360208110156109f357600080fd5b50356001600160a01b03166130af565b61031b6130c0565b610a1533846130cf565b600683600a811115610a2357fe5b1415610a9257610a316125d9565b6001600160a01b031682826020811015610a4a57600080fd5b50356001600160a01b03161415610a925760405162461bcd60e51b815260040180806020018281038252603a815260200180615daa603a913960400191505060405180910390fd5b610a9a6120ef565b6001600160a01b03166324e600128484846040518463ffffffff1660e01b81526004018084600a811115610aca57fe5b8152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b50505050505050565b6000610b456120ef565b9050336001600160a01b03821614610b8e5760405162461bcd60e51b815260040180806020018281038252602f815260200180615d55602f913960400191505060405180910390fd5b610b98818561325e565b610ba06123f5565b604080516001600160a01b038781166020830152868116828401526060808301879052835180840390910181526080830193849052630442bad560e01b90935230608483018181529490911693630442bad5939192600292919060a40183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610c3c578181015183820152602001610c24565b50505050905090810190601f168015610c695780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b5050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000005b90565b610cdd610cd86132e8565b61332c565b60018054821515600160a81b810260ff60a81b199092169190911790915560408051918252517f8ccd4cc3a51ed6f61f2b34b8d0a1ac137376931714380a7702b410ed174d6a739181900360200190a150565b6060610d3a6133f7565b6001805460ff60b81b1916600160b81b1790556000610d576132e8565b9050848314610d975760405162461bcd60e51b815260040180806020018281038252602d815260200180615b2f602d913960400191505060405180910390fd5b610dd386868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344492505050565b610e0e5760405162461bcd60e51b8152600401808060200182810382526035815260200180615b5c6035913960400191505060405180910390fd5b6000610e1a600161298d565b90506000610e266120ef565b9050600080610e3983868d6001886134d8565b9092509050610e60838d8c8c8c8c610e5b88610e558d8c6137ca565b90613823565b61388a565b9550610ea5858d848d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508b9150613b949050565b8b6001600160a01b0316856001600160a01b03167fbf88879a1555e4d7d38ebeffabce61fdf5e12ea0468abf855a72ec17b432bed5848d8d8b60405180858152602001806020018060200183810383528686828181526020019250602002808284376000838201819052601f909101601f1916909201858103845286518152865160209182019382890193509102908190849084905b83811015610f53578181015183820152602001610f3b565b50505050905001965050505050505060405180910390a350505050506001805460ff60b81b191690559695505050505050565b610f8e613d5d565b600180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f5be181178e61e61e33f79c396c7194b8f3c80f77899da7bd96fe537411300bcb9181900360200190a150565b6000610fec6125d9565b6001600160a01b031614611047576040805162461bcd60e51b815260206004820152601960248201527f696e69743a20416c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b61104f611ba9565b6001600160a01b031663c496f8e8836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561109b57600080fd5b505afa1580156110af573d6000803e3d6000fd5b505050506040513d60208110156110c557600080fd5b5051611118576040805162461bcd60e51b815260206004820152601c60248201527f696e69743a204261642064656e6f6d696e6174696f6e20617373657400000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b039390931692909217909155600255565b6111466133f7565b6001805460ff60b81b1916600160b81b179055611161613dca565b6001805460ff60b01b1916600160b01b17905561117c612969565b6001600160a01b0316846001600160a01b031614806111b3575061119e612921565b6001600160a01b0316846001600160a01b0316145b806111d657506111c1611fa2565b6001600160a01b0316846001600160a01b0316145b6112115760405162461bcd60e51b8152600401808060200182810382526023815260200180615c246023913960400191505060405180910390fd5b836001600160a01b0316631bee801e6112286132e8565b8585856040518563ffffffff1660e01b815260040180856001600160a01b03168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b50506001805461ffff60b01b19169055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60025490565b6060806113046133f7565b6001805460ff60b81b1916600160b81b17905560006113216132e8565b905061135f87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344492505050565b61139a5760405162461bcd60e51b8152600401808060200182810382526039815260200180615c476039913960400191505060405180910390fd5b6113d685858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344492505050565b6114115760405162461bcd60e51b8152600401808060200182810382526035815260200180615e2f6035913960400191505060405180910390fd5b60015460408051630c4b973760e41b81529051611580926001600160a01b03169163c4b97370916004808301926000929190829003018186803b15801561145757600080fd5b505afa15801561146b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561149457600080fd5b8101908080516040519392919084600160201b8211156114b357600080fd5b9083019060208201858111156114c857600080fd5b82518660208202830111600160201b821117156114e457600080fd5b82525081516020918201928201910280838360005b838110156115115781810151838201526020016114f9565b5050505090910160208d810282810182016040528e83529195508e94508d935083925085019084908082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092019190915250613e2992505050565b925061158a610ca8565b60015460408051637620630560e01b81526001600160a01b03928316600482018181526024830193845288516044840152885195909416946376206305949193899390916064909101906020808601910280838360005b838110156115f95781810151838201526020016115e1565b505050509050019350505050600060405180830381600087803b15801561161f57600080fd5b505af1158015611633573d6000803e3d6000fd5b505050506000611641611e42565b156116e957306001600160a01b031663f513c92660006040518263ffffffff1660e01b8152600401808215158152602001915050602060405180830381600087803b15801561168f57600080fd5b505af19250505080156116b457506040513d60208110156116af57600080fd5b505160015b6116e6576040517ff5939ff9a66cf6d21ec93b246060bc17f5c062847e28d967d3dd617636b238d490600090a16116e9565b90505b6001546000908190611707906001600160a01b0316858d84876134d8565b91509150855167ffffffffffffffff8111801561172357600080fd5b5060405190808252806020026020018201604052801561174d578160200160208202803683370190505b50945060005b86518110156118e2576117f782610e55858a858151811061177057fe5b602090810291909101810151600154604080516370a0823160e01b81526001600160a01b039283166004820152905191909216926370a082319260248082019391829003018186803b1580156117c557600080fd5b505afa1580156117d9573d6000803e3d6000fd5b505050506040513d60208110156117ef57600080fd5b5051906137ca565b86828151811061180357fe5b602002602001018181525050600086828151811061181d57fe5b602002602001015111156118da5760015487516001600160a01b039091169063495d753c9089908490811061184e57fe5b60200260200101518f89858151811061186357fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156118c157600080fd5b505af11580156118d5573d6000803e3d6000fd5b505050505b600101611753565b508b6001600160a01b0316846001600160a01b03167fbf88879a1555e4d7d38ebeffabce61fdf5e12ea0468abf855a72ec17b432bed5848989604051808481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561196557818101518382015260200161194d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156119a457818101518382015260200161198c565b505050509050019550505050505060405180910390a3505050506001805460ff60b81b191690559097909650945050505050565b60006119e2611e52565b6001600160a01b03166398a7c4c76040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1a57600080fd5b505afa158015611a2e573d6000803e3d6000fd5b505050506040513d6020811015611a4457600080fd5b505160408051637da0a87760e01b815290516001600160a01b0390921691637da0a87791600480820192602092909190829003018186803b158015611a8857600080fd5b505afa158015611a9c573d6000803e3d6000fd5b505050506040513d6020811015611ab257600080fd5b5051905090565b611ac4610cd86132e8565b611ad4611acf6130c0565b61401b565b565b611ade613d5d565b611ae781614056565b50565b611af26140aa565b611afa6120ef565b6001600160a01b031663495d753c611b106112cf565b611b186130c0565b846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015611b6f57600080fd5b505af1158015611b83573d6000803e3d6000fd5b5050505050565b6001600160a01b0381166000908152600360205260409020545b919050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000806000611bda6112f3565b1190506000611be76132e8565b9050811580611c725750611bf9611e1e565b6001600160a01b03166354391f09826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611c4557600080fd5b505afa158015611c59573d6000803e3d6000fd5b505050506040513d6020811015611c6f57600080fd5b50515b611cc3576040805162461bcd60e51b815260206004820152601f60248201527f6275795368617265734f6e426568616c663a20556e617574686f72697a656400604482015290519081900360640190fd5b611cd08686868585614101565b925050505b9392505050565b611ce4613d5d565b611cec613dca565b6001805460ff60b01b1916600160b01b179055611d076120ef565b6001600160a01b031663d5c20fa2826040518263ffffffff1660e01b8152600401600060405180830381600088803b158015611d4257600080fd5b5087f193505050508015611d54575060015b611d82576040517f8a7579328a911284dedef6a7e68bbb1eae7d59418f2699cb5a3c26f6e57e4d7790600090a15b611d8a612969565b6001600160a01b031663bd8e959a836040518263ffffffff1660e01b8152600401600060405180830381600088803b158015611dc557600080fd5b5087f193505050508015611dd7575060015b611e05576040517f681c534f5c2e473c9cc8ab1693257fb2b0e19a5c5ecd7d040201f1cf2a190c8790600090a15b611e0d614507565b50506001805460ff60b01b19169055565b7f000000000000000000000000000000000000000000000000000000000000000090565b600154600160a81b900460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001546001600160a01b03168063714ca2d1611e906132e8565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611ecd57600080fd5b505afa158015611ee1573d6000803e3d6000fd5b505050506040513d6020811015611ef757600080fd5b5051611f345760405162461bcd60e51b8152600401808060200182810382526026815260200180615d846026913960400191505060405180910390fd5b6000611f40600161298d565b9050816001600160a01b0316631ff46bfa84611f5d858786614553565b846040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b158015610b1e57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000090565b600080611fd28361298d565b9050611cd581611fe06120ef565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561201857600080fd5b505afa15801561202c573d6000803e3d6000fd5b505050506040513d602081101561204257600080fd5b505161204c6125d9565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561208457600080fd5b505afa158015612098573d6000803e3d6000fd5b505050506040513d60208110156120ae57600080fd5b505160ff16600a0a6146d4565b60008060006120c86112f3565b11905060006120d56132e8565b90506120e48186868585614101565b925050505b92915050565b6001546001600160a01b031690565b612106613d5d565b60006121106120ef565b905081156122b5576000816001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561216757600080fd5b505afa15801561217b573d6000803e3d6000fd5b505050506040513d602081101561219157600080fd5b5051905080156122b357816001600160a01b031663bfc77beb83846001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156121e457600080fd5b505afa1580156121f8573d6000803e3d6000fd5b505050506040513d602081101561220e57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820185905251606480830192600092919082900301818387803b15801561226657600080fd5b505af115801561227a573d6000803e3d6000fd5b50506040805184815290517f8f9ec2c1cf1f95fcb5d89d3141949092850c5cfe04da4d9425dd840bf18cdc709350908190036020019150a15b505b806001600160a01b0316634ef0762e6122cc6125d9565b6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561230b57600080fd5b505af115801561231f573d6000803e3d6000fd5b5050505061232b612969565b6001600160a01b03166380d57063836040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561237257600080fd5b505af1158015612386573d6000803e3d6000fd5b505050506123926123f5565b6001600160a01b03166380d57063836040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b1580156123d957600080fd5b505af11580156123ed573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6124463361332c565b60006124506130c0565b6001600160a01b0316146124955760405162461bcd60e51b8152600401808060200182810382526033815260200180615bf16033913960400191505060405180910390fd5b606061249f6120ef565b604080516001600160a01b0390921660248084019190915281518084039091018152604490920190526020810180516001600160e01b031663066ad14f60e21b179052905060006124ee611e52565b6001600160a01b0316630c0872f5836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612549578181015183820152602001612531565b50505050905090810190601f1680156125765780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561259557600080fd5b505af11580156125a9573d6000803e3d6000fd5b505050506040513d60208110156125bf57600080fd5b505190506125cc81614056565b6125d58161401b565b5050565b6000546001600160a01b031690565b6125f0613d5d565b611ad4614507565b6060612605610cd86132e8565b61260d611e1e565b6001600160a01b0316638c500ea38686868660405180838380828437808301925050509250505060405180910390206040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160e01b0319168152602001828152602001935050505060206040518083038186803b15801561269157600080fd5b505afa1580156126a5573d6000803e3d6000fd5b505050506040513d60208110156126bb57600080fd5b505161270e576040805162461bcd60e51b815260206004820181905260248201527f7661756c7443616c6c4f6e436f6e74726163743a204e6f7420616c6c6f776564604482015290519081900360640190fd5b6127166120ef565b6001600160a01b031663a90cce4b8686868660405160200180846001600160e01b03191681526004018383808284378083019250505093505050506040516020818303038152906040526040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156127bb5781810151838201526020016127a3565b50505050905090810190601f1680156127e85780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561280857600080fd5b505af115801561281c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561284557600080fd5b8101908080516040519392919084600160201b82111561286457600080fd5b90830190602082018581111561287957600080fd5b8251600160201b81118282018810171561289257600080fd5b82525081516020918201929091019080838360005b838110156128bf5781810151838201526020016128a7565b50505050905090810190601f1680156128ec5780820380516001836020036101000a031916815260200191505b506040525050509050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000806129986120ef565b90506060816001600160a01b031663c4b973706040518163ffffffff1660e01b815260040160006040518083038186803b1580156129d557600080fd5b505afa1580156129e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612a1257600080fd5b8101908080516040519392919084600160201b821115612a3157600080fd5b908301906020820185811115612a4657600080fd5b82518660208202830111600160201b82111715612a6257600080fd5b82525081516020918201928201910280838360005b83811015612a8f578181015183820152602001612a77565b5050505090500160405250505090506060826001600160a01b031663b8b7f1476040518163ffffffff1660e01b815260040160006040518083038186803b158015612ad957600080fd5b505afa158015612aed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612b1657600080fd5b8101908080516040519392919084600160201b821115612b3557600080fd5b908301906020820185811115612b4a57600080fd5b82518660208202830111600160201b82111715612b6657600080fd5b82525081516020918201928201910280838360005b83811015612b93578181015183820152602001612b7b565b50505050905001604052505050905081516000148015612bb257508051155b15612bc35760009350505050611ba4565b8415612c7e57612bd1610ca8565b6001600160a01b0316637620630584846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612c3f578181015183820152602001612c27565b505050509050019350505050600060405180830381600087803b158015612c6557600080fd5b505af1158015612c79573d6000803e3d6000fd5b505050505b6060825167ffffffffffffffff81118015612c9857600080fd5b50604051908082528060200260200182016040528015612cc2578160200160208202803683370190505b50905060005b8351811015612e2757838181518110612cdd57fe5b60200260200101516001600160a01b03166370a08231866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612d3157600080fd5b505afa158015612d45573d6000803e3d6000fd5b505050506040513d6020811015612d5b57600080fd5b50518251839083908110612d6b57fe5b602002602001018181525050846001600160a01b0316639185349a858381518110612d9257fe5b6020026020010151848481518110612da657fe5b6020026020010151886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b03168152602001935050505060006040518083038186803b158015612e0357600080fd5b505afa158015612e17573d6000803e3d6000fd5b505060019092019150612cc89050565b50612e30611ba9565b6001600160a01b031663ae6f52ad8483612e486125d9565b6040518463ffffffff1660e01b8152600401808060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019060200280838360005b83811015612eaa578181015183820152602001612e92565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015612ee9578181015183820152602001612ed1565b5050505090500195505050505050602060405180830381600087803b158015612f1157600080fd5b505af1158015612f25573d6000803e3d6000fd5b505050506040513d6020811015612f3b57600080fd5b5051825190955015612f8a5760005b8251811015612f88576000612f71848381518110612f6457fe5b6020026020010151614700565b9050612f7d8782614c7c565b965050600101612f4a565b505b50505050919050565b612f9c3361332c565b60048054604080516305fd8c7160e41b815290516001600160a01b0390921692635fd8c71092828201926000929082900301818387803b158015612fdf57600080fd5b505af1158015612ff3573d6000803e3d6000fd5b50506001546001600160a01b03169150634ef0762e90506130126112cf565b6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561305157600080fd5b505af1158015613065573d6000803e3d6000fd5b5050600480546001600160a01b03191690555050604080516000815290517f66756eda85190d0bcec058815fd7e2154167d102e21d96cab701630af02f24739181900360200190a1565b611ae76130ba6120ef565b8261325e565b6004546001600160a01b031690565b600154600090600160b01b900460ff161561321d576130ec612921565b6001600160a01b0316836001600160a01b0316141561316557600482600a81111561311357fe5b148061312a5750600682600a81111561312857fe5b145b806131405750600782600a81111561313e57fe5b145b80613157575060055b82600a81111561315557fe5b145b15613160575060015b61321d565b61316d612969565b6001600160a01b0316836001600160a01b031614156131b857600282600a81111561319457fe5b14806131ab5750600182600a8111156131a957fe5b145b8061315757506003613149565b6131c0611fa2565b6001600160a01b0316836001600160a01b0316141561321d57600982600a8111156131e757fe5b14806131fe5750600882600a8111156131fc57fe5b145b806132145750600a82600a81111561321257fe5b145b1561321d575060015b806132595760405162461bcd60e51b8152600401808060200182810382526033815260200180615d226033913960400191505060405180910390fd5b505050565b600061326982611b8a565b9050801580613288575061327b6112f3565b6132854283614cd6565b10155b80613297575061329783614d33565b613259576040805162461bcd60e51b815260206004820152601860248201527f53686172657320616374696f6e2074696d656c6f636b65640000000000000000604482015290519081900360640190fd5b60006018361080159061331357506132fe6119d8565b6001600160a01b0316336001600160a01b0316145b15613327575060131936013560601c610cca565b503390565b6133346120ef565b6001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561336c57600080fd5b505afa158015613380573d6000803e3d6000fd5b505050506040513d602081101561339657600080fd5b50516001600160a01b03828116911614611ae7576040805162461bcd60e51b815260206004820152601860248201527f4f6e6c792066756e64206f776e65722063616c6c61626c650000000000000000604482015290519081900360640190fd5b600154600160b81b900460ff1615611ad4576040805162461bcd60e51b815260206004820152600b60248201526a52652d656e7472616e636560a81b604482015290519081900360640190fd5b6000600182511161345757506001611ba4565b815160005b818110156134ce57600181015b828110156134c55784818151811061347d57fe5b60200260200101516001600160a01b031685838151811061349a57fe5b60200260200101516001600160a01b031614156134bd5760009350505050611ba4565b600101613469565b5060010161345c565b5060019392505050565b6000806134e5878761325e565b60008790506000816001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561353957600080fd5b505afa15801561354d573d6000803e3d6000fd5b505050506040513d602081101561356357600080fd5b505190506000198714156135795780935061357d565b8693505b600084116135bc5760405162461bcd60e51b8152600401808060200182810382526028815260200180615bc96028913960400191505060405180910390fd5b6135c888858888614e41565b6000826001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561361757600080fd5b505afa15801561362b573d6000803e3d6000fd5b505050506040513d602081101561364157600080fd5b5051905060001988141561365757809450613676565b818110156136765761367361366c8383614cd6565b8690614cd6565b94505b896001600160a01b031663d5c20fa26040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156136b157600080fd5b505af11580156136c5573d6000803e3d6000fd5b505050506000861180156136dc57506136dc611e42565b156136eb576136eb8a8761503d565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561372457600080fd5b505afa158015613738573d6000803e3d6000fd5b505050506040513d602081101561374e57600080fd5b505160408051633b9e9f0160e21b81526001600160a01b038c81166004830152602482018990529151929650908c169163ee7a7c049160448082019260009290919082900301818387803b1580156137a557600080fd5b505af11580156137b9573d6000803e3d6000fd5b505050505050509550959350505050565b6000826137d9575060006120e9565b828202828482816137e657fe5b0414611cd55760405162461bcd60e51b8152600401808060200182810382526021815260200180615c806021913960400191505060405180910390fd5b6000808211613879576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161388257fe5b049392505050565b606060006138966125d9565b905060008667ffffffffffffffff811180156138b157600080fd5b506040519080825280602002602001820160405280156138db578160200160208202803683370190505b50925060005b87811015613b465761390e8787838181106138f857fe5b9050602002013583614c7c90919063ffffffff16565b915061aaaa89898381811061391f57fe5b905060200201356001600160a01b03166001600160a01b0316141561394357613b3e565b61394b611ba9565b6001600160a01b0316634c67e10684613985612710610e558c8c8881811061396f57fe5b905060200201358b6137ca90919063ffffffff16565b8c8c8681811061399157fe5b905060200201356001600160a01b03166040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b031681526020019350505050602060405180830381600087803b1580156139f757600080fd5b505af1158015613a0b573d6000803e3d6000fd5b505050506040513d6020811015613a2157600080fd5b50518451859083908110613a3157fe5b6020026020010181815250506000848281518110613a4b57fe5b602002602001015111613a8f5760405162461bcd60e51b8152600401808060200182810382526038815260200180615b916038913960400191505060405180910390fd5b8a6001600160a01b031663495d753c8a8a84818110613aaa57fe5b905060200201356001600160a01b03168c878581518110613ac757fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015613b2557600080fd5b505af1158015613b39573d6000803e3d6000fd5b505050505b6001016138e1565b506127108114613b875760405162461bcd60e51b815260040180806020018281038252603b815260200180615ac3603b913960400191505060405180910390fd5b5050979650505050505050565b613b9c6123f5565b6001600160a01b0316630442bad530600389898989898960405160200180876001600160a01b03168152602001866001600160a01b031681526020018581526020018060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b83811015613c24578181015183820152602001613c0c565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015613c63578181015183820152602001613c4b565b50505050905001985050505050505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836009811115613cb157fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613cef578181015183820152602001613cd7565b50505050905090810190601f168015613d1c5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015613d3d57600080fd5b505af1158015613d51573d6000803e3d6000fd5b50505050505050505050565b613d65611e1e565b6001600160a01b0316336001600160a01b031614611ad4576040805162461bcd60e51b815260206004820152601a60248201527f4f6e6c792046756e644465706c6f7965722063616c6c61626c65000000000000604482015290519081900360640190fd5b600154600160b01b900460ff1615611ad4576040805162461bcd60e51b815260206004820152601860248201527f5661756c7420616374696f6e2072652d656e7472616e63650000000000000000604482015290519081900360640190fd5b606080613e36858461520c565b9050835160001415613e49579050611cd5565b6060845167ffffffffffffffff81118015613e6357600080fd5b50604051908082528060200260200182016040528015613e8d578160200160208202803683370190505b5090506000805b8651811015613ef457613ec3878281518110613eac57fe5b60200260200101518561539890919063ffffffff16565b613eec576001838281518110613ed557fe5b911515602092830291909101909101526001909101905b600101613e94565b5080613f0557829350505050611cd5565b8251613f119082614c7c565b67ffffffffffffffff81118015613f2757600080fd5b50604051908082528060200260200182016040528015613f51578160200160208202803683370190505b50935060005b8351811015613fa057838181518110613f6c57fe5b6020026020010151858281518110613f8057fe5b6001600160a01b0390921660209283029190910190910152600101613f57565b50825160005b875181101561400f57838181518110613fbb57fe5b60200260200101511561400757878181518110613fd457fe5b6020026020010151868381518110613fe857fe5b6001600160a01b03909216602092830291909101909101526001909101905b600101613fa6565b50505050509392505050565b806001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611b6f57600080fd5b600480546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f66756eda85190d0bcec058815fd7e2154167d102e21d96cab701630af02f24739181900360200190a150565b6140b26130c0565b6001600160a01b0316336001600160a01b031614611ad45760405162461bcd60e51b8152600401808060200182810382526021815260200180615e0e6021913960400191505060405180910390fd5b600061410b6133f7565b6001805460ff60b81b1916600160b81b179055614126613dca565b6001805460ff60b01b1916600160b01b179055836141755760405162461bcd60e51b815260040180806020018281038252602a815260200180615cc7602a913960400191505060405180910390fd5b600061417f6120ef565b9050831580614194575061419281614d33565b155b6141cf5760405162461bcd60e51b8152600401808060200182810382526031815260200180615cf16031913960400191505060405180910390fd5b60006141db600161298d565b90506141e88888836153ee565b816001600160a01b031663d5c20fa26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561422357600080fd5b505af1158015614237573d6000803e3d6000fd5b50505050614243611e42565b1561425257614252828261503d565b600061426761425f6125d9565b86858b6154d3565b905060006142a883856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561201857600080fd5b905060006142c282610e5585670de0b6b3a76400006137ca565b90506000856001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561431357600080fd5b505afa158015614327573d6000803e3d6000fd5b505050506040513d602081101561433d57600080fd5b5051604080516329460cc560e11b81526001600160a01b038f811660048301526024820186905291519293509088169163528c198a9160448082019260009290919082900301818387803b15801561439457600080fd5b505af11580156143a8573d6000803e3d6000fd5b505050506143b88c8584886155c1565b61443b81876001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561440957600080fd5b505afa15801561441d573d6000803e3d6000fd5b505050506040513d602081101561443357600080fd5b505190614cd6565b96508987101561447c5760405162461bcd60e51b8152600401808060200182810382526031815260200180615afe6031913960400191505060405180910390fd5b881561449e576001600160a01b038c1660009081526003602052604090204290555b604080518581526020810184905280820189905290516001600160a01b038e16917f849165c18b9d0fb161bcb145e4ab523d350e5c98f1dbbb1960331e7ee3ca6767919081900360600190a25050505050506001805461ffff60b01b1916905595945050505050565b600154600160a01b900460ff16156145505760405162461bcd60e51b8152600401808060200182810382526026815260200180615ca16026913960400191505060405180910390fd5b30ff5b60008061455e6125d9565b9050600061460b84876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561459f57600080fd5b505afa1580156145b3573d6000803e3d6000fd5b505050506040513d60208110156145c957600080fd5b50516040805163313ce56760e01b815290516001600160a01b0387169163313ce567916004808301926020929190829003018186803b15801561208457600080fd5b90506000614625670de0b6b3a7640000610e5584896137ca565b905061462f611ba9565b6001600160a01b0316634c67e10684836146476128fd565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b031681526020019350505050602060405180830381600087803b15801561469d57600080fd5b505af11580156146b1573d6000803e3d6000fd5b505050506040513d60208110156146c757600080fd5b5051979650505050505050565b6000826146e2575080611cd5565b6146f883610e5586670de0b6b3a76400006137ca565b949350505050565b6000606080836001600160a01b03166380daddb86040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561474057600080fd5b505af1158015614754573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561477d57600080fd5b8101908080516040519392919084600160201b82111561479c57600080fd5b9083019060208201858111156147b157600080fd5b82518660208202830111600160201b821117156147cd57600080fd5b82525081516020918201928201910280838360005b838110156147fa5781810151838201526020016147e2565b5050505090500160405260200180516040519392919084600160201b82111561482257600080fd5b90830190602082018581111561483757600080fd5b82518660208202830111600160201b8211171561485357600080fd5b82525081516020918201928201910280838360005b83811015614880578181015183820152602001614868565b5050505090500160405250505091509150600061489b611ba9565b6001600160a01b031663ae6f52ad84846148b36125d9565b6040518463ffffffff1660e01b8152600401808060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019060200280838360005b838110156149155781810151838201526020016148fd565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561495457818101518382015260200161493c565b5050505090500195505050505050602060405180830381600087803b15801561497c57600080fd5b505af1158015614990573d6000803e3d6000fd5b505050506040513d60208110156149a657600080fd5b505160408051633b35962d60e21b8152905191925060609182916001600160a01b0389169163ecd658b49160048082019260009290919082900301818387803b1580156149f257600080fd5b505af1158015614a06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015614a2f57600080fd5b8101908080516040519392919084600160201b821115614a4e57600080fd5b908301906020820185811115614a6357600080fd5b82518660208202830111600160201b82111715614a7f57600080fd5b82525081516020918201928201910280838360005b83811015614aac578181015183820152602001614a94565b5050505090500160405260200180516040519392919084600160201b821115614ad457600080fd5b908301906020820185811115614ae957600080fd5b82518660208202830111600160201b82111715614b0557600080fd5b82525081516020918201928201910280838360005b83811015614b32578181015183820152602001614b1a565b50505050905001604052505050915091506000614b4d611ba9565b6001600160a01b031663ae6f52ad8484614b656125d9565b6040518463ffffffff1660e01b8152600401808060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019060200280838360005b83811015614bc7578181015183820152602001614baf565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015614c06578181015183820152602001614bee565b5050505090500195505050505050602060405180830381600087803b158015614c2e57600080fd5b505af1158015614c42573d6000803e3d6000fd5b505050506040513d6020811015614c5857600080fd5b5051905080841115614c7157614c6e8482614cd6565b96505b505050505050919050565b600082820183811015611cd5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115614d2d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000614d3d612945565b6001600160a01b031663d0449d3d836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614d8957600080fd5b505afa158015614d9d573d6000803e3d6000fd5b505050506040513d6020811015614db357600080fd5b5051806120e95750614dc3611e1e565b6001600160a01b0316636c579e57836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614e0f57600080fd5b505afa158015614e23573d6000803e3d6000fd5b505050506040513d6020811015614e3957600080fd5b505192915050565b614e49613dca565b6001805460ff60b01b1916600160b01b179055614e64612969565b604080516001600160a01b038781166020830152818301879052851515606080840191909152835180840390910181526080830193849052631dd6705960e21b9093529290921691637759c1649160039185906084018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614f00578181015183820152602001614ee8565b50505050905090810190601f168015614f2d5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015614f4e57600080fd5b505af1925050508015614f5f575060015b61502a573d808015614f8d576040519150601f19603f3d011682016040523d82523d6000602084013e614f92565b606091505b50846001600160a01b0316816040518082805190602001908083835b60208310614fcd5780518252601f199092019160209182019101614fae565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208b835293519395507fb3ea7e5141baf21804d12f5a635e83e0cb869c8b06b88648364769f85aa73fc294509083900301919050a3505b50506001805460ff60b01b191690555050565b6000826001600160a01b03166370a08231615056612419565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561509357600080fd5b505afa1580156150a7573d6000803e3d6000fd5b505050506040513d60208110156150bd57600080fd5b5051905060006150ce848385614553565b9050836001600160a01b0316631ff46bfa8383866040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561512657600080fd5b505af1925050508015615137575060015b615206573d808015615165576040519150601f19603f3d011682016040523d82523d6000602084013e61516a565b606091505b50806040518082805190602001908083835b6020831061519b5780518252601f19909201916020918201910161517c565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208983529082018890528184018a905292519294507f0917b727c8497d0fc305acafacb424e8c9b12715d2b9b19bee777ef9d134f08f935060609083900301919050a2505b50505050565b606081516000141561521f5750816120e9565b6060835167ffffffffffffffff8111801561523957600080fd5b50604051908082528060200260200182016040528015615263578160200160208202803683370190505b50845190915060005b85518110156152c5576152928587838151811061528557fe5b6020026020010151615398565b156152bd5760018382815181106152a557fe5b91151560209283029190910190910152600019909101905b60010161526c565b5084518114156152d757849250615390565b8015615390578067ffffffffffffffff811180156152f457600080fd5b5060405190808252806020026020018201604052801561531e578160200160208202803683370190505b5092506000805b865181101561538d5783818151811061533a57fe5b60200260200101516153855786818151811061535257fe5b602002602001015185838151811061536657fe5b6001600160a01b03909216602092830291909101909101526001909101905b600101615325565b50505b505092915050565b6000805b83518110156153e4578381815181106153b157fe5b60200260200101516001600160a01b0316836001600160a01b031614156153dc5760019150506120e9565b60010161539c565b5060009392505050565b6153f6612969565b604080516001600160a01b0386811660208301528183018690528251808303840181526060830193849052631dd6705960e21b9093529290921691637759c1649160019185906064018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561548557818101518382015260200161546d565b50505050905090810190601f1680156154b25780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610b1e57600080fd5b600080856001600160a01b03166370a08231856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561552357600080fd5b505afa158015615537573d6000803e3d6000fd5b505050506040513d602081101561554d57600080fd5b505190506155666001600160a01b0387168686866157ec565b6155b781876001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561440957600080fd5b9695505050505050565b60006155cd8285614c7c565b90506155d7612969565b604080516001600160a01b0388811660208301528183018890526060808301889052835180840390910181526080830193849052631dd6705960e21b9093529290921691637759c1649160029185906084018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561566f578181015183820152602001615657565b50505050905090810190601f16801561569c5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156156bd57600080fd5b505af11580156156d1573d6000803e3d6000fd5b505050506156dd6123f5565b604080516001600160a01b0388811660208301528183018890526060820187905260808083018690528351808403909101815260a0830193849052630442bad560e01b9093523060a483018181529490911693630442bad5939192600092919060c40183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561577f578181015183820152602001615767565b50505050905090810190601f1680156157ac5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156157cd57600080fd5b505af11580156157e1573d6000803e3d6000fd5b505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526152069085906060615896826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166158f29092919063ffffffff16565b805190915015613259578080602001905160208110156158b557600080fd5b50516132595760405162461bcd60e51b815260040180806020018281038252602a815260200180615de4602a913960400191505060405180910390fd5b60606146f884846000858561590685615a18565b615957576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106159965780518252601f199092019160209182019101615977565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146159f8576040519150601f19603f3d011682016040523d82523d6000602084013e6159fd565b606091505b5091509150615a0d828286615a1e565b979650505050505050565b3b151590565b60608315615a2d575081611cd5565b825115615a3d5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615a87578181015183820152602001615a6f565b50505050905090810190601f168015615ab45780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5f5f7061796f7574537065636966696564417373657450657263656e74616765733a2050657263656e7473206d75737420746f74616c20313030255f5f6275795368617265733a20536861726573207265636569766564203c205f6d696e5368617265735175616e7469747972656465656d536861726573466f7253706563696669634173736574733a20556e657175616c2061727261797372656465656d536861726573466f7253706563696669634173736574733a204475706c6963617465207061796f75742061737365745f5f7061796f7574537065636966696564417373657450657263656e74616765733a205a65726f20616d6f756e7420666f722061737365745f5f72656465656d53686172657353657475703a204e6f2073686172657320746f2072656465656d6465706c6f7947617352656c61795061796d61737465723a205061796d617374657220616c7265616479206465706c6f79656463616c6c4f6e457874656e73696f6e3a205f657874656e73696f6e20696e76616c696472656465656d536861726573496e4b696e643a205f6164646974696f6e616c41737365747320636f6e7461696e73206475706c696361746573536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775f5f73656c6644657374727563743a204f6e6c792064656c65676174652063616c6c61626c655f5f6275795368617265733a205f6d696e5368617265735175616e74697479206d757374206265203e305f5f6275795368617265733a2050656e64696e67206d6967726174696f6e206f72207265636f6e66696775726174696f6e5f5f6173736572745065726d697373696f6e65645661756c74416374696f6e3a20416374696f6e206e6f7420616c6c6f7765647072655472616e73666572536861726573486f6f6b3a204f6e6c79205661756c7450726f78792063616c6c61626c656275794261636b50726f746f636f6c4665655368617265733a20556e617574686f72697a65647065726d697373696f6e65645661756c74416374696f6e3a2043616e6e6f7420756e747261636b2064656e6f6d696e6174696f6e2061737365745361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644f6e6c79204761732052656c6179205061796d61737465722063616c6c61626c6572656465656d536861726573496e4b696e643a205f617373657473546f536b697020636f6e7461696e73206475706c696361746573a26469706673582212201481343778e8ecfce9de1297ba38d6762c32c750a635102a997880e1c337c31864736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "activate(bool)": {
        "details": "No need to assert anything beyond FundDeployer access.",
        "params": {
          "_isMigration": "True if a migrated fund is being activated"
        }
      },
      "buyBackProtocolFeeShares(uint256)": {
        "params": {
          "_sharesAmount": "The amount of shares to buy back"
        }
      },
      "buyShares(uint256,uint256)": {
        "params": {
          "_investmentAmount": "The amount of the fund's denomination asset with which to buy shares",
          "_minSharesQuantity": "The minimum quantity of shares to buy"
        },
        "returns": {
          "sharesReceived_": "The actual amount of shares received"
        }
      },
      "buySharesOnBehalf(address,uint256,uint256)": {
        "details": "This function is freely callable if there is no sharesActionTimelock set, but it is limited to a list of trusted callers otherwise, in order to prevent a griefing attack where the caller buys shares for a _buyer, thereby resetting their lastSharesBought value.",
        "params": {
          "_buyer": "The account on behalf of whom to buy shares",
          "_investmentAmount": "The amount of the fund's denomination asset with which to buy shares",
          "_minSharesQuantity": "The minimum quantity of shares to buy"
        },
        "returns": {
          "sharesReceived_": "The actual amount of shares received"
        }
      },
      "calcGav(bool)": {
        "params": {
          "_finalizeAssets": "True if all assets must have exact final balances settled"
        },
        "returns": {
          "gav_": "The fund GAV"
        }
      },
      "calcGrossShareValue(bool)": {
        "details": "Does not account for any fees outstanding.",
        "params": {
          "_requireFinality": "True if all assets must have exact final balances settled"
        },
        "returns": {
          "grossShareValue_": "The amount of the denomination asset per share"
        }
      },
      "callOnExtension(address,uint256,bytes)": {
        "details": "Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy (for access control). Uses a mutex of sorts that allows \"permissioned vault actions\" during calls originating from this function.",
        "params": {
          "_actionId": "An ID representing the action to take on the extension (see extension)",
          "_callArgs": "The encoded data for the call",
          "_extension": "The Extension contract to call (e.g., FeeManager)"
        }
      },
      "destructActivated(uint256,uint256)": {
        "details": "No need to assert anything beyond FundDeployer access. Uses the try/catch pattern throughout out of an abundance of caution for the function's success. All external calls must use limited forwarded gas to ensure that a migration to another release does not get bricked by logic that consumes too much gas for the block limit.",
        "params": {
          "_deactivateFeeManagerGasLimit": "The amount of gas to forward to deactivate the FeeManager",
          "_payProtocolFeeGasLimit": "The amount of gas to forward to pay the protocol fee"
        }
      },
      "doesAutoProtocolFeeSharesBuyback()": {
        "returns": {
          "doesAutoBuyback_": "True if shares are automatically bought back"
        }
      },
      "getAssetFinalityResolver()": {
        "returns": {
          "assetFinalityResolver_": "The `ASSET_FINALITY_RESOLVER` variable value"
        }
      },
      "getDenominationAsset()": {
        "returns": {
          "denominationAsset_": "The `denominationAsset` variable value"
        }
      },
      "getDispatcher()": {
        "returns": {
          "dispatcher_": "The `DISPATCHER` variable value"
        }
      },
      "getExternalPositionManager()": {
        "returns": {
          "externalPositionManager_": "The `EXTERNAL_POSITION_MANAGER` variable value"
        }
      },
      "getFeeManager()": {
        "returns": {
          "feeManager_": "The `FEE_MANAGER` variable value"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getGasRelayPaymaster()": {
        "returns": {
          "gasRelayPaymaster_": "The `gasRelayPaymaster` variable value"
        }
      },
      "getGasRelayPaymasterFactory()": {
        "returns": {
          "gasRelayPaymasterFactory_": "The `GAS_RELAY_PAYMASTER_FACTORY` variable value"
        }
      },
      "getGasRelayTrustedForwarder()": {
        "returns": {
          "trustedForwarder_": "The trusted forwarder"
        }
      },
      "getIntegrationManager()": {
        "returns": {
          "integrationManager_": "The `INTEGRATION_MANAGER` variable value"
        }
      },
      "getLastSharesBoughtTimestampForAccount(address)": {
        "params": {
          "_who": "The account for which to get the timestamp"
        },
        "returns": {
          "lastSharesBoughtTimestamp_": "The timestamp of the last shares bought"
        }
      },
      "getMlnToken()": {
        "returns": {
          "mlnToken_": "The `MLN_TOKEN` variable value"
        }
      },
      "getPolicyManager()": {
        "returns": {
          "policyManager_": "The `POLICY_MANAGER` variable value"
        }
      },
      "getProtocolFeeReserve()": {
        "returns": {
          "protocolFeeReserve_": "The `PROTOCOL_FEE_RESERVE` variable value"
        }
      },
      "getSharesActionTimelock()": {
        "returns": {
          "sharesActionTimelock_": "The `sharesActionTimelock` variable value"
        }
      },
      "getValueInterpreter()": {
        "returns": {
          "valueInterpreter_": "The `VALUE_INTERPRETER` variable value"
        }
      },
      "getVaultProxy()": {
        "returns": {
          "vaultProxy_": "The `vaultProxy` variable value"
        }
      },
      "getWethToken()": {
        "returns": {
          "wethToken_": "The `WETH_TOKEN` variable value"
        }
      },
      "init(address,uint256)": {
        "details": "Pseudo-constructor per proxy. No need to assert access because this is called atomically on deployment, and once it's called, it cannot be called again.",
        "params": {
          "_denominationAsset": "The asset in which the fund's value should be denominated",
          "_sharesActionTimelock": "The minimum number of seconds between any two \"shares actions\" (buying or selling shares) by the same user"
        }
      },
      "permissionedVaultAction(uint8,bytes)": {
        "params": {
          "_action": "The enum representing the VaultAction to perform on the VaultProxy",
          "_actionData": "The call data for the action to perform"
        }
      },
      "preTransferSharesHook(address,address,uint256)": {
        "params": {
          "_amount": "The amount of shares",
          "_recipient": "The recipient of the shares",
          "_sender": "The sender of the shares"
        }
      },
      "preTransferSharesHookFreelyTransferable(address)": {
        "details": "No need to validate caller, as policies are not run",
        "params": {
          "_sender": "The sender of the shares"
        }
      },
      "pullWethForGasRelayer(uint256)": {
        "params": {
          "_amount": "Amount of the WETH to pull from the vault"
        }
      },
      "redeemSharesForSpecificAssets(address,uint256,address[],uint256[])": {
        "details": "Redeem all shares of the sender by setting _sharesQuantity to the max uint value. _payoutAssetPercentages must total exactly 100%. In order to specify less and forgo the remaining gav owed on the redeemed shares, pass in address(0) with the percentage to forego. Unlike redeemSharesInKind(), this function allows policies to run and prevent redemption.",
        "params": {
          "_payoutAssetPercentages": "The percentage of the owed amount to pay out in each asset",
          "_payoutAssets": "The assets to payout",
          "_recipient": "The account that will receive the specified assets",
          "_sharesQuantity": "The quantity of shares to redeem"
        },
        "returns": {
          "payoutAmounts_": "The amount of each asset paid out to the _recipient"
        }
      },
      "redeemSharesInKind(address,uint256,address[],address[])": {
        "details": "Redeem all shares of the sender by setting _sharesQuantity to the max uint value. Any claim to passed _assetsToSkip will be forfeited entirely. This should generally only be exercised if a bad asset is causing redemption to fail. This function should never fail without a way to bypass the failure, which is assured through two mechanisms: 1. The FeeManager is called with the try/catch pattern to assure that calls to it can never block redemption. 2. If a token fails upon transfer(), that token can be skipped (and its balance forfeited) by explicitly specifying _assetsToSkip. Because of these assurances, shares should always be redeemable, with the exception of the timelock period on shares actions that must be respected.",
        "params": {
          "_additionalAssets": "Additional (non-tracked) assets to claim",
          "_assetsToSkip": "Tracked assets to forfeit",
          "_recipient": "The account that will receive the proportionate slice of assets",
          "_sharesQuantity": "The quantity of shares to redeem"
        },
        "returns": {
          "payoutAmounts_": "The amount of each asset paid out to the _recipient",
          "payoutAssets_": "The assets paid out to the _recipient"
        }
      },
      "setAutoProtocolFeeSharesBuyback(bool)": {
        "params": {
          "_nextAutoProtocolFeeSharesBuyback": "True if protocol fee shares should be attempted to be bought back immediately when collected"
        }
      },
      "setGasRelayPaymaster(address)": {
        "params": {
          "_nextGasRelayPaymaster": "The next gasRelayPaymaster value"
        }
      },
      "setVaultProxy(address)": {
        "details": "No need to assert anything beyond FundDeployer access. Called atomically with init(), but after ComptrollerProxy has been deployed.",
        "params": {
          "_vaultProxy": "The VaultProxy contract"
        }
      },
      "vaultCallOnContract(address,bytes4,bytes)": {
        "params": {
          "_contract": "The contract to call",
          "_encodedArgs": "The encoded arguments for the call",
          "_selector": "The selector to call"
        },
        "returns": {
          "returnData_": "The data returned by the call"
        }
      }
    },
    "title": "ComptrollerLib Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activate(bool)": {
        "notice": "Runs atomic logic after a ComptrollerProxy has become its vaultProxy's `accessor`"
      },
      "buyBackProtocolFeeShares(uint256)": {
        "notice": "Buys back shares collected as protocol fee at a discounted shares price, using MLN"
      },
      "buyShares(uint256,uint256)": {
        "notice": "Buys shares"
      },
      "buySharesOnBehalf(address,uint256,uint256)": {
        "notice": "Buys shares on behalf of another user"
      },
      "calcGav(bool)": {
        "notice": "Calculates the gross asset value (GAV) of the fund"
      },
      "calcGrossShareValue(bool)": {
        "notice": "Calculates the gross value of 1 unit of shares in the fund's denomination asset"
      },
      "callOnExtension(address,uint256,bytes)": {
        "notice": "Calls a specified action on an Extension"
      },
      "deployGasRelayPaymaster()": {
        "notice": "Deploys a paymaster contract and deposits WETH, enabling gas relaying"
      },
      "depositToGasRelayPaymaster()": {
        "notice": "Tops up the gas relay paymaster deposit"
      },
      "destructActivated(uint256,uint256)": {
        "notice": "Wind down and destroy a ComptrollerProxy that is active"
      },
      "destructUnactivated()": {
        "notice": "Destroy a ComptrollerProxy that has not been activated"
      },
      "doesAutoProtocolFeeSharesBuyback()": {
        "notice": "Checks if collected protocol fee shares are automatically bought back while buying or redeeming shares"
      },
      "getAssetFinalityResolver()": {
        "notice": "Gets the `ASSET_FINALITY_RESOLVER` variable"
      },
      "getDenominationAsset()": {
        "notice": "Gets the `denominationAsset` variable"
      },
      "getDispatcher()": {
        "notice": "Gets the `DISPATCHER` variable"
      },
      "getExternalPositionManager()": {
        "notice": "Gets the `EXTERNAL_POSITION_MANAGER` variable"
      },
      "getFeeManager()": {
        "notice": "Gets the `FEE_MANAGER` variable"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getGasRelayPaymaster()": {
        "notice": "Gets the `gasRelayPaymaster` variable"
      },
      "getGasRelayPaymasterFactory()": {
        "notice": "Gets the `GAS_RELAY_PAYMASTER_FACTORY` variable"
      },
      "getGasRelayTrustedForwarder()": {
        "notice": "Gets the trusted forwarder for GSN relaying"
      },
      "getIntegrationManager()": {
        "notice": "Gets the `INTEGRATION_MANAGER` variable"
      },
      "getLastSharesBoughtTimestampForAccount(address)": {
        "notice": "Gets the timestamp of the last time shares were bought for a given account"
      },
      "getMlnToken()": {
        "notice": "Gets the `MLN_TOKEN` variable"
      },
      "getPolicyManager()": {
        "notice": "Gets the `POLICY_MANAGER` variable"
      },
      "getProtocolFeeReserve()": {
        "notice": "Gets the `PROTOCOL_FEE_RESERVE` variable"
      },
      "getSharesActionTimelock()": {
        "notice": "Gets the `sharesActionTimelock` variable"
      },
      "getValueInterpreter()": {
        "notice": "Gets the `VALUE_INTERPRETER` variable"
      },
      "getVaultProxy()": {
        "notice": "Gets the `vaultProxy` variable"
      },
      "getWethToken()": {
        "notice": "Gets the `WETH_TOKEN` variable"
      },
      "init(address,uint256)": {
        "notice": "Initializes a fund with its core config"
      },
      "permissionedVaultAction(uint8,bytes)": {
        "notice": "Makes a permissioned, state-changing call on the VaultProxy contract"
      },
      "preTransferSharesHook(address,address,uint256)": {
        "notice": "Runs logic prior to transferring shares that are not freely transferable"
      },
      "preTransferSharesHookFreelyTransferable(address)": {
        "notice": "Runs logic prior to transferring shares that are freely transferable"
      },
      "pullWethForGasRelayer(uint256)": {
        "notice": "Pull WETH from vault to gas relay paymaster"
      },
      "redeemSharesForSpecificAssets(address,uint256,address[],uint256[])": {
        "notice": "Redeems a specified amount of the sender's shares for specified asset proportions"
      },
      "redeemSharesInKind(address,uint256,address[],address[])": {
        "notice": "Redeems a specified amount of the sender's shares for a proportionate slice of the vault's assets"
      },
      "setAutoProtocolFeeSharesBuyback(bool)": {
        "notice": "Sets whether to attempt to buyback protocol fee shares immediately when collected"
      },
      "setGasRelayPaymaster(address)": {
        "notice": "Sets the gasRelayPaymaster variable value"
      },
      "setVaultProxy(address)": {
        "notice": "Sets the VaultProxy"
      },
      "shutdownGasRelayPaymaster()": {
        "notice": "Removes the gas relay paymaster, withdrawing the remaining WETH balance and disabling gas relaying"
      },
      "vaultCallOnContract(address,bytes4,bytes)": {
        "notice": "Makes an arbitrary call with the VaultProxy contract as the sender"
      }
    },
    "notice": "The core logic library shared by all funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10310,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "denominationAsset",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10312,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "vaultProxy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10314,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "isLib",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10316,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "autoProtocolFeeSharesBuyback",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10318,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "permissionedVaultActionAllowed",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10320,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "reentranceLocked",
        "offset": 23,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10322,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "sharesActionTimelock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10326,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "acctToLastSharesBoughtTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10328,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "gasRelayPaymaster",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}