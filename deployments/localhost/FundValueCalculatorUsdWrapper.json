{
  "address": "0x66F625B8c4c635af8b74ECe2d7eD0D58b4af3C3d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundValueCalculatorRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethUsdAggregator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_staleRateThreshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        }
      ],
      "name": "calcGav",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gav_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        }
      ],
      "name": "calcGrossShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "grossShareValue_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        }
      ],
      "name": "calcNav",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nav_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        }
      ],
      "name": "calcNetShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "netShareValue_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sharesHolder",
          "type": "address"
        }
      ],
      "name": "calcNetValueForSharesHolder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "netValue_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthUsdAggregatorContract",
      "outputs": [
        {
          "internalType": "contract IChainlinkAggregatorFundValueCalculatorUsdWrapper",
          "name": "ethUsdAggregatorContract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundValueCalculatorRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundValueCalculatorRouter_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStaleRateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staleRateThreshold_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "wethToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbd407b0554d2f13930a23545b94bd39cd00ef9ca89e3ecaeac225e7856f6f63",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x66F625B8c4c635af8b74ECe2d7eD0D58b4af3C3d",
    "transactionIndex": 0,
    "gasUsed": "441330",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x88811a70f8fcab8f34d624f3a6ffe676033e28c4b24ed000e56742a83d47380f",
    "transactionHash": "0xdbd407b0554d2f13930a23545b94bd39cd00ef9ca89e3ecaeac225e7856f6f63",
    "logs": [],
    "blockNumber": 14507986,
    "cumulativeGasUsed": "441330",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB377a2EeD7566Ac9fCb0BA673604F9BF875e2Bab",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419",
    315576000
  ],
  "solcInputHash": "e128c99a7ad98ab17bfe5eac6103458b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundValueCalculatorRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethUsdAggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_staleRateThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"calcGav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gav_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"calcGrossShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"grossShareValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"calcNav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nav_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"calcNetShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"netShareValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sharesHolder\",\"type\":\"address\"}],\"name\":\"calcNetValueForSharesHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"netValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthUsdAggregatorContract\",\"outputs\":[{\"internalType\":\"contract IChainlinkAggregatorFundValueCalculatorUsdWrapper\",\"name\":\"ethUsdAggregatorContract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundValueCalculatorRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundValueCalculatorRouter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaleRateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staleRateThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"USD values are normalized to a precision of 18 decimals. These values should generally only be consumed from off-chain, unless you understand how each release interprets each calculation.\",\"kind\":\"dev\",\"methods\":{\"calcGav(address)\":{\"params\":{\"_vaultProxy\":\"The VaultProxy of the fund\"},\"returns\":{\"gav_\":\"The GAV quoted in USD\"}},\"calcGrossShareValue(address)\":{\"params\":{\"_vaultProxy\":\"The VaultProxy of the fund\"},\"returns\":{\"grossShareValue_\":\"The gross share value quoted in USD\"}},\"calcNav(address)\":{\"params\":{\"_vaultProxy\":\"The VaultProxy of the fund\"},\"returns\":{\"nav_\":\"The NAV quoted in USD\"}},\"calcNetShareValue(address)\":{\"params\":{\"_vaultProxy\":\"The VaultProxy of the fund\"},\"returns\":{\"netShareValue_\":\"The net share value quoted in USD\"}},\"calcNetValueForSharesHolder(address,address)\":{\"params\":{\"_sharesHolder\":\"The account holding shares\",\"_vaultProxy\":\"The VaultProxy of the fund\"},\"returns\":{\"netValue_\":\"The net value of all shares held by _sharesHolder quoted in USD\"}},\"getEthUsdAggregatorContract()\":{\"returns\":{\"ethUsdAggregatorContract_\":\"The `ETH_USD_AGGREGATOR` variable value\"}},\"getFundValueCalculatorRouter()\":{\"returns\":{\"fundValueCalculatorRouter_\":\"The `FUND_VALUE_CALCULATOR_ROUTER` variable value\"}},\"getStaleRateThreshold()\":{\"returns\":{\"staleRateThreshold_\":\"The `STALE_RATE_THRESHOLD` value\"}},\"getWethToken()\":{\"returns\":{\"wethToken_\":\"The `WETH_TOKEN` variable value\"}}},\"title\":\"FundValueCalculatorUsdWrapper Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calcGav(address)\":{\"notice\":\"Calculates the GAV for a given fund in USD\"},\"calcGrossShareValue(address)\":{\"notice\":\"Calculates the gross value of one shares unit (10 ** 18) for a given fund in USD\"},\"calcNav(address)\":{\"notice\":\"Calculates the NAV for a given fund in USD\"},\"calcNetShareValue(address)\":{\"notice\":\"Calculates the net value of one shares unit (10 ** 18) for a given fund in USD\"},\"calcNetValueForSharesHolder(address,address)\":{\"notice\":\"Calculates the net value of all shares held by a specified account in USD\"},\"getEthUsdAggregatorContract()\":{\"notice\":\"Gets the `ETH_USD_AGGREGATOR` variable value\"},\"getFundValueCalculatorRouter()\":{\"notice\":\"Gets the `FUND_VALUE_CALCULATOR_ROUTER` variable\"},\"getStaleRateThreshold()\":{\"notice\":\"Gets the `STALE_RATE_THRESHOLD` variable value\"},\"getWethToken()\":{\"notice\":\"Gets the `WETH_TOKEN` variable value\"}},\"notice\":\"Wraps the FundValueCalculatorRouter to get fund values with USD as the quote asset\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/persistent/off-chain/fund-value-calculator-usd-wrapper/FundValueCalculatorUsdWrapper.sol\":\"FundValueCalculatorUsdWrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e6b0e6cf325d4f6332b8eb2b3c446b2ef3ca8456bdf0d12318d0fd9e90aeb30\",\"license\":\"GPL-3.0\"},\"contracts/persistent/off-chain/fund-value-calculator-usd-wrapper/FundValueCalculatorUsdWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../fund-value-calculator/FundValueCalculatorRouter.sol\\\";\\n\\n/// @title IChainlinkAggregatorFundValueCalculatorUsdWrapper Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IChainlinkAggregatorFundValueCalculatorUsdWrapper {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint80\\n        );\\n}\\n\\n/// @title FundValueCalculatorUsdWrapper Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Wraps the FundValueCalculatorRouter to get fund values with USD as the quote asset\\n/// @dev USD values are normalized to a precision of 18 decimals.\\n/// These values should generally only be consumed from off-chain,\\n/// unless you understand how each release interprets each calculation.\\ncontract FundValueCalculatorUsdWrapper {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant ETH_USD_AGGREGATOR_DECIMALS = 8;\\n\\n    address private immutable ETH_USD_AGGREGATOR;\\n    address private immutable FUND_VALUE_CALCULATOR_ROUTER;\\n    uint256 private immutable STALE_RATE_THRESHOLD;\\n    address private immutable WETH_TOKEN;\\n\\n    constructor(\\n        address _fundValueCalculatorRouter,\\n        address _wethToken,\\n        address _ethUsdAggregator,\\n        uint256 _staleRateThreshold\\n    ) public {\\n        ETH_USD_AGGREGATOR = _ethUsdAggregator;\\n        FUND_VALUE_CALCULATOR_ROUTER = _fundValueCalculatorRouter;\\n        STALE_RATE_THRESHOLD = _staleRateThreshold;\\n        WETH_TOKEN = _wethToken;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Calculates the GAV for a given fund in USD\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return gav_ The GAV quoted in USD\\n    function calcGav(address _vaultProxy) external returns (uint256 gav_) {\\n        uint256 valueInEth = FundValueCalculatorRouter(getFundValueCalculatorRouter())\\n            .calcGavInAsset(_vaultProxy, getWethToken());\\n\\n        return __convertEthToUsd(valueInEth);\\n    }\\n\\n    /// @notice Calculates the gross value of one shares unit (10 ** 18) for a given fund in USD\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return grossShareValue_ The gross share value quoted in USD\\n    function calcGrossShareValue(address _vaultProxy) external returns (uint256 grossShareValue_) {\\n        uint256 valueInEth = FundValueCalculatorRouter(getFundValueCalculatorRouter())\\n            .calcGrossShareValueInAsset(_vaultProxy, getWethToken());\\n\\n        return __convertEthToUsd(valueInEth);\\n    }\\n\\n    /// @notice Calculates the NAV for a given fund in USD\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return nav_ The NAV quoted in USD\\n    function calcNav(address _vaultProxy) external returns (uint256 nav_) {\\n        uint256 valueInEth = FundValueCalculatorRouter(getFundValueCalculatorRouter())\\n            .calcNavInAsset(_vaultProxy, getWethToken());\\n\\n        return __convertEthToUsd(valueInEth);\\n    }\\n\\n    /// @notice Calculates the net value of one shares unit (10 ** 18) for a given fund in USD\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return netShareValue_ The net share value quoted in USD\\n    function calcNetShareValue(address _vaultProxy) external returns (uint256 netShareValue_) {\\n        uint256 valueInEth = FundValueCalculatorRouter(getFundValueCalculatorRouter())\\n            .calcNetShareValueInAsset(_vaultProxy, getWethToken());\\n\\n        return __convertEthToUsd(valueInEth);\\n    }\\n\\n    /// @notice Calculates the net value of all shares held by a specified account in USD\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _sharesHolder The account holding shares\\n    /// @return netValue_ The net value of all shares held by _sharesHolder quoted in USD\\n    function calcNetValueForSharesHolder(address _vaultProxy, address _sharesHolder)\\n        external\\n        returns (uint256 netValue_)\\n    {\\n        uint256 valueInEth = FundValueCalculatorRouter(getFundValueCalculatorRouter())\\n            .calcNetValueForSharesHolderInAsset(_vaultProxy, _sharesHolder, getWethToken());\\n\\n        return __convertEthToUsd(valueInEth);\\n    }\\n\\n    /// @dev Helper to convert an ETH amount to USD\\n    function __convertEthToUsd(uint256 _ethAmount) private view returns (uint256 usdAmount_) {\\n        (, int256 usdPerEthRate, , uint256 updatedAt, ) = getEthUsdAggregatorContract()\\n            .latestRoundData();\\n        require(usdPerEthRate > 0, \\\"__convertEthToUsd: Bad ethUsd rate\\\");\\n        require(\\n            updatedAt >= block.timestamp.sub(getStaleRateThreshold()),\\n            \\\"__convertEthToUsd: Stale rate detected\\\"\\n        );\\n\\n        return _ethAmount.mul(uint256(usdPerEthRate)).div(10**ETH_USD_AGGREGATOR_DECIMALS);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `ETH_USD_AGGREGATOR` variable value\\n    /// @return ethUsdAggregatorContract_ The `ETH_USD_AGGREGATOR` variable value\\n    function getEthUsdAggregatorContract()\\n        public\\n        view\\n        returns (IChainlinkAggregatorFundValueCalculatorUsdWrapper ethUsdAggregatorContract_)\\n    {\\n        return IChainlinkAggregatorFundValueCalculatorUsdWrapper(ETH_USD_AGGREGATOR);\\n    }\\n\\n    /// @notice Gets the `FUND_VALUE_CALCULATOR_ROUTER` variable\\n    /// @return fundValueCalculatorRouter_ The `FUND_VALUE_CALCULATOR_ROUTER` variable value\\n    function getFundValueCalculatorRouter()\\n        public\\n        view\\n        returns (address fundValueCalculatorRouter_)\\n    {\\n        return FUND_VALUE_CALCULATOR_ROUTER;\\n    }\\n\\n    /// @notice Gets the `STALE_RATE_THRESHOLD` variable value\\n    /// @return staleRateThreshold_ The `STALE_RATE_THRESHOLD` value\\n    function getStaleRateThreshold() public view returns (uint256 staleRateThreshold_) {\\n        return STALE_RATE_THRESHOLD;\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable value\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() public view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n}\\n\",\"keccak256\":\"0xc3c5e8014a0ba529376f25acf17319dc7e1f723421bcaa4f3028f233a94261b3\",\"license\":\"GPL-3.0\"},\"contracts/persistent/off-chain/fund-value-calculator/FundValueCalculatorRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../dispatcher/IDispatcher.sol\\\";\\nimport \\\"./IFundValueCalculator.sol\\\";\\n\\n/// @title FundValueCalculatorRouter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A peripheral contract for routing value calculation requests\\n/// to the correct FundValueCalculator instance for a particular release\\n/// @dev These values should generally only be consumed from off-chain,\\n/// unless you understand how each release interprets each calculation\\ncontract FundValueCalculatorRouter {\\n    event FundValueCalculatorUpdated(address indexed fundDeployer, address fundValueCalculator);\\n\\n    address private immutable DISPATCHER;\\n\\n    mapping(address => address) private fundDeployerToFundValueCalculator;\\n\\n    constructor(\\n        address _dispatcher,\\n        address[] memory _fundDeployers,\\n        address[] memory _fundValueCalculators\\n    ) public {\\n        DISPATCHER = _dispatcher;\\n\\n        __setFundValueCalculators(_fundDeployers, _fundValueCalculators);\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Calculates the GAV for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return gav_ The GAV quoted in the denomination asset\\n    function calcGav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 gav_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcGav(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the GAV for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return gav_ The GAV quoted in _quoteAsset\\n    function calcGavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 gav_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcGavInAsset(_vaultProxy, _quoteAsset);\\n    }\\n\\n    /// @notice Calculates the gross value of one shares unit (10 ** 18) for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return grossShareValue_ The gross share value quoted in the denomination asset\\n    function calcGrossShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 grossShareValue_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcGrossShareValue(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the gross value of one shares unit (10 ** 18) for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return grossShareValue_ The gross share value quoted in _quoteAsset\\n    function calcGrossShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 grossShareValue_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcGrossShareValueInAsset(\\n                _vaultProxy,\\n                _quoteAsset\\n            );\\n    }\\n\\n    /// @notice Calculates the NAV for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return nav_ The NAV quoted in the denomination asset\\n    function calcNav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 nav_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcNav(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the NAV for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return nav_ The NAV quoted in _quoteAsset\\n    function calcNavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 nav_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNavInAsset(_vaultProxy, _quoteAsset);\\n    }\\n\\n    /// @notice Calculates the net value of one shares unit (10 ** 18) for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return netShareValue_ The net share value quoted in the denomination asset\\n    function calcNetShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 netShareValue_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcNetShareValue(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the net value of one shares unit (10 ** 18) for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return netShareValue_ The net share value quoted in _quoteAsset\\n    function calcNetShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 netShareValue_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNetShareValueInAsset(\\n                _vaultProxy,\\n                _quoteAsset\\n            );\\n    }\\n\\n    /// @notice Calculates the net value of all shares held by a specified account\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _sharesHolder The account holding shares\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return netValue_ The net value of all shares held by _sharesHolder\\n    function calcNetValueForSharesHolder(address _vaultProxy, address _sharesHolder)\\n        external\\n        returns (address denominationAsset_, uint256 netValue_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNetValueForSharesHolder(\\n                _vaultProxy,\\n                _sharesHolder\\n            );\\n    }\\n\\n    /// @notice Calculates the net value of all shares held by a specified account, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _sharesHolder The account holding shares\\n    /// @param _quoteAsset The quote asset\\n    /// @return netValue_ The net value of all shares held by _sharesHolder quoted in _quoteAsset\\n    function calcNetValueForSharesHolderInAsset(\\n        address _vaultProxy,\\n        address _sharesHolder,\\n        address _quoteAsset\\n    ) external returns (uint256 netValue_) {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNetValueForSharesHolderInAsset(\\n                _vaultProxy,\\n                _sharesHolder,\\n                _quoteAsset\\n            );\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Gets the FundValueCalculator instance to use for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return fundValueCalculatorContract_ The FundValueCalculator instance\\n    function getFundValueCalculatorForVault(address _vaultProxy)\\n        public\\n        view\\n        returns (IFundValueCalculator fundValueCalculatorContract_)\\n    {\\n        address fundDeployer = IDispatcher(DISPATCHER).getFundDeployerForVaultProxy(_vaultProxy);\\n        require(fundDeployer != address(0), \\\"getFundValueCalculatorForVault: Invalid _vaultProxy\\\");\\n\\n        address fundValueCalculator = getFundValueCalculatorForFundDeployer(fundDeployer);\\n        require(\\n            fundValueCalculator != address(0),\\n            \\\"getFundValueCalculatorForVault: No FundValueCalculator set\\\"\\n        );\\n\\n        return IFundValueCalculator(fundValueCalculator);\\n    }\\n\\n    ////////////////////////////\\n    // FUND VALUE CALCULATORS //\\n    ////////////////////////////\\n\\n    /// @notice Sets FundValueCalculator instances for a list of FundDeployer instances\\n    /// @param _fundDeployers The FundDeployer instances\\n    /// @param _fundValueCalculators The FundValueCalculator instances corresponding\\n    /// to each instance in _fundDeployers\\n    function setFundValueCalculators(\\n        address[] memory _fundDeployers,\\n        address[] memory _fundValueCalculators\\n    ) external {\\n        require(\\n            msg.sender == IDispatcher(getDispatcher()).getOwner(),\\n            \\\"Only the Dispatcher owner can call this function\\\"\\n        );\\n\\n        __setFundValueCalculators(_fundDeployers, _fundValueCalculators);\\n    }\\n\\n    /// @dev Helper to set FundValueCalculator addresses respectively for given FundDeployers\\n    function __setFundValueCalculators(\\n        address[] memory _fundDeployers,\\n        address[] memory _fundValueCalculators\\n    ) private {\\n        require(\\n            _fundDeployers.length == _fundValueCalculators.length,\\n            \\\"__setFundValueCalculators: Unequal array lengths\\\"\\n        );\\n\\n        for (uint256 i; i < _fundDeployers.length; i++) {\\n            fundDeployerToFundValueCalculator[_fundDeployers[i]] = _fundValueCalculators[i];\\n\\n            emit FundValueCalculatorUpdated(_fundDeployers[i], _fundValueCalculators[i]);\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `DISPATCHER` variable\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\n    function getDispatcher() public view returns (address dispatcher_) {\\n        return DISPATCHER;\\n    }\\n\\n    /// @notice Gets the FundValueCalculator address for a given FundDeployer\\n    /// @param _fundDeployer The FundDeployer for which to get the FundValueCalculator address\\n    /// @return fundValueCalculator_ The FundValueCalculator address\\n    function getFundValueCalculatorForFundDeployer(address _fundDeployer)\\n        public\\n        view\\n        returns (address fundValueCalculator_)\\n    {\\n        return fundDeployerToFundValueCalculator[_fundDeployer];\\n    }\\n}\\n\",\"keccak256\":\"0x313dcaccdb58e7e24854243cfe7286285dd385a1cbaa7836f9fe3beaa8c9b94c\",\"license\":\"GPL-3.0\"},\"contracts/persistent/off-chain/fund-value-calculator/IFundValueCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundValueCalculator interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundValueCalculator {\\n    function calcGav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 gav_);\\n\\n    function calcGavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 gav_);\\n\\n    function calcGrossShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 grossShareValue_);\\n\\n    function calcGrossShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 grossShareValue_);\\n\\n    function calcNav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 nav_);\\n\\n    function calcNavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 nav_);\\n\\n    function calcNetShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 netShareValue_);\\n\\n    function calcNetShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 netShareValue_);\\n\\n    function calcNetValueForSharesHolder(address _vaultProxy, address _sharesHolder)\\n        external\\n        returns (address denominationAsset_, uint256 netValue_);\\n\\n    function calcNetValueForSharesHolderInAsset(\\n        address _vaultProxy,\\n        address _sharesHolder,\\n        address _quoteAsset\\n    ) external returns (uint256 netValue_);\\n}\\n\",\"keccak256\":\"0x993e11b879d6ad85f5ecf5f8e1880989c010bdf03de2079b39f66a953844de2d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b506040516107a63803806107a68339818101604052608081101561003457600080fd5b508051602082015160408301516060938401516001600160601b031991851b821660805292841b811660a05260c09290925290911b1660e05260805160601c60a05160601c60c05160e05160601c6106fb6100ab6000398061029f5250806103cc52508061025d5250806102e552506106fb6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806353d467f31161006657806353d467f3146101225780636ed0a4ef1461014857806381dfa95b14610150578063b54fbdaa1461017e578063c35526631461018657610093565b8063037276c1146100985780632f88698c146100d05780633ba6b851146100f45780634c252f911461011a575b600080fd5b6100be600480360360208110156100ae57600080fd5b50356001600160a01b03166101ac565b60408051918252519081900360200190f35b6100d861025b565b604080516001600160a01b039092168252519081900360200190f35b6100be6004803603602081101561010a57600080fd5b50356001600160a01b031661027f565b6100d861029d565b6100be6004803603602081101561013857600080fd5b50356001600160a01b03166102c1565b6100d86102e3565b6100be6004803603604081101561016657600080fd5b506001600160a01b0381358116916020013516610307565b6100be6103ca565b6100be6004803603602081101561019c57600080fd5b50356001600160a01b03166103ee565b6000806101b761025b565b6001600160a01b03166351ac29c7846101ce61029d565b6040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050602060405180830381600087803b15801561021d57600080fd5b505af1158015610231573d6000803e3d6000fd5b505050506040513d602081101561024757600080fd5b5051905061025481610410565b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60008061028a61025b565b6001600160a01b031663faf6eeef846101ce5b7f000000000000000000000000000000000000000000000000000000000000000090565b6000806102cc61025b565b6001600160a01b031663c65988ff846101ce61029d565b7f000000000000000000000000000000000000000000000000000000000000000090565b60008061031261025b565b6001600160a01b0316634807ccbd858561032a61029d565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b031681526020019350505050602060405180830381600087803b15801561038957600080fd5b505af115801561039d573d6000803e3d6000fd5b505050506040513d60208110156103b357600080fd5b505190506103c081610410565b9150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000806103f961025b565b6001600160a01b031663eefcb1b3846101ce61029d565b600080600061041d6102e3565b6001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561045557600080fd5b505afa158015610469573d6000803e3d6000fd5b505050506040513d60a081101561047f57600080fd5b5060208101516060909101519092509050600082136104cf5760405162461bcd60e51b81526004018080602001828103825260228152602001806106a46022913960400191505060405180910390fd5b6104e16104da6103ca565b429061053f565b81101561051f5760405162461bcd60e51b815260040180806020018281038252602681526020018061065d6026913960400191505060405180910390fd5b6105376305f5e100610531868561059c565b906105f5565b949350505050565b600082821115610596576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826105ab575060006103c4565b828202828482816105b857fe5b04146102545760405162461bcd60e51b81526004018080602001828103825260218152602001806106836021913960400191505060405180910390fd5b600080821161064b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161065457fe5b04939250505056fe5f5f636f6e76657274457468546f5573643a205374616c652072617465206465746563746564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775f5f636f6e76657274457468546f5573643a20426164206574685573642072617465a2646970667358221220309942f9ff269f9238cad25e8e017976712b953ec4be1316a44709b9db8db0d364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806353d467f31161006657806353d467f3146101225780636ed0a4ef1461014857806381dfa95b14610150578063b54fbdaa1461017e578063c35526631461018657610093565b8063037276c1146100985780632f88698c146100d05780633ba6b851146100f45780634c252f911461011a575b600080fd5b6100be600480360360208110156100ae57600080fd5b50356001600160a01b03166101ac565b60408051918252519081900360200190f35b6100d861025b565b604080516001600160a01b039092168252519081900360200190f35b6100be6004803603602081101561010a57600080fd5b50356001600160a01b031661027f565b6100d861029d565b6100be6004803603602081101561013857600080fd5b50356001600160a01b03166102c1565b6100d86102e3565b6100be6004803603604081101561016657600080fd5b506001600160a01b0381358116916020013516610307565b6100be6103ca565b6100be6004803603602081101561019c57600080fd5b50356001600160a01b03166103ee565b6000806101b761025b565b6001600160a01b03166351ac29c7846101ce61029d565b6040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050602060405180830381600087803b15801561021d57600080fd5b505af1158015610231573d6000803e3d6000fd5b505050506040513d602081101561024757600080fd5b5051905061025481610410565b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60008061028a61025b565b6001600160a01b031663faf6eeef846101ce5b7f000000000000000000000000000000000000000000000000000000000000000090565b6000806102cc61025b565b6001600160a01b031663c65988ff846101ce61029d565b7f000000000000000000000000000000000000000000000000000000000000000090565b60008061031261025b565b6001600160a01b0316634807ccbd858561032a61029d565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b031681526020019350505050602060405180830381600087803b15801561038957600080fd5b505af115801561039d573d6000803e3d6000fd5b505050506040513d60208110156103b357600080fd5b505190506103c081610410565b9150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000806103f961025b565b6001600160a01b031663eefcb1b3846101ce61029d565b600080600061041d6102e3565b6001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561045557600080fd5b505afa158015610469573d6000803e3d6000fd5b505050506040513d60a081101561047f57600080fd5b5060208101516060909101519092509050600082136104cf5760405162461bcd60e51b81526004018080602001828103825260228152602001806106a46022913960400191505060405180910390fd5b6104e16104da6103ca565b429061053f565b81101561051f5760405162461bcd60e51b815260040180806020018281038252602681526020018061065d6026913960400191505060405180910390fd5b6105376305f5e100610531868561059c565b906105f5565b949350505050565b600082821115610596576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826105ab575060006103c4565b828202828482816105b857fe5b04146102545760405162461bcd60e51b81526004018080602001828103825260218152602001806106836021913960400191505060405180910390fd5b600080821161064b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161065457fe5b04939250505056fe5f5f636f6e76657274457468546f5573643a205374616c652072617465206465746563746564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775f5f636f6e76657274457468546f5573643a20426164206574685573642072617465a2646970667358221220309942f9ff269f9238cad25e8e017976712b953ec4be1316a44709b9db8db0d364736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "USD values are normalized to a precision of 18 decimals. These values should generally only be consumed from off-chain, unless you understand how each release interprets each calculation.",
    "kind": "dev",
    "methods": {
      "calcGav(address)": {
        "params": {
          "_vaultProxy": "The VaultProxy of the fund"
        },
        "returns": {
          "gav_": "The GAV quoted in USD"
        }
      },
      "calcGrossShareValue(address)": {
        "params": {
          "_vaultProxy": "The VaultProxy of the fund"
        },
        "returns": {
          "grossShareValue_": "The gross share value quoted in USD"
        }
      },
      "calcNav(address)": {
        "params": {
          "_vaultProxy": "The VaultProxy of the fund"
        },
        "returns": {
          "nav_": "The NAV quoted in USD"
        }
      },
      "calcNetShareValue(address)": {
        "params": {
          "_vaultProxy": "The VaultProxy of the fund"
        },
        "returns": {
          "netShareValue_": "The net share value quoted in USD"
        }
      },
      "calcNetValueForSharesHolder(address,address)": {
        "params": {
          "_sharesHolder": "The account holding shares",
          "_vaultProxy": "The VaultProxy of the fund"
        },
        "returns": {
          "netValue_": "The net value of all shares held by _sharesHolder quoted in USD"
        }
      },
      "getEthUsdAggregatorContract()": {
        "returns": {
          "ethUsdAggregatorContract_": "The `ETH_USD_AGGREGATOR` variable value"
        }
      },
      "getFundValueCalculatorRouter()": {
        "returns": {
          "fundValueCalculatorRouter_": "The `FUND_VALUE_CALCULATOR_ROUTER` variable value"
        }
      },
      "getStaleRateThreshold()": {
        "returns": {
          "staleRateThreshold_": "The `STALE_RATE_THRESHOLD` value"
        }
      },
      "getWethToken()": {
        "returns": {
          "wethToken_": "The `WETH_TOKEN` variable value"
        }
      }
    },
    "title": "FundValueCalculatorUsdWrapper Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calcGav(address)": {
        "notice": "Calculates the GAV for a given fund in USD"
      },
      "calcGrossShareValue(address)": {
        "notice": "Calculates the gross value of one shares unit (10 ** 18) for a given fund in USD"
      },
      "calcNav(address)": {
        "notice": "Calculates the NAV for a given fund in USD"
      },
      "calcNetShareValue(address)": {
        "notice": "Calculates the net value of one shares unit (10 ** 18) for a given fund in USD"
      },
      "calcNetValueForSharesHolder(address,address)": {
        "notice": "Calculates the net value of all shares held by a specified account in USD"
      },
      "getEthUsdAggregatorContract()": {
        "notice": "Gets the `ETH_USD_AGGREGATOR` variable value"
      },
      "getFundValueCalculatorRouter()": {
        "notice": "Gets the `FUND_VALUE_CALCULATOR_ROUTER` variable"
      },
      "getStaleRateThreshold()": {
        "notice": "Gets the `STALE_RATE_THRESHOLD` variable value"
      },
      "getWethToken()": {
        "notice": "Gets the `WETH_TOKEN` variable value"
      }
    },
    "notice": "Wraps the FundValueCalculatorRouter to get fund values with USD as the quote asset",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}