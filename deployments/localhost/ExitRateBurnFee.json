{
  "address": "0xa722bdA6968F50778B973Ae2701e90200C564B49",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inKindRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "specificAssetsRate",
          "type": "uint256"
        }
      ],
      "name": "FundSettingsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesQuantity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "forSpecificAssets",
          "type": "bool"
        }
      ],
      "name": "Settled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_settingsData",
          "type": "bytes"
        }
      ],
      "name": "addFundSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getInKindRateForFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getRecipientForFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSettlementType",
      "outputs": [
        {
          "internalType": "enum IFeeManager.SettlementType",
          "name": "settlementType_",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getSpecificAssetsRateForFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "payout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_settlementData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [
        {
          "internalType": "enum IFeeManager.SettlementType",
          "name": "settlementType_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "payer_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sharesDue_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "_hook",
          "type": "uint8"
        }
      ],
      "name": "settlesOnHook",
      "outputs": [
        {
          "internalType": "bool",
          "name": "settles_",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "usesGav_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "updatesOnHook",
      "outputs": [
        {
          "internalType": "bool",
          "name": "updates_",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "usesGav_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc891f99f1497e8b053864af53e9861a9d8b5d972c36dd482cbd4b8c08f5afedb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa722bdA6968F50778B973Ae2701e90200C564B49",
    "transactionIndex": 0,
    "gasUsed": "606377",
    "logsBloom": "0x
    "blockHash": "0xc9698e24ca747c9e8eabdbb5cf3ab775a4aec9c56514dc9959551ecb544940cc",
    "transactionHash": "0xc891f99f1497e8b053864af53e9861a9d8b5d972c36dd482cbd4b8c08f5afedb",
    "logs": [],
    "blockNumber": 14508058,
    "cumulativeGasUsed": "606377",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x071586BA1b380B00B793Cc336fe01106B0BFbE6D"
  ],
  "linkedData": {
    "type": "FEE"
  },
  "solcInputHash": "e128c99a7ad98ab17bfe5eac6103458b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inKindRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"specificAssetsRate\",\"type\":\"uint256\"}],\"name\":\"FundSettingsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesQuantity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"forSpecificAssets\",\"type\":\"bool\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_settingsData\",\"type\":\"bytes\"}],\"name\":\"addFundSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getInKindRateForFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getRecipientForFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettlementType\",\"outputs\":[{\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"settlementType_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getSpecificAssetsRateForFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_settlementData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"settlementType_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"payer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesDue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"_hook\",\"type\":\"uint8\"}],\"name\":\"settlesOnHook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"settles_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usesGav_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"updatesOnHook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"updates_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usesGav_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"activateForFund(address,address)\":{\"details\":\"Unimplemented by default, may be overrode.\"},\"addFundSettings(address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_settingsData\":\"Encoded settings to apply to the fee for a fund\"}},\"getFeeManager()\":{\"returns\":{\"feeManager_\":\"The `FEE_MANAGER` variable value\"}},\"getInKindRateForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy contract for the fund\"},\"returns\":{\"rate_\":\"The fee rate\"}},\"getRecipientForFund(address)\":{\"details\":\"address(0) signifies the VaultProxy owner. Returns address(0) by default, can be overridden by fee.\"},\"getSettlementType()\":{\"returns\":{\"settlementType_\":\"The `SETTLEMENT_TYPE` variable value\"}},\"getSpecificAssetsRateForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy contract for the fund\"},\"returns\":{\"rate_\":\"The fee rate\"}},\"payout(address,address)\":{\"details\":\"Returns false by default, can be overridden by fee\"},\"settle(address,address,uint8,bytes,uint256)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_settlementData\":\"Encoded args to use in calculating the settlement\"},\"returns\":{\"payer_\":\"The payer of shares due\",\"settlementType_\":\"The type of settlement\",\"sharesDue_\":\"The amount of shares due\"}},\"settlesOnHook(uint8)\":{\"params\":{\"_hook\":\"The FeeHook\"},\"returns\":{\"settles_\":\"True if the fee settles on the _hook\",\"usesGav_\":\"True if the fee uses GAV during settle() for the _hook\"}},\"update(address,address,uint8,bytes,uint256)\":{\"details\":\"Unimplemented by default, can be overridden by fee\"},\"updatesOnHook(uint8)\":{\"details\":\"Returns false values by default, can be overridden by fee\",\"returns\":{\"updates_\":\"True if the fee updates on the _hook\",\"usesGav_\":\"True if the fee uses GAV during update() for the _hook\"}}},\"title\":\"ExitRateBurnFee Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(address,address)\":{\"notice\":\"Allows Fee to run logic during fund activation\"},\"addFundSettings(address,bytes)\":{\"notice\":\"Add the initial fee settings for a fund\"},\"getFeeManager()\":{\"notice\":\"Gets the `FEE_MANAGER` variable\"},\"getInKindRateForFund(address)\":{\"notice\":\"Gets the fee rate for an in-kind redemption\"},\"getRecipientForFund(address)\":{\"notice\":\"Gets the recipient of the fee for a given fund\"},\"getSettlementType()\":{\"notice\":\"Gets the `SETTLEMENT_TYPE` variable\"},\"getSpecificAssetsRateForFund(address)\":{\"notice\":\"Gets the fee rate for a specific assets redemption\"},\"payout(address,address)\":{\"notice\":\"Runs payout logic for a fee that utilizes shares outstanding as its settlement type\"},\"settle(address,address,uint8,bytes,uint256)\":{\"notice\":\"Settles the fee\"},\"settlesOnHook(uint8)\":{\"notice\":\"Gets whether the fee settles and requires GAV on a particular hook\"},\"update(address,address,uint8,bytes,uint256)\":{\"notice\":\"Update fee state after all settlement has occurred during a given fee hook\"},\"updatesOnHook(uint8)\":{\"notice\":\"Gets whether the fee updates and requires GAV on a particular hook\"}},\"notice\":\"An ExitRateFee that burns the fee shares\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/fee-manager/fees/ExitRateBurnFee.sol\":\"ExitRateBurnFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/release/extensions/fee-manager/IFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IFeeManager.sol\\\";\\n\\n/// @title Fee Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all fees\\ninterface IFee {\\n    function activateForFund(address _comptrollerProxy, address _vaultProxy) external;\\n\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _settingsData) external;\\n\\n    function payout(address _comptrollerProxy, address _vaultProxy)\\n        external\\n        returns (bool isPayable_);\\n\\n    function getRecipientForFund(address _comptrollerProxy)\\n        external\\n        view\\n        returns (address recipient_);\\n\\n    function settle(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        IFeeManager.FeeHook _hook,\\n        bytes calldata _settlementData,\\n        uint256 _gav\\n    )\\n        external\\n        returns (\\n            IFeeManager.SettlementType settlementType_,\\n            address payer_,\\n            uint256 sharesDue_\\n        );\\n\\n    function settlesOnHook(IFeeManager.FeeHook _hook)\\n        external\\n        view\\n        returns (bool settles_, bool usesGav_);\\n\\n    function update(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        IFeeManager.FeeHook _hook,\\n        bytes calldata _settlementData,\\n        uint256 _gav\\n    ) external;\\n\\n    function updatesOnHook(IFeeManager.FeeHook _hook)\\n        external\\n        view\\n        returns (bool updates_, bool usesGav_);\\n}\\n\",\"keccak256\":\"0x38e3f324c67f3205e38197165586ea82ca226069902f34214bcde76cf905fcff\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title FeeManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the FeeManager\\ninterface IFeeManager {\\n    // No fees for the current release are implemented post-redeemShares\\n    enum FeeHook {Continuous, PreBuyShares, PostBuyShares, PreRedeemShares}\\n    enum SettlementType {None, Direct, Mint, Burn, MintSharesOutstanding, BurnSharesOutstanding}\\n\\n    function invokeHook(\\n        FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa0cfee013a2a0f8891ee558dec4568dd6e76e3f033a214cbe5e74e93e8f68fd2\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/fees/ExitRateBurnFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./utils/ExitRateFeeBase.sol\\\";\\n\\n/// @title ExitRateBurnFee Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice An ExitRateFee that burns the fee shares\\ncontract ExitRateBurnFee is ExitRateFeeBase {\\n    constructor(address _feeManager)\\n        public\\n        ExitRateFeeBase(_feeManager, IFeeManager.SettlementType.Burn)\\n    {}\\n}\\n\",\"keccak256\":\"0xa656884c19fece41f77a2b4e92c06c78c12f0ebd6f21c49d5f94496dc2306309\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/fees/utils/ExitRateFeeBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./FeeBase.sol\\\";\\n\\n/// @title ExitRateFeeBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Calculates a fee based on a rate to be charged to an investor upon exiting a fund\\nabstract contract ExitRateFeeBase is FeeBase {\\n    using SafeMath for uint256;\\n\\n    event FundSettingsAdded(\\n        address indexed comptrollerProxy,\\n        uint256 inKindRate,\\n        uint256 specificAssetsRate\\n    );\\n\\n    event Settled(\\n        address indexed comptrollerProxy,\\n        address indexed payer,\\n        uint256 sharesQuantity,\\n        bool indexed forSpecificAssets\\n    );\\n\\n    struct FeeInfo {\\n        uint16 inKindRate;\\n        uint16 specificAssetsRate;\\n    }\\n\\n    uint256 private constant ONE_HUNDRED_PERCENT = 10000;\\n    IFeeManager.SettlementType private immutable SETTLEMENT_TYPE;\\n\\n    mapping(address => FeeInfo) private comptrollerProxyToFeeInfo;\\n\\n    constructor(address _feeManager, IFeeManager.SettlementType _settlementType)\\n        public\\n        FeeBase(_feeManager)\\n    {\\n        require(\\n            _settlementType == IFeeManager.SettlementType.Burn ||\\n                _settlementType == IFeeManager.SettlementType.Direct,\\n            \\\"constructor: Invalid _settlementType\\\"\\n        );\\n        SETTLEMENT_TYPE = _settlementType;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Add the initial fee settings for a fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _settingsData Encoded settings to apply to the fee for a fund\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _settingsData)\\n        public\\n        virtual\\n        override\\n        onlyFeeManager\\n    {\\n        (uint16 inKindRate, uint16 specificAssetsRate) = abi.decode(\\n            _settingsData,\\n            (uint16, uint16)\\n        );\\n        require(inKindRate < ONE_HUNDRED_PERCENT, \\\"addFundSettings: inKindRate max exceeded\\\");\\n        require(\\n            specificAssetsRate < ONE_HUNDRED_PERCENT,\\n            \\\"addFundSettings: specificAssetsRate max exceeded\\\"\\n        );\\n\\n        comptrollerProxyToFeeInfo[_comptrollerProxy] = FeeInfo({\\n            inKindRate: inKindRate,\\n            specificAssetsRate: specificAssetsRate\\n        });\\n\\n        emit FundSettingsAdded(_comptrollerProxy, inKindRate, specificAssetsRate);\\n    }\\n\\n    /// @notice Settles the fee\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _settlementData Encoded args to use in calculating the settlement\\n    /// @return settlementType_ The type of settlement\\n    /// @return payer_ The payer of shares due\\n    /// @return sharesDue_ The amount of shares due\\n    function settle(\\n        address _comptrollerProxy,\\n        address,\\n        IFeeManager.FeeHook,\\n        bytes calldata _settlementData,\\n        uint256\\n    )\\n        external\\n        override\\n        onlyFeeManager\\n        returns (\\n            IFeeManager.SettlementType settlementType_,\\n            address payer_,\\n            uint256 sharesDue_\\n        )\\n    {\\n        bool forSpecificAssets;\\n        uint256 sharesRedeemed;\\n        (payer_, sharesRedeemed, forSpecificAssets) = __decodePreRedeemSharesSettlementData(\\n            _settlementData\\n        );\\n\\n        uint256 rate;\\n        if (forSpecificAssets) {\\n            rate = getSpecificAssetsRateForFund(_comptrollerProxy);\\n        } else {\\n            rate = getInKindRateForFund(_comptrollerProxy);\\n        }\\n\\n        sharesDue_ = sharesRedeemed.mul(rate).div(ONE_HUNDRED_PERCENT);\\n\\n        if (sharesDue_ == 0) {\\n            return (IFeeManager.SettlementType.None, address(0), 0);\\n        }\\n\\n        emit Settled(_comptrollerProxy, payer_, sharesDue_, forSpecificAssets);\\n\\n        return (getSettlementType(), payer_, sharesDue_);\\n    }\\n\\n    /// @notice Gets whether the fee settles and requires GAV on a particular hook\\n    /// @param _hook The FeeHook\\n    /// @return settles_ True if the fee settles on the _hook\\n    /// @return usesGav_ True if the fee uses GAV during settle() for the _hook\\n    function settlesOnHook(IFeeManager.FeeHook _hook)\\n        external\\n        view\\n        override\\n        returns (bool settles_, bool usesGav_)\\n    {\\n        if (_hook == IFeeManager.FeeHook.PreRedeemShares) {\\n            return (true, false);\\n        }\\n\\n        return (false, false);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the fee rate for an in-kind redemption\\n    /// @param _comptrollerProxy The ComptrollerProxy contract for the fund\\n    /// @return rate_ The fee rate\\n    function getInKindRateForFund(address _comptrollerProxy) public view returns (uint256 rate_) {\\n        return comptrollerProxyToFeeInfo[_comptrollerProxy].inKindRate;\\n    }\\n\\n    /// @notice Gets the `SETTLEMENT_TYPE` variable\\n    /// @return settlementType_ The `SETTLEMENT_TYPE` variable value\\n    function getSettlementType() public view returns (IFeeManager.SettlementType settlementType_) {\\n        return SETTLEMENT_TYPE;\\n    }\\n\\n    /// @notice Gets the fee rate for a specific assets redemption\\n    /// @param _comptrollerProxy The ComptrollerProxy contract for the fund\\n    /// @return rate_ The fee rate\\n    function getSpecificAssetsRateForFund(address _comptrollerProxy)\\n        public\\n        view\\n        returns (uint256 rate_)\\n    {\\n        return comptrollerProxyToFeeInfo[_comptrollerProxy].specificAssetsRate;\\n    }\\n}\\n\",\"keccak256\":\"0x5db95baa1ba9312cf22745331635831ac765913a661c69bfdd5b63010ba524f3\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/fees/utils/FeeBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../IFee.sol\\\";\\n\\n/// @title FeeBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Abstract base contract for all fees\\nabstract contract FeeBase is IFee {\\n    address internal immutable FEE_MANAGER;\\n\\n    modifier onlyFeeManager {\\n        require(msg.sender == FEE_MANAGER, \\\"Only the FeeManger can make this call\\\");\\n        _;\\n    }\\n\\n    constructor(address _feeManager) public {\\n        FEE_MANAGER = _feeManager;\\n    }\\n\\n    /// @notice Allows Fee to run logic during fund activation\\n    /// @dev Unimplemented by default, may be overrode.\\n    function activateForFund(address, address) external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Gets the recipient of the fee for a given fund\\n    /// @dev address(0) signifies the VaultProxy owner.\\n    /// Returns address(0) by default, can be overridden by fee.\\n    function getRecipientForFund(address)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address recipient_)\\n    {\\n        return address(0);\\n    }\\n\\n    /// @notice Runs payout logic for a fee that utilizes shares outstanding as its settlement type\\n    /// @dev Returns false by default, can be overridden by fee\\n    function payout(address, address) external virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    /// @notice Update fee state after all settlement has occurred during a given fee hook\\n    /// @dev Unimplemented by default, can be overridden by fee\\n    function update(\\n        address,\\n        address,\\n        IFeeManager.FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Gets whether the fee updates and requires GAV on a particular hook\\n    /// @return updates_ True if the fee updates on the _hook\\n    /// @return usesGav_ True if the fee uses GAV during update() for the _hook\\n    /// @dev Returns false values by default, can be overridden by fee\\n    function updatesOnHook(IFeeManager.FeeHook)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool updates_, bool usesGav_)\\n    {\\n        return (false, false);\\n    }\\n\\n    /// @notice Helper to parse settlement arguments from encoded data for PreBuyShares fee hook\\n    function __decodePreBuySharesSettlementData(bytes memory _settlementData)\\n        internal\\n        pure\\n        returns (address buyer_, uint256 investmentAmount_)\\n    {\\n        return abi.decode(_settlementData, (address, uint256));\\n    }\\n\\n    /// @notice Helper to parse settlement arguments from encoded data for PreRedeemShares fee hook\\n    function __decodePreRedeemSharesSettlementData(bytes memory _settlementData)\\n        internal\\n        pure\\n        returns (\\n            address redeemer_,\\n            uint256 sharesQuantity_,\\n            bool forSpecificAssets_\\n        )\\n    {\\n        return abi.decode(_settlementData, (address, uint256, bool));\\n    }\\n\\n    /// @notice Helper to parse settlement arguments from encoded data for PostBuyShares fee hook\\n    function __decodePostBuySharesSettlementData(bytes memory _settlementData)\\n        internal\\n        pure\\n        returns (\\n            address buyer_,\\n            uint256 investmentAmount_,\\n            uint256 sharesIssued_\\n        )\\n    {\\n        return abi.decode(_settlementData, (address, uint256, uint256));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FEE_MANAGER` variable\\n    /// @return feeManager_ The `FEE_MANAGER` variable value\\n    function getFeeManager() external view returns (address feeManager_) {\\n        return FEE_MANAGER;\\n    }\\n}\\n\",\"keccak256\":\"0x73bd381de7da4bd7e8bdb9adac4bdf5be2af13b758f16c5d64c709b158b1927a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610a81380380610a818339818101604052602081101561003357600080fd5b50516001600160601b0319606082901b16608052600360f81b60a0526001600160a01b03166003610a00610081600039806107b5525080610440528061064b528061080f5250610a006000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806362780b3c1161007157806362780b3c1461033a5780637bdd5b1d1461037c578063a8a0fa7d146103a5578063b78b4813146103cb578063e337a91f1461040d578063f2d638261461042d576100b4565b80630f5f6b4f146100b9578063223e65051461013b578063233faf5f146101735780633146d05814610206578063320f0ddd1461023457806341892d7e1461026f575b600080fd5b610139600480360360408110156100cf57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100fa57600080fd5b82018360208201111561010c57600080fd5b8035906020019184600183028401116401000000008311171561012e57600080fd5b509092509050610435565b005b6101616004803603602081101561015157600080fd5b50356001600160a01b03166105e2565b60408051918252519081900360200190f35b610139600480360360a081101561018957600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156101c757600080fd5b8201836020820111156101d957600080fd5b803590602001918460018302840111640100000000831117156101fb57600080fd5b919350915035610601565b6101396004803603604081101561021c57600080fd5b506001600160a01b0381358116916020013516610609565b6102546004803603602081101561024a57600080fd5b503560ff1661060d565b60408051921515835290151560208301528051918290030190f35b610302600480360360a081101561028557600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156102c357600080fd5b8201836020820111156102d557600080fd5b803590602001918460018302840111640100000000831117156102f757600080fd5b91935091503561063c565b6040518084600581111561031257fe5b8152602001836001600160a01b03168152602001828152602001935050505060405180910390f35b6103606004803603602081101561035057600080fd5b50356001600160a01b03166107ad565b604080516001600160a01b039092168252519081900360200190f35b6103846107b3565b6040518082600581111561039457fe5b815260200191505060405180910390f35b610161600480360360208110156103bb57600080fd5b50356001600160a01b03166107d7565b6103f9600480360360408110156103e157600080fd5b506001600160a01b03813581169160200135166107fc565b604080519115158252519081900360200190f35b6102546004803603602081101561042357600080fd5b503560ff16610805565b61036061080d565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461049c5760405162461bcd60e51b81526004018080602001828103825260258152602001806109556025913960400191505060405180910390fd5b600080838360408110156104af57600080fd5b5061ffff81358116935060209091013516905061271082106105025760405162461bcd60e51b815260040180806020018281038252602881526020018061092d6028913960400191505060405180910390fd5b6127108161ffff16106105465760405162461bcd60e51b815260040180806020018281038252603081526020018061097a6030913960400191505060405180910390fd5b60408051808201825261ffff84811680835284821660208085018281526001600160a01b038c16600081815280845288902096518754925161ffff199093169087161763ffff0000191662010000929096169190910294909417909455845191825292810192909252825190927f9f856f74192181b265e61298e386477299c53e0cb24be55a84416f2af4ba4a61928290030190a25050505050565b6001600160a01b031660009081526020819052604090205461ffff1690565b505050505050565b5050565b600080600383600381111561061e57fe5b14156106305750600190506000610637565b5060009050805b915091565b60008080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106a75760405162461bcd60e51b81526004018080602001828103825260258152602001806109556025913960400191505060405180910390fd5b6000806106e988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061083192505050565b919550909250905060008215610709576107028c6107d7565b9050610715565b6107128c6105e2565b90505b61072b6127106107258484610865565b906108c5565b9350836107455760008060009550955095505050506107a1565b821515856001600160a01b03168d6001600160a01b03167f3535fa1da8a29b0e085cee0bb81ac6587dd875222e0854b76f3ffa3c16ab1a7f876040518082815260200191505060405180910390a461079b6107b3565b95505050505b96509650969350505050565b50600090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b031660009081526020819052604090205462010000900461ffff1690565b60005b92915050565b600080915091565b7f000000000000000000000000000000000000000000000000000000000000000090565b600080600083806020019051606081101561084b57600080fd5b508051602082015160409092015190969195509350915050565b600082610874575060006107ff565b8282028284828161088157fe5b04146108be5760405162461bcd60e51b81526004018080602001828103825260218152602001806109aa6021913960400191505060405180910390fd5b9392505050565b600080821161091b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161092457fe5b04939250505056fe61646446756e6453657474696e67733a20696e4b696e6452617465206d61782065786365656465644f6e6c7920746865204665654d616e6765722063616e206d616b6520746869732063616c6c61646446756e6453657474696e67733a20737065636966696341737365747352617465206d6178206578636565646564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220d387c12d7dc8df59efffac743d690af05b86882ddf2bfd4a61df78903dac61dc64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806362780b3c1161007157806362780b3c1461033a5780637bdd5b1d1461037c578063a8a0fa7d146103a5578063b78b4813146103cb578063e337a91f1461040d578063f2d638261461042d576100b4565b80630f5f6b4f146100b9578063223e65051461013b578063233faf5f146101735780633146d05814610206578063320f0ddd1461023457806341892d7e1461026f575b600080fd5b610139600480360360408110156100cf57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100fa57600080fd5b82018360208201111561010c57600080fd5b8035906020019184600183028401116401000000008311171561012e57600080fd5b509092509050610435565b005b6101616004803603602081101561015157600080fd5b50356001600160a01b03166105e2565b60408051918252519081900360200190f35b610139600480360360a081101561018957600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156101c757600080fd5b8201836020820111156101d957600080fd5b803590602001918460018302840111640100000000831117156101fb57600080fd5b919350915035610601565b6101396004803603604081101561021c57600080fd5b506001600160a01b0381358116916020013516610609565b6102546004803603602081101561024a57600080fd5b503560ff1661060d565b60408051921515835290151560208301528051918290030190f35b610302600480360360a081101561028557600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156102c357600080fd5b8201836020820111156102d557600080fd5b803590602001918460018302840111640100000000831117156102f757600080fd5b91935091503561063c565b6040518084600581111561031257fe5b8152602001836001600160a01b03168152602001828152602001935050505060405180910390f35b6103606004803603602081101561035057600080fd5b50356001600160a01b03166107ad565b604080516001600160a01b039092168252519081900360200190f35b6103846107b3565b6040518082600581111561039457fe5b815260200191505060405180910390f35b610161600480360360208110156103bb57600080fd5b50356001600160a01b03166107d7565b6103f9600480360360408110156103e157600080fd5b506001600160a01b03813581169160200135166107fc565b604080519115158252519081900360200190f35b6102546004803603602081101561042357600080fd5b503560ff16610805565b61036061080d565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461049c5760405162461bcd60e51b81526004018080602001828103825260258152602001806109556025913960400191505060405180910390fd5b600080838360408110156104af57600080fd5b5061ffff81358116935060209091013516905061271082106105025760405162461bcd60e51b815260040180806020018281038252602881526020018061092d6028913960400191505060405180910390fd5b6127108161ffff16106105465760405162461bcd60e51b815260040180806020018281038252603081526020018061097a6030913960400191505060405180910390fd5b60408051808201825261ffff84811680835284821660208085018281526001600160a01b038c16600081815280845288902096518754925161ffff199093169087161763ffff0000191662010000929096169190910294909417909455845191825292810192909252825190927f9f856f74192181b265e61298e386477299c53e0cb24be55a84416f2af4ba4a61928290030190a25050505050565b6001600160a01b031660009081526020819052604090205461ffff1690565b505050505050565b5050565b600080600383600381111561061e57fe5b14156106305750600190506000610637565b5060009050805b915091565b60008080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106a75760405162461bcd60e51b81526004018080602001828103825260258152602001806109556025913960400191505060405180910390fd5b6000806106e988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061083192505050565b919550909250905060008215610709576107028c6107d7565b9050610715565b6107128c6105e2565b90505b61072b6127106107258484610865565b906108c5565b9350836107455760008060009550955095505050506107a1565b821515856001600160a01b03168d6001600160a01b03167f3535fa1da8a29b0e085cee0bb81ac6587dd875222e0854b76f3ffa3c16ab1a7f876040518082815260200191505060405180910390a461079b6107b3565b95505050505b96509650969350505050565b50600090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b031660009081526020819052604090205462010000900461ffff1690565b60005b92915050565b600080915091565b7f000000000000000000000000000000000000000000000000000000000000000090565b600080600083806020019051606081101561084b57600080fd5b508051602082015160409092015190969195509350915050565b600082610874575060006107ff565b8282028284828161088157fe5b04146108be5760405162461bcd60e51b81526004018080602001828103825260218152602001806109aa6021913960400191505060405180910390fd5b9392505050565b600080821161091b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161092457fe5b04939250505056fe61646446756e6453657474696e67733a20696e4b696e6452617465206d61782065786365656465644f6e6c7920746865204665654d616e6765722063616e206d616b6520746869732063616c6c61646446756e6453657474696e67733a20737065636966696341737365747352617465206d6178206578636565646564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220d387c12d7dc8df59efffac743d690af05b86882ddf2bfd4a61df78903dac61dc64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "activateForFund(address,address)": {
        "details": "Unimplemented by default, may be overrode."
      },
      "addFundSettings(address,bytes)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_settingsData": "Encoded settings to apply to the fee for a fund"
        }
      },
      "getFeeManager()": {
        "returns": {
          "feeManager_": "The `FEE_MANAGER` variable value"
        }
      },
      "getInKindRateForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy contract for the fund"
        },
        "returns": {
          "rate_": "The fee rate"
        }
      },
      "getRecipientForFund(address)": {
        "details": "address(0) signifies the VaultProxy owner. Returns address(0) by default, can be overridden by fee."
      },
      "getSettlementType()": {
        "returns": {
          "settlementType_": "The `SETTLEMENT_TYPE` variable value"
        }
      },
      "getSpecificAssetsRateForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy contract for the fund"
        },
        "returns": {
          "rate_": "The fee rate"
        }
      },
      "payout(address,address)": {
        "details": "Returns false by default, can be overridden by fee"
      },
      "settle(address,address,uint8,bytes,uint256)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_settlementData": "Encoded args to use in calculating the settlement"
        },
        "returns": {
          "payer_": "The payer of shares due",
          "settlementType_": "The type of settlement",
          "sharesDue_": "The amount of shares due"
        }
      },
      "settlesOnHook(uint8)": {
        "params": {
          "_hook": "The FeeHook"
        },
        "returns": {
          "settles_": "True if the fee settles on the _hook",
          "usesGav_": "True if the fee uses GAV during settle() for the _hook"
        }
      },
      "update(address,address,uint8,bytes,uint256)": {
        "details": "Unimplemented by default, can be overridden by fee"
      },
      "updatesOnHook(uint8)": {
        "details": "Returns false values by default, can be overridden by fee",
        "returns": {
          "updates_": "True if the fee updates on the _hook",
          "usesGav_": "True if the fee uses GAV during update() for the _hook"
        }
      }
    },
    "title": "ExitRateBurnFee Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(address,address)": {
        "notice": "Allows Fee to run logic during fund activation"
      },
      "addFundSettings(address,bytes)": {
        "notice": "Add the initial fee settings for a fund"
      },
      "getFeeManager()": {
        "notice": "Gets the `FEE_MANAGER` variable"
      },
      "getInKindRateForFund(address)": {
        "notice": "Gets the fee rate for an in-kind redemption"
      },
      "getRecipientForFund(address)": {
        "notice": "Gets the recipient of the fee for a given fund"
      },
      "getSettlementType()": {
        "notice": "Gets the `SETTLEMENT_TYPE` variable"
      },
      "getSpecificAssetsRateForFund(address)": {
        "notice": "Gets the fee rate for a specific assets redemption"
      },
      "payout(address,address)": {
        "notice": "Runs payout logic for a fee that utilizes shares outstanding as its settlement type"
      },
      "settle(address,address,uint8,bytes,uint256)": {
        "notice": "Settles the fee"
      },
      "settlesOnHook(uint8)": {
        "notice": "Gets whether the fee settles and requires GAV on a particular hook"
      },
      "update(address,address,uint8,bytes,uint256)": {
        "notice": "Update fee state after all settlement has occurred during a given fee hook"
      },
      "updatesOnHook(uint8)": {
        "notice": "Gets whether the fee updates and requires GAV on a particular hook"
      }
    },
    "notice": "An ExitRateFee that burns the fee shares",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20436,
        "contract": "contracts/release/extensions/fee-manager/fees/ExitRateBurnFee.sol:ExitRateBurnFee",
        "label": "comptrollerProxyToFeeInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(FeeInfo)20427_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(FeeInfo)20427_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ExitRateFeeBase.FeeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeInfo)20427_storage"
      },
      "t_struct(FeeInfo)20427_storage": {
        "encoding": "inplace",
        "label": "struct ExitRateFeeBase.FeeInfo",
        "members": [
          {
            "astId": 20424,
            "contract": "contracts/release/extensions/fee-manager/fees/ExitRateBurnFee.sol:ExitRateBurnFee",
            "label": "inKindRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 20426,
            "contract": "contracts/release/extensions/fee-manager/fees/ExitRateBurnFee.sol:ExitRateBurnFee",
            "label": "specificAssetsRate",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}