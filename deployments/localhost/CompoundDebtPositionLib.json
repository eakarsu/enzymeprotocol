{
  "address": "0x5D42EBdBBa61412295D7b0302d6F50aC449Ddb4F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_compoundComptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_compToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AssetBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BorrowedAssetRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralAssetRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "assetIsCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowedAsset",
          "type": "address"
        }
      ],
      "name": "getCTokenFromBorrowedAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "cToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCompToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "compToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCompoundComptroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "compoundComptroller_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebtAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "assets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getManagedAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "assets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "wethToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        }
      ],
      "name": "receiveCallFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf5e1020d10db14d5663a5e1d5384966d9b45ad4ff883e1b6953360da152a6cb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5D42EBdBBa61412295D7b0302d6F50aC449Ddb4F",
    "transactionIndex": 0,
    "gasUsed": "1945739",
    "logsBloom": "0x
    "blockHash": "0xfe3f6130a17813da9db23020320fdc4c8bd9988840b1314904e115acf1739b31",
    "transactionHash": "0xdf5e1020d10db14d5663a5e1d5384966d9b45ad4ff883e1b6953360da152a6cb",
    "logs": [],
    "blockNumber": 14507994,
    "cumulativeGasUsed": "1945739",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B",
    "0xc00e94Cb662C3520282E6f5717214004A7f26888",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
  ],
  "solcInputHash": "e128c99a7ad98ab17bfe5eac6103458b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compoundComptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowedAssetRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralAssetRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"assetIsCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowedAsset\",\"type\":\"address\"}],\"name\":\"getCTokenFromBorrowedAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"compToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompoundComptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"compoundComptroller_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"assets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagedAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"assets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"receiveCallFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"assetIsCollateral(address)\":{\"returns\":{\"isCollateral\":\"True if the asset is part of the collateral assets of the external position\"}},\"getCTokenFromBorrowedAsset(address)\":{\"params\":{\"_borrowedAsset\":\"The token for which to get the cToken\"},\"returns\":{\"cToken_\":\"The cToken\"}},\"getCompToken()\":{\"returns\":{\"compToken_\":\"The `COMP_TOKEN` variable value\"}},\"getCompoundComptroller()\":{\"returns\":{\"compoundComptroller_\":\"The `COMPOUND_COMPTROLLER` variable value\"}},\"getDebtAssets()\":{\"returns\":{\"amounts_\":\"Amount of assets in external\",\"assets_\":\"Assets with an active loan\"}},\"getManagedAssets()\":{\"returns\":{\"amounts_\":\"Amount of assets being used as collateral\",\"assets_\":\"Assets with balance > 0 that are being used as collateral\"}},\"getWethToken()\":{\"returns\":{\"wethToken_\":\"The `WETH_TOKEN` variable value\"}},\"init(bytes)\":{\"details\":\"Nothing to initialize for this contract\"},\"receiveCallFromVault(bytes)\":{\"params\":{\"_actionData\":\"Encoded data to execute the action\"}}},\"title\":\"CompoundDebtPositionLib Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetIsCollateral(address)\":{\"notice\":\"Checks whether an asset is collateral\"},\"getCTokenFromBorrowedAsset(address)\":{\"notice\":\"Returns the cToken of a given borrowed asset\"},\"getCompToken()\":{\"notice\":\"Gets the `COMP_TOKEN` variable\"},\"getCompoundComptroller()\":{\"notice\":\"Gets the `COMPOUND_COMPTROLLER` variable\"},\"getDebtAssets()\":{\"notice\":\"Retrieves the borrowed assets and balances of the current external position\"},\"getManagedAssets()\":{\"notice\":\"Retrieves the collateral assets and balances of the current external position\"},\"getWethToken()\":{\"notice\":\"Gets the `WETH_TOKEN` variable\"},\"init(bytes)\":{\"notice\":\"Initializes the external position\"},\"receiveCallFromVault(bytes)\":{\"notice\":\"Receives and executes a call from the Vault\"}},\"notice\":\"An External Position library contract for Compound debt positions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/external-position-manager/external-positions/compound-debt/CompoundDebtPositionLib.sol\":\"CompoundDebtPositionLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/persistent/external-positions/IExternalPosition.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPosition Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IExternalPosition {\\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function init(bytes memory) external;\\n\\n    function receiveCallFromVault(bytes memory) external;\\n}\\n\",\"keccak256\":\"0x00e6ea9721e5fd1e72215e4c744306097d7f8b1a834cced5d65a17a924f750ad\",\"license\":\"GPL-3.0\"},\"contracts/persistent/external-positions/compound-debt/CompoundDebtPositionLibBase1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title CompoundDebtPositionLibBase1 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A persistent contract containing all required storage variables and\\n/// required functions for a CompoundDebtPositionLib implementation\\n/// @dev DO NOT EDIT CONTRACT. If new events or storage are necessary, they should be added to\\n/// a numbered CompoundDebtPositionLibBaseXXX that inherits the previous base.\\n/// e.g., `CompoundDebtPositionLibBase2 is CompoundDebtPositionLibBase1`\\n\\ncontract CompoundDebtPositionLibBase1 {\\n    event AssetBorrowed(address indexed asset, uint256 amount);\\n\\n    event BorrowedAssetRepaid(address indexed asset, uint256 amount);\\n\\n    event CollateralAssetAdded(address indexed asset, uint256 amount);\\n\\n    event CollateralAssetRemoved(address indexed asset, uint256 amount);\\n\\n    address[] internal borrowedAssets;\\n    address[] internal collateralAssets;\\n\\n    mapping(address => bool) internal assetToIsCollateral;\\n    mapping(address => address) internal borrowedAssetToCToken;\\n}\\n\",\"keccak256\":\"0x8d9ec130a797916674485208e7f7df50a00d283cd68735c264f1785a27fa9436\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/external-position-manager/external-positions/compound-debt/CompoundDebtPositionLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../../persistent/external-positions/compound-debt/CompoundDebtPositionLibBase1.sol\\\";\\nimport \\\"../../../../interfaces/ICERC20.sol\\\";\\nimport \\\"../../../../interfaces/ICEther.sol\\\";\\nimport \\\"../../../../interfaces/ICompoundComptroller.sol\\\";\\nimport \\\"../../../../interfaces/IWETH.sol\\\";\\nimport \\\"../../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"./ICompoundDebtPosition.sol\\\";\\n\\n/// @title CompoundDebtPositionLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice An External Position library contract for Compound debt positions\\ncontract CompoundDebtPositionLib is CompoundDebtPositionLibBase1, ICompoundDebtPosition {\\n    using AddressArrayLib for address[];\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    address private immutable COMP_TOKEN;\\n    address private immutable COMPOUND_COMPTROLLER;\\n    address private immutable WETH_TOKEN;\\n\\n    constructor(\\n        address _compoundComptroller,\\n        address _compToken,\\n        address _weth\\n    ) public {\\n        COMPOUND_COMPTROLLER = _compoundComptroller;\\n        COMP_TOKEN = _compToken;\\n        WETH_TOKEN = _weth;\\n    }\\n\\n    /// @notice Initializes the external position\\n    /// @dev Nothing to initialize for this contract\\n    function init(bytes memory) external override {}\\n\\n    /// @notice Receives and executes a call from the Vault\\n    /// @param _actionData Encoded data to execute the action\\n    function receiveCallFromVault(bytes memory _actionData) external override {\\n        (uint256 actionId, bytes memory actionArgs) = abi.decode(_actionData, (uint256, bytes));\\n\\n        (address[] memory assets, uint256[] memory amounts, bytes memory data) = abi.decode(\\n            actionArgs,\\n            (address[], uint256[], bytes)\\n        );\\n\\n        if (actionId == uint256(ExternalPositionActions.AddCollateral)) {\\n            __addCollateralAssets(assets, amounts);\\n        } else if (actionId == uint256(ExternalPositionActions.RemoveCollateral)) {\\n            __removeCollateralAssets(assets, amounts);\\n        } else if (actionId == uint256(ExternalPositionActions.Borrow)) {\\n            __borrowAssets(assets, amounts, data);\\n        } else if (actionId == uint256(ExternalPositionActions.RepayBorrow)) {\\n            __repayBorrowedAssets(assets, amounts, data);\\n        } else if (actionId == uint256(ExternalPositionActions.ClaimComp)) {\\n            __claimComp();\\n        } else {\\n            revert(\\\"receiveCallFromVault: Invalid actionId\\\");\\n        }\\n    }\\n\\n    /// @dev Adds assets as collateral\\n    function __addCollateralAssets(address[] memory _assets, uint256[] memory _amounts) private {\\n        uint256[] memory enterMarketErrorCodes = ICompoundComptroller(getCompoundComptroller())\\n            .enterMarkets(_assets);\\n\\n        for (uint256 i; i < _assets.length; i++) {\\n            require(\\n                enterMarketErrorCodes[i] == 0,\\n                \\\"__addCollateralAssets: Error while calling enterMarkets on Compound\\\"\\n            );\\n\\n            if (!assetIsCollateral(_assets[i])) {\\n                assetToIsCollateral[_assets[i]] = true;\\n                collateralAssets.push(_assets[i]);\\n            }\\n\\n            emit CollateralAssetAdded(_assets[i], _amounts[i]);\\n        }\\n    }\\n\\n    /// @dev Borrows assets using the available collateral\\n    function __borrowAssets(\\n        address[] memory _assets,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) private {\\n        address[] memory cTokens = abi.decode(_data, (address[]));\\n\\n        for (uint256 i; i < _assets.length; i++) {\\n            require(\\n                ICERC20(cTokens[i]).borrow(_amounts[i]) == 0,\\n                \\\"__borrowAssets: Problem while borrowing from Compound\\\"\\n            );\\n\\n            // The cToken-token pair is already validated by the parser\\n            if (getCTokenFromBorrowedAsset(_assets[i]) == address(0)) {\\n                borrowedAssetToCToken[_assets[i]] = cTokens[i];\\n                borrowedAssets.push(_assets[i]);\\n            }\\n\\n            if (_assets[i] == getWethToken()) {\\n                IWETH(payable(getWethToken())).deposit{value: _amounts[i]}();\\n            }\\n\\n            ERC20(_assets[i]).safeTransfer(msg.sender, _amounts[i]);\\n\\n            emit AssetBorrowed(_assets[i], _amounts[i]);\\n        }\\n    }\\n\\n    /// @dev Claims the COMP_TOKEN accrued in all markets\\n    function __claimComp() private {\\n        ICompoundComptroller(getCompoundComptroller()).claimComp(address(this));\\n\\n        ERC20 compToken = ERC20(getCompToken());\\n\\n        compToken.safeTransfer(msg.sender, compToken.balanceOf(address(this)));\\n    }\\n\\n    /// @dev Removes assets from collateral\\n    function __removeCollateralAssets(address[] memory _assets, uint256[] memory _amounts)\\n        private\\n    {\\n        for (uint256 i; i < _assets.length; i++) {\\n            require(\\n                assetIsCollateral(_assets[i]),\\n                \\\"__removeCollateralAssets: Asset is not collateral\\\"\\n            );\\n\\n            if (ERC20(_assets[i]).balanceOf(address(this)) == _amounts[i]) {\\n                // If the full collateral of an asset is removed, it can be removed from collateral assets\\n                assetToIsCollateral[_assets[i]] = false;\\n\\n                collateralAssets.removeStorageItem(_assets[i]);\\n            }\\n\\n            ERC20(_assets[i]).safeTransfer(msg.sender, _amounts[i]);\\n\\n            emit CollateralAssetRemoved(_assets[i], _amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Repays borrowed assets, reducing the borrow balance\\n    function __repayBorrowedAssets(\\n        address[] memory _assets,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) private {\\n        address[] memory cTokens = abi.decode(_data, (address[]));\\n\\n        for (uint256 i; i < _assets.length; i++) {\\n            require(\\n                getCTokenFromBorrowedAsset(_assets[i]) != address(0),\\n                \\\"__repayBorrowedAssets: Asset has not been borrowed\\\"\\n            );\\n\\n            require(\\n                ERC20(_assets[i]).balanceOf(address(this)) >= _amounts[i],\\n                \\\"__repayBorrowedAssets: Insufficient balance\\\"\\n            );\\n\\n            // Accrue interest to get the current borrow balance\\n            // NOTE: Used instead of borrow-balance-current: https://compound.finance/docs/ctokens#borrow-balance\\n            require(\\n                ICERC20(cTokens[i]).accrueInterest() == 0,\\n                \\\"__repayBorrowedAssets: Error while calling accrueInterest\\\"\\n            );\\n\\n            uint256 borrowBalance = ICERC20(cTokens[i]).borrowBalanceStored(address(this));\\n\\n            if (_amounts[i] < borrowBalance) {\\n                // Repaid amount doesn't cover the full balance\\n                __repayBorrowedAsset(cTokens[i], _assets[i], _amounts[i]);\\n            } else {\\n                // Amount covers the full borrow balance, so it can be removed from borrowed balances\\n                __repayBorrowedAsset(cTokens[i], _assets[i], borrowBalance);\\n\\n                // Reset borrowed asset cToken and remove it from the list of borrowed assets\\n                delete borrowedAssetToCToken[_assets[i]];\\n                borrowedAssets.removeStorageItem(_assets[i]);\\n\\n                // Send back the remaining token amount after paying the loan\\n                if (_amounts[i] > borrowBalance) {\\n                    ERC20(_assets[i]).safeTransfer(msg.sender, _amounts[i].sub(borrowBalance));\\n                }\\n            }\\n\\n            emit BorrowedAssetRepaid(_assets[i], _amounts[i]);\\n        }\\n    }\\n\\n    /// @dev Helper used to repay a borrowed asset to a Compound cToken\\n    function __repayBorrowedAsset(\\n        address _cToken,\\n        address _token,\\n        uint256 _amount\\n    ) private {\\n        if (_token == getWethToken()) {\\n            IWETH(payable(getWethToken())).withdraw(_amount);\\n            ICEther(_cToken).repayBorrow{value: _amount}();\\n        } else {\\n            ERC20(_token).safeApprove(_cToken, _amount);\\n\\n            require(\\n                ICERC20(_cToken).repayBorrow(_amount) == 0,\\n                \\\"__repayBorrowedAsset: Error while repaying borrow\\\"\\n            );\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Retrieves the borrowed assets and balances of the current external position\\n    /// @return assets_ Assets with an active loan\\n    /// @return amounts_ Amount of assets in external\\n    function getDebtAssets()\\n        external\\n        override\\n        returns (address[] memory assets_, uint256[] memory amounts_)\\n    {\\n        assets_ = borrowedAssets;\\n        amounts_ = new uint256[](assets_.length);\\n\\n        for (uint256 i; i < assets_.length; i++) {\\n            address cToken = getCTokenFromBorrowedAsset(assets_[i]);\\n            amounts_[i] = ICERC20(cToken).borrowBalanceStored(address(this));\\n        }\\n\\n        return (assets_, amounts_);\\n    }\\n\\n    /// @notice Retrieves the collateral assets and balances of the current external position\\n    /// @return assets_ Assets with balance > 0 that are being used as collateral\\n    /// @return amounts_ Amount of assets being used as collateral\\n    function getManagedAssets()\\n        external\\n        override\\n        returns (address[] memory assets_, uint256[] memory amounts_)\\n    {\\n        assets_ = collateralAssets;\\n        amounts_ = new uint256[](collateralAssets.length);\\n\\n        for (uint256 i; i < assets_.length; i++) {\\n            amounts_[i] = ERC20(assets_[i]).balanceOf(address(this));\\n        }\\n\\n        return (assets_, amounts_);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Checks whether an asset is collateral\\n    /// @return isCollateral True if the asset is part of the collateral assets of the external position\\n    function assetIsCollateral(address _asset) public view returns (bool isCollateral) {\\n        return assetToIsCollateral[_asset];\\n    }\\n\\n    /// @notice Gets the `COMPOUND_COMPTROLLER` variable\\n    /// @return compoundComptroller_ The `COMPOUND_COMPTROLLER` variable value\\n    function getCompoundComptroller() public view returns (address compoundComptroller_) {\\n        return COMPOUND_COMPTROLLER;\\n    }\\n\\n    /// @notice Gets the `COMP_TOKEN` variable\\n    /// @return compToken_ The `COMP_TOKEN` variable value\\n    function getCompToken() public view returns (address compToken_) {\\n        return COMP_TOKEN;\\n    }\\n\\n    /// @notice Returns the cToken of a given borrowed asset\\n    /// @param _borrowedAsset The token for which to get the cToken\\n    /// @return cToken_ The cToken\\n    function getCTokenFromBorrowedAsset(address _borrowedAsset)\\n        public\\n        view\\n        returns (address cToken_)\\n    {\\n        return borrowedAssetToCToken[_borrowedAsset];\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() public view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n}\\n\",\"keccak256\":\"0x99fcb109ea431ff22974acf0fe304a7f83936508c6c1b9b609aae214b014dcf0\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/external-position-manager/external-positions/compound-debt/ICompoundDebtPosition.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport \\\"../../../../../persistent/external-positions/IExternalPosition.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICompoundDebtPosition Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICompoundDebtPosition is IExternalPosition {\\n    enum ExternalPositionActions {AddCollateral, RemoveCollateral, Borrow, RepayBorrow, ClaimComp}\\n}\\n\",\"keccak256\":\"0x060fac5d01c90a32d2acb5f412f247b05ff4d6f18615f7298280b1d2aeb35bd2\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity ^0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ICERC20 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Minimal interface for interactions with Compound tokens (cTokens)\\ninterface ICERC20 is IERC20 {\\n    function accrueInterest() external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function borrowBalanceStored(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function mint(uint256) external returns (uint256);\\n\\n    function redeem(uint256) external returns (uint256);\\n\\n    function repayBorrow(uint256) external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function underlying() external returns (address);\\n}\\n\",\"keccak256\":\"0x5c29768a88fc3f6e49fc0d55ecf02b2acf866c013b1bb3903532f3a444f8995b\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICEther.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity ^0.6.12;\\n\\n/// @title ICEther Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Minimal interface for interactions with Compound Ether\\ninterface ICEther {\\n    function mint() external payable;\\n\\n    function repayBorrow() external payable;\\n}\\n\",\"keccak256\":\"0x49c4fc5b190de0db05e3c8fe41f5bebb3eb5176205ef0c4171c8033a035d2987\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICompoundComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity ^0.6.12;\\n\\n/// @title ICompoundComptroller Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Minimal interface for interactions with Compound Comptroller\\ninterface ICompoundComptroller {\\n    function claimComp(address) external;\\n\\n    function enterMarkets(address[] calldata) external returns (uint256[] memory);\\n\\n    function exitMarket(address) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x345878a25b875980eaa63f561123e210dd559bebc240e3dbf8c2a2ba07244acd\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title WETH Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x85b5e76c50599abed5b16555065e4809b25fd0e6f75a63cf72269c1545e96b96\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    /// @dev Helper to remove an item from a storage array\\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\\n        internal\\n        returns (bool removed_)\\n    {\\n        uint256 itemCount = _self.length;\\n        for (uint256 i; i < itemCount; i++) {\\n            if (_self[i] == _itemToRemove) {\\n                if (i < itemCount - 1) {\\n                    _self[i] = _self[itemCount - 1];\\n                }\\n                _self.pop();\\n                removed_ = true;\\n                break;\\n            }\\n        }\\n\\n        return removed_;\\n    }\\n\\n    ////////////\\n    // MEMORY //\\n    ////////////\\n\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to merge the unique items of a second array.\\n    /// Does not consider uniqueness of either array, only relative uniqueness.\\n    /// Preserves ordering.\\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        uint256 newUniqueItemCount;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                newUniqueItemCount++;\\n            }\\n        }\\n\\n        if (newUniqueItemCount == 0) {\\n            return _self;\\n        }\\n\\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        uint256 nextArrayIndex = _self.length;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\\n                nextArrayIndex++;\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0x23809cb635aee1cd1aad36952627ce55739cf0bea3408819a0eddee2932936e7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516122c93803806122c98339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606092831b811660a05292821b8316608052901b1660c05260805160601c60a05160601c60c05160601c612232610097600039806103215250806104f052508061036652506122326000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806380daddb81161006657806380daddb8146101a45780639e209ad114610245578063d889378e1461024d578063e5c23a9714610273578063ecd658b41461031757610093565b80634c252f91146100985780634ddf47d4146100bc5780634eeb4a161461016257806370a58ec61461019c575b600080fd5b6100a061031f565b604080516001600160a01b039092168252519081900360200190f35b610160600480360360208110156100d257600080fd5b810190602081018135600160201b8111156100ec57600080fd5b8201836020820111156100fe57600080fd5b803590602001918460018302840111600160201b8311171561011f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610343945050505050565b005b6101886004803603602081101561017857600080fd5b50356001600160a01b0316610346565b604080519115158252519081900360200190f35b6100a0610364565b6101ac610388565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101f05781810151838201526020016101d8565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561022f578181015183820152602001610217565b5050505090500194505050505060405180910390f35b6100a06104ee565b6100a06004803603602081101561026357600080fd5b50356001600160a01b0316610512565b6101606004803603602081101561028957600080fd5b810190602081018135600160201b8111156102a357600080fd5b8201836020820111156102b557600080fd5b803590602001918460018302840111600160201b831117156102d657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610530945050505050565b6101ac61088a565b7f000000000000000000000000000000000000000000000000000000000000000090565b50565b6001600160a01b031660009081526002602052604090205460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000090565b60608060018054806020026020016040519081016040528092919081815260200182805480156103e157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103c3575b50506001549395505067ffffffffffffffff8311915050801561040357600080fd5b5060405190808252806020026020018201604052801561042d578160200160208202803683370190505b50905060005b82518110156104e95782818151811061044857fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561049c57600080fd5b505afa1580156104b0573d6000803e3d6000fd5b505050506040513d60208110156104c657600080fd5b505182518390839081106104d657fe5b6020908102919091010152600101610433565b509091565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b039081166000908152600360205260409020541690565b6000606082806020019051604081101561054957600080fd5b815160208301805160405192949293830192919084600160201b82111561056f57600080fd5b90830190602082018581111561058457600080fd5b8251600160201b81118282018810171561059d57600080fd5b82525081516020918201929091019080838360005b838110156105ca5781810151838201526020016105b2565b50505050905090810190601f1680156105f75780820380516001836020036101000a031916815260200191505b5060405250505091509150606080606083806020019051606081101561061c57600080fd5b8101908080516040519392919084600160201b82111561063b57600080fd5b90830190602082018581111561065057600080fd5b82518660208202830111600160201b8211171561066c57600080fd5b82525081516020918201928201910280838360005b83811015610699578181015183820152602001610681565b5050505090500160405260200180516040519392919084600160201b8211156106c157600080fd5b9083019060208201858111156106d657600080fd5b82518660208202830111600160201b821117156106f257600080fd5b82525081516020918201928201910280838360005b8381101561071f578181015183820152602001610707565b5050505090500160405260200180516040519392919084600160201b82111561074757600080fd5b90830190602082018581111561075c57600080fd5b8251600160201b81118282018810171561077557600080fd5b82525081516020918201929091019080838360005b838110156107a257818101518382015260200161078a565b50505050905090810190601f1680156107cf5780820380516001836020036101000a031916815260200191505b50604052505050925092509250600060048111156107e957fe5b8514156107ff576107fa83836109f6565b610882565b6001851415610812576107fa8383610cda565b6002851415610826576107fa838383610f08565b600385141561083a576107fa8383836112ab565b600485141561084b576107fa6117ad565b60405162461bcd60e51b815260040180806020018281038252602681526020018061209e6026913960400191505060405180910390fd5b505050505050565b60608060008054806020026020016040519081016040528092919081815260200182805480156108e357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108c5575b50505050509150815167ffffffffffffffff8111801561090257600080fd5b5060405190808252806020026020018201604052801561092c578160200160208202803683370190505b50905060005b82518110156104e957600061095984838151811061094c57fe5b6020026020010151610512565b9050806001600160a01b03166395dd9193306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156109a857600080fd5b505afa1580156109bc573d6000803e3d6000fd5b505050506040513d60208110156109d257600080fd5b505183518490849081106109e257fe5b602090810291909101015250600101610932565b6060610a006104ee565b6001600160a01b031663c2998238846040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a5e578181015183820152602001610a46565b5050505090500192505050600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610ac057600080fd5b8101908080516040519392919084600160201b821115610adf57600080fd5b908301906020820185811115610af457600080fd5b82518660208202830111600160201b82111715610b1057600080fd5b82525081516020918201928201910280838360005b83811015610b3d578181015183820152602001610b25565b50505050905001604052505050905060005b8351811015610cd457818181518110610b6457fe5b6020026020010151600014610baa5760405162461bcd60e51b81526004018080602001828103825260438152602001806120fd6043913960600191505060405180910390fd5b610bc6848281518110610bb957fe5b6020026020010151610346565b610c6557600160026000868481518110610bdc57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001848281518110610c2957fe5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b838181518110610c7157fe5b60200260200101516001600160a01b03167fde38363fe42a9cae1654e31132bb3736927f007235cf41265805b96de98cf59f848381518110610caf57fe5b60200260200101516040518082815260200191505060405180910390a2600101610b4f565b50505050565b60005b8251811015610f0357610cf5838281518110610bb957fe5b610d305760405162461bcd60e51b8152600401808060200182810382526031815260200180611fe16031913960400191505060405180910390fd5b818181518110610d3c57fe5b6020026020010151838281518110610d5057fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b505050506040513d6020811015610dce57600080fd5b50511415610e5057600060026000858481518110610de857fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550610e4e838281518110610e3657fe5b602002602001015160016118b590919063ffffffff16565b505b610e9433838381518110610e6057fe5b6020026020010151858481518110610e7457fe5b60200260200101516001600160a01b03166119ad9092919063ffffffff16565b828181518110610ea057fe5b60200260200101516001600160a01b03167ffb7cd2a565112408eb382485bb381cf1fc961858030a24b6d20de0a749c2f78a838381518110610ede57fe5b60200260200101516040518082815260200191505060405180910390a2600101610cdd565b505050565b6060818060200190516020811015610f1f57600080fd5b8101908080516040519392919084600160201b821115610f3e57600080fd5b908301906020820185811115610f5357600080fd5b82518660208202830111600160201b82111715610f6f57600080fd5b82525081516020918201928201910280838360005b83811015610f9c578181015183820152602001610f84565b50505050905001604052505050905060005b84518110156112a457818181518110610fc357fe5b60200260200101516001600160a01b031663c5ebeaec858381518110610fe557fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561102357600080fd5b505af1158015611037573d6000803e3d6000fd5b505050506040513d602081101561104d57600080fd5b50511561108b5760405162461bcd60e51b81526004018080602001828103825260358152602001806120696035913960400191505060405180910390fd5b60006001600160a01b03166110a586838151811061094c57fe5b6001600160a01b0316141561116e578181815181106110c057fe5b6020026020010151600360008784815181106110d857fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600085828151811061113257fe5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b61117661031f565b6001600160a01b031685828151811061118b57fe5b60200260200101516001600160a01b03161415611211576111aa61031f565b6001600160a01b031663d0e30db08583815181106111c457fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111f757600080fd5b505af115801561120b573d6000803e3d6000fd5b50505050505b6112353385838151811061122157fe5b6020026020010151878481518110610e7457fe5b84818151811061124157fe5b60200260200101516001600160a01b03167f03c44a7ddb65ca5f1bbeffda35ba96457c370e957138d14005ff3e55551ab50f85838151811061127f57fe5b60200260200101516040518082815260200191505060405180910390a2600101610fae565b5050505050565b60608180602001905160208110156112c257600080fd5b8101908080516040519392919084600160201b8211156112e157600080fd5b9083019060208201858111156112f657600080fd5b82518660208202830111600160201b8211171561131257600080fd5b82525081516020918201928201910280838360005b8381101561133f578181015183820152602001611327565b50505050905001604052505050905060005b84518110156112a45760006001600160a01b031661137486838151811061094c57fe5b6001600160a01b031614156113ba5760405162461bcd60e51b81526004018080602001828103825260328152602001806121406032913960400191505060405180910390fd5b8381815181106113c657fe5b60200260200101518582815181106113da57fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561142e57600080fd5b505afa158015611442573d6000803e3d6000fd5b505050506040513d602081101561145857600080fd5b505110156114975760405162461bcd60e51b815260040180806020018281038252602b81526020018061219c602b913960400191505060405180910390fd5b8181815181106114a357fe5b60200260200101516001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156114e557600080fd5b505af11580156114f9573d6000803e3d6000fd5b505050506040513d602081101561150f57600080fd5b50511561154d5760405162461bcd60e51b81526004018080602001828103825260398152602001806120c46039913960400191505060405180910390fd5b600082828151811061155b57fe5b60200260200101516001600160a01b03166395dd9193306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156115af57600080fd5b505afa1580156115c3573d6000803e3d6000fd5b505050506040513d60208110156115d957600080fd5b5051855190915081908690849081106115ee57fe5b602002602001015110156116455761164083838151811061160b57fe5b602002602001015187848151811061161f57fe5b602002602001015187858151811061163357fe5b60200260200101516119ff565b61173d565b61167683838151811061165457fe5b602002602001015187848151811061166857fe5b6020026020010151836119ff565b6003600087848151811061168657fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154906001600160a01b0302191690556116eb8683815181106116d357fe5b602002602001015160006118b590919063ffffffff16565b50808583815181106116f957fe5b6020026020010151111561173d5761173d336117318388868151811061171b57fe5b6020026020010151611ba090919063ffffffff16565b888581518110610e7457fe5b85828151811061174957fe5b60200260200101516001600160a01b03167fb3ef5936c6a45fc10d27f174d569533c42819c98975f3da26d592c63e94415fe86848151811061178757fe5b60200260200101516040518082815260200191505060405180910390a250600101611351565b6117b56104ee565b6001600160a01b031663e9af0292306040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561180357600080fd5b505af1158015611817573d6000803e3d6000fd5b505050506000611825610364565b905061034333826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561187857600080fd5b505afa15801561188c573d6000803e3d6000fd5b505050506040513d60208110156118a257600080fd5b50516001600160a01b03841691906119ad565b8154600090815b818110156119a557836001600160a01b03168582815481106118da57fe5b6000918252602090912001546001600160a01b0316141561199d57600182038110156119685784600183038154811061190f57fe5b9060005260206000200160009054906101000a90046001600160a01b031685828154811061193957fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8480548061197257fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600192506119a5565b6001016118bc565b505092915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f03908490611bfd565b611a0761031f565b6001600160a01b0316826001600160a01b03161415611ade57611a2861031f565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611a6d57600080fd5b505af1158015611a81573d6000803e3d6000fd5b50505050826001600160a01b0316634e4d9fea826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ac057600080fd5b505af1158015611ad4573d6000803e3d6000fd5b5050505050610f03565b611af26001600160a01b0383168483611cae565b826001600160a01b0316630e752702826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611b3857600080fd5b505af1158015611b4c573d6000803e3d6000fd5b505050506040513d6020811015611b6257600080fd5b505115610f035760405162461bcd60e51b81526004018080602001828103825260318152602001806120126031913960400191505060405180910390fd5b600082821115611bf7576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6060611c52826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611dc19092919063ffffffff16565b805190915015610f0357808060200190516020811015611c7157600080fd5b5051610f035760405162461bcd60e51b815260040180806020018281038252602a815260200180612172602a913960400191505060405180910390fd5b801580611d34575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611d0657600080fd5b505afa158015611d1a573d6000803e3d6000fd5b505050506040513d6020811015611d3057600080fd5b5051155b611d6f5760405162461bcd60e51b81526004018080602001828103825260368152602001806121c76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610f03908490611bfd565b6060611dd08484600085611dda565b90505b9392505050565b606082471015611e1b5760405162461bcd60e51b81526004018080602001828103825260268152602001806120436026913960400191505060405180910390fd5b611e2485611f36565b611e75576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611eb45780518252601f199092019160209182019101611e95565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611f16576040519150601f19603f3d011682016040523d82523d6000602084013e611f1b565b606091505b5091509150611f2b828286611f3c565b979650505050505050565b3b151590565b60608315611f4b575081611dd3565b825115611f5b5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fa5578181015183820152602001611f8d565b50505050905090810190601f168015611fd25780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5f5f72656d6f7665436f6c6c61746572616c4173736574733a204173736574206973206e6f7420636f6c6c61746572616c5f5f7265706179426f72726f77656441737365743a204572726f72207768696c65207265706179696e6720626f72726f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5f5f626f72726f774173736574733a2050726f626c656d207768696c6520626f72726f77696e672066726f6d20436f6d706f756e647265636569766543616c6c46726f6d5661756c743a20496e76616c696420616374696f6e49645f5f7265706179426f72726f7765644173736574733a204572726f72207768696c652063616c6c696e6720616363727565496e7465726573745f5f616464436f6c6c61746572616c4173736574733a204572726f72207768696c652063616c6c696e6720656e7465724d61726b657473206f6e20436f6d706f756e645f5f7265706179426f72726f7765644173736574733a20417373657420686173206e6f74206265656e20626f72726f7765645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645f5f7265706179426f72726f7765644173736574733a20496e73756666696369656e742062616c616e63655361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220d36337fb930ae674a157cb5e38081d4304f8f91c83dac9e0685c3acdd6a5a8c664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806380daddb81161006657806380daddb8146101a45780639e209ad114610245578063d889378e1461024d578063e5c23a9714610273578063ecd658b41461031757610093565b80634c252f91146100985780634ddf47d4146100bc5780634eeb4a161461016257806370a58ec61461019c575b600080fd5b6100a061031f565b604080516001600160a01b039092168252519081900360200190f35b610160600480360360208110156100d257600080fd5b810190602081018135600160201b8111156100ec57600080fd5b8201836020820111156100fe57600080fd5b803590602001918460018302840111600160201b8311171561011f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610343945050505050565b005b6101886004803603602081101561017857600080fd5b50356001600160a01b0316610346565b604080519115158252519081900360200190f35b6100a0610364565b6101ac610388565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101f05781810151838201526020016101d8565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561022f578181015183820152602001610217565b5050505090500194505050505060405180910390f35b6100a06104ee565b6100a06004803603602081101561026357600080fd5b50356001600160a01b0316610512565b6101606004803603602081101561028957600080fd5b810190602081018135600160201b8111156102a357600080fd5b8201836020820111156102b557600080fd5b803590602001918460018302840111600160201b831117156102d657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610530945050505050565b6101ac61088a565b7f000000000000000000000000000000000000000000000000000000000000000090565b50565b6001600160a01b031660009081526002602052604090205460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000090565b60608060018054806020026020016040519081016040528092919081815260200182805480156103e157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103c3575b50506001549395505067ffffffffffffffff8311915050801561040357600080fd5b5060405190808252806020026020018201604052801561042d578160200160208202803683370190505b50905060005b82518110156104e95782818151811061044857fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561049c57600080fd5b505afa1580156104b0573d6000803e3d6000fd5b505050506040513d60208110156104c657600080fd5b505182518390839081106104d657fe5b6020908102919091010152600101610433565b509091565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b039081166000908152600360205260409020541690565b6000606082806020019051604081101561054957600080fd5b815160208301805160405192949293830192919084600160201b82111561056f57600080fd5b90830190602082018581111561058457600080fd5b8251600160201b81118282018810171561059d57600080fd5b82525081516020918201929091019080838360005b838110156105ca5781810151838201526020016105b2565b50505050905090810190601f1680156105f75780820380516001836020036101000a031916815260200191505b5060405250505091509150606080606083806020019051606081101561061c57600080fd5b8101908080516040519392919084600160201b82111561063b57600080fd5b90830190602082018581111561065057600080fd5b82518660208202830111600160201b8211171561066c57600080fd5b82525081516020918201928201910280838360005b83811015610699578181015183820152602001610681565b5050505090500160405260200180516040519392919084600160201b8211156106c157600080fd5b9083019060208201858111156106d657600080fd5b82518660208202830111600160201b821117156106f257600080fd5b82525081516020918201928201910280838360005b8381101561071f578181015183820152602001610707565b5050505090500160405260200180516040519392919084600160201b82111561074757600080fd5b90830190602082018581111561075c57600080fd5b8251600160201b81118282018810171561077557600080fd5b82525081516020918201929091019080838360005b838110156107a257818101518382015260200161078a565b50505050905090810190601f1680156107cf5780820380516001836020036101000a031916815260200191505b50604052505050925092509250600060048111156107e957fe5b8514156107ff576107fa83836109f6565b610882565b6001851415610812576107fa8383610cda565b6002851415610826576107fa838383610f08565b600385141561083a576107fa8383836112ab565b600485141561084b576107fa6117ad565b60405162461bcd60e51b815260040180806020018281038252602681526020018061209e6026913960400191505060405180910390fd5b505050505050565b60608060008054806020026020016040519081016040528092919081815260200182805480156108e357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108c5575b50505050509150815167ffffffffffffffff8111801561090257600080fd5b5060405190808252806020026020018201604052801561092c578160200160208202803683370190505b50905060005b82518110156104e957600061095984838151811061094c57fe5b6020026020010151610512565b9050806001600160a01b03166395dd9193306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156109a857600080fd5b505afa1580156109bc573d6000803e3d6000fd5b505050506040513d60208110156109d257600080fd5b505183518490849081106109e257fe5b602090810291909101015250600101610932565b6060610a006104ee565b6001600160a01b031663c2998238846040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a5e578181015183820152602001610a46565b5050505090500192505050600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610ac057600080fd5b8101908080516040519392919084600160201b821115610adf57600080fd5b908301906020820185811115610af457600080fd5b82518660208202830111600160201b82111715610b1057600080fd5b82525081516020918201928201910280838360005b83811015610b3d578181015183820152602001610b25565b50505050905001604052505050905060005b8351811015610cd457818181518110610b6457fe5b6020026020010151600014610baa5760405162461bcd60e51b81526004018080602001828103825260438152602001806120fd6043913960600191505060405180910390fd5b610bc6848281518110610bb957fe5b6020026020010151610346565b610c6557600160026000868481518110610bdc57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001848281518110610c2957fe5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b838181518110610c7157fe5b60200260200101516001600160a01b03167fde38363fe42a9cae1654e31132bb3736927f007235cf41265805b96de98cf59f848381518110610caf57fe5b60200260200101516040518082815260200191505060405180910390a2600101610b4f565b50505050565b60005b8251811015610f0357610cf5838281518110610bb957fe5b610d305760405162461bcd60e51b8152600401808060200182810382526031815260200180611fe16031913960400191505060405180910390fd5b818181518110610d3c57fe5b6020026020010151838281518110610d5057fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b505050506040513d6020811015610dce57600080fd5b50511415610e5057600060026000858481518110610de857fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550610e4e838281518110610e3657fe5b602002602001015160016118b590919063ffffffff16565b505b610e9433838381518110610e6057fe5b6020026020010151858481518110610e7457fe5b60200260200101516001600160a01b03166119ad9092919063ffffffff16565b828181518110610ea057fe5b60200260200101516001600160a01b03167ffb7cd2a565112408eb382485bb381cf1fc961858030a24b6d20de0a749c2f78a838381518110610ede57fe5b60200260200101516040518082815260200191505060405180910390a2600101610cdd565b505050565b6060818060200190516020811015610f1f57600080fd5b8101908080516040519392919084600160201b821115610f3e57600080fd5b908301906020820185811115610f5357600080fd5b82518660208202830111600160201b82111715610f6f57600080fd5b82525081516020918201928201910280838360005b83811015610f9c578181015183820152602001610f84565b50505050905001604052505050905060005b84518110156112a457818181518110610fc357fe5b60200260200101516001600160a01b031663c5ebeaec858381518110610fe557fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561102357600080fd5b505af1158015611037573d6000803e3d6000fd5b505050506040513d602081101561104d57600080fd5b50511561108b5760405162461bcd60e51b81526004018080602001828103825260358152602001806120696035913960400191505060405180910390fd5b60006001600160a01b03166110a586838151811061094c57fe5b6001600160a01b0316141561116e578181815181106110c057fe5b6020026020010151600360008784815181106110d857fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600085828151811061113257fe5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b61117661031f565b6001600160a01b031685828151811061118b57fe5b60200260200101516001600160a01b03161415611211576111aa61031f565b6001600160a01b031663d0e30db08583815181106111c457fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111f757600080fd5b505af115801561120b573d6000803e3d6000fd5b50505050505b6112353385838151811061122157fe5b6020026020010151878481518110610e7457fe5b84818151811061124157fe5b60200260200101516001600160a01b03167f03c44a7ddb65ca5f1bbeffda35ba96457c370e957138d14005ff3e55551ab50f85838151811061127f57fe5b60200260200101516040518082815260200191505060405180910390a2600101610fae565b5050505050565b60608180602001905160208110156112c257600080fd5b8101908080516040519392919084600160201b8211156112e157600080fd5b9083019060208201858111156112f657600080fd5b82518660208202830111600160201b8211171561131257600080fd5b82525081516020918201928201910280838360005b8381101561133f578181015183820152602001611327565b50505050905001604052505050905060005b84518110156112a45760006001600160a01b031661137486838151811061094c57fe5b6001600160a01b031614156113ba5760405162461bcd60e51b81526004018080602001828103825260328152602001806121406032913960400191505060405180910390fd5b8381815181106113c657fe5b60200260200101518582815181106113da57fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561142e57600080fd5b505afa158015611442573d6000803e3d6000fd5b505050506040513d602081101561145857600080fd5b505110156114975760405162461bcd60e51b815260040180806020018281038252602b81526020018061219c602b913960400191505060405180910390fd5b8181815181106114a357fe5b60200260200101516001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156114e557600080fd5b505af11580156114f9573d6000803e3d6000fd5b505050506040513d602081101561150f57600080fd5b50511561154d5760405162461bcd60e51b81526004018080602001828103825260398152602001806120c46039913960400191505060405180910390fd5b600082828151811061155b57fe5b60200260200101516001600160a01b03166395dd9193306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156115af57600080fd5b505afa1580156115c3573d6000803e3d6000fd5b505050506040513d60208110156115d957600080fd5b5051855190915081908690849081106115ee57fe5b602002602001015110156116455761164083838151811061160b57fe5b602002602001015187848151811061161f57fe5b602002602001015187858151811061163357fe5b60200260200101516119ff565b61173d565b61167683838151811061165457fe5b602002602001015187848151811061166857fe5b6020026020010151836119ff565b6003600087848151811061168657fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154906001600160a01b0302191690556116eb8683815181106116d357fe5b602002602001015160006118b590919063ffffffff16565b50808583815181106116f957fe5b6020026020010151111561173d5761173d336117318388868151811061171b57fe5b6020026020010151611ba090919063ffffffff16565b888581518110610e7457fe5b85828151811061174957fe5b60200260200101516001600160a01b03167fb3ef5936c6a45fc10d27f174d569533c42819c98975f3da26d592c63e94415fe86848151811061178757fe5b60200260200101516040518082815260200191505060405180910390a250600101611351565b6117b56104ee565b6001600160a01b031663e9af0292306040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561180357600080fd5b505af1158015611817573d6000803e3d6000fd5b505050506000611825610364565b905061034333826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561187857600080fd5b505afa15801561188c573d6000803e3d6000fd5b505050506040513d60208110156118a257600080fd5b50516001600160a01b03841691906119ad565b8154600090815b818110156119a557836001600160a01b03168582815481106118da57fe5b6000918252602090912001546001600160a01b0316141561199d57600182038110156119685784600183038154811061190f57fe5b9060005260206000200160009054906101000a90046001600160a01b031685828154811061193957fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8480548061197257fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600192506119a5565b6001016118bc565b505092915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f03908490611bfd565b611a0761031f565b6001600160a01b0316826001600160a01b03161415611ade57611a2861031f565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611a6d57600080fd5b505af1158015611a81573d6000803e3d6000fd5b50505050826001600160a01b0316634e4d9fea826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ac057600080fd5b505af1158015611ad4573d6000803e3d6000fd5b5050505050610f03565b611af26001600160a01b0383168483611cae565b826001600160a01b0316630e752702826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611b3857600080fd5b505af1158015611b4c573d6000803e3d6000fd5b505050506040513d6020811015611b6257600080fd5b505115610f035760405162461bcd60e51b81526004018080602001828103825260318152602001806120126031913960400191505060405180910390fd5b600082821115611bf7576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6060611c52826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611dc19092919063ffffffff16565b805190915015610f0357808060200190516020811015611c7157600080fd5b5051610f035760405162461bcd60e51b815260040180806020018281038252602a815260200180612172602a913960400191505060405180910390fd5b801580611d34575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611d0657600080fd5b505afa158015611d1a573d6000803e3d6000fd5b505050506040513d6020811015611d3057600080fd5b5051155b611d6f5760405162461bcd60e51b81526004018080602001828103825260368152602001806121c76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610f03908490611bfd565b6060611dd08484600085611dda565b90505b9392505050565b606082471015611e1b5760405162461bcd60e51b81526004018080602001828103825260268152602001806120436026913960400191505060405180910390fd5b611e2485611f36565b611e75576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611eb45780518252601f199092019160209182019101611e95565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611f16576040519150601f19603f3d011682016040523d82523d6000602084013e611f1b565b606091505b5091509150611f2b828286611f3c565b979650505050505050565b3b151590565b60608315611f4b575081611dd3565b825115611f5b5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fa5578181015183820152602001611f8d565b50505050905090810190601f168015611fd25780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5f5f72656d6f7665436f6c6c61746572616c4173736574733a204173736574206973206e6f7420636f6c6c61746572616c5f5f7265706179426f72726f77656441737365743a204572726f72207768696c65207265706179696e6720626f72726f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5f5f626f72726f774173736574733a2050726f626c656d207768696c6520626f72726f77696e672066726f6d20436f6d706f756e647265636569766543616c6c46726f6d5661756c743a20496e76616c696420616374696f6e49645f5f7265706179426f72726f7765644173736574733a204572726f72207768696c652063616c6c696e6720616363727565496e7465726573745f5f616464436f6c6c61746572616c4173736574733a204572726f72207768696c652063616c6c696e6720656e7465724d61726b657473206f6e20436f6d706f756e645f5f7265706179426f72726f7765644173736574733a20417373657420686173206e6f74206265656e20626f72726f7765645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645f5f7265706179426f72726f7765644173736574733a20496e73756666696369656e742062616c616e63655361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220d36337fb930ae674a157cb5e38081d4304f8f91c83dac9e0685c3acdd6a5a8c664736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "assetIsCollateral(address)": {
        "returns": {
          "isCollateral": "True if the asset is part of the collateral assets of the external position"
        }
      },
      "getCTokenFromBorrowedAsset(address)": {
        "params": {
          "_borrowedAsset": "The token for which to get the cToken"
        },
        "returns": {
          "cToken_": "The cToken"
        }
      },
      "getCompToken()": {
        "returns": {
          "compToken_": "The `COMP_TOKEN` variable value"
        }
      },
      "getCompoundComptroller()": {
        "returns": {
          "compoundComptroller_": "The `COMPOUND_COMPTROLLER` variable value"
        }
      },
      "getDebtAssets()": {
        "returns": {
          "amounts_": "Amount of assets in external",
          "assets_": "Assets with an active loan"
        }
      },
      "getManagedAssets()": {
        "returns": {
          "amounts_": "Amount of assets being used as collateral",
          "assets_": "Assets with balance > 0 that are being used as collateral"
        }
      },
      "getWethToken()": {
        "returns": {
          "wethToken_": "The `WETH_TOKEN` variable value"
        }
      },
      "init(bytes)": {
        "details": "Nothing to initialize for this contract"
      },
      "receiveCallFromVault(bytes)": {
        "params": {
          "_actionData": "Encoded data to execute the action"
        }
      }
    },
    "title": "CompoundDebtPositionLib Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetIsCollateral(address)": {
        "notice": "Checks whether an asset is collateral"
      },
      "getCTokenFromBorrowedAsset(address)": {
        "notice": "Returns the cToken of a given borrowed asset"
      },
      "getCompToken()": {
        "notice": "Gets the `COMP_TOKEN` variable"
      },
      "getCompoundComptroller()": {
        "notice": "Gets the `COMPOUND_COMPTROLLER` variable"
      },
      "getDebtAssets()": {
        "notice": "Retrieves the borrowed assets and balances of the current external position"
      },
      "getManagedAssets()": {
        "notice": "Retrieves the collateral assets and balances of the current external position"
      },
      "getWethToken()": {
        "notice": "Gets the `WETH_TOKEN` variable"
      },
      "init(bytes)": {
        "notice": "Initializes the external position"
      },
      "receiveCallFromVault(bytes)": {
        "notice": "Receives and executes a call from the Vault"
      }
    },
    "notice": "An External Position library contract for Compound debt positions",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6140,
        "contract": "contracts/release/extensions/external-position-manager/external-positions/compound-debt/CompoundDebtPositionLib.sol:CompoundDebtPositionLib",
        "label": "borrowedAssets",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6143,
        "contract": "contracts/release/extensions/external-position-manager/external-positions/compound-debt/CompoundDebtPositionLib.sol:CompoundDebtPositionLib",
        "label": "collateralAssets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6147,
        "contract": "contracts/release/extensions/external-position-manager/external-positions/compound-debt/CompoundDebtPositionLib.sol:CompoundDebtPositionLib",
        "label": "assetToIsCollateral",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6151,
        "contract": "contracts/release/extensions/external-position-manager/external-positions/compound-debt/CompoundDebtPositionLib.sol:CompoundDebtPositionLib",
        "label": "borrowedAssetToCToken",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}