/* eslint-disable */
// @ts-nocheck
import { BytesLike, BigNumber, BigNumberish } from 'ethers';
import { contract, Call, Send, AddressLike, Contract } from '@enzymefinance/ethers';

export type ExitRateDirectFeeArgs = [_feeManager: AddressLike];

// prettier-ignore
export interface ExitRateDirectFee extends Contract<ExitRateDirectFee> {
  activateForFund: Send<(arg0: AddressLike, arg1: AddressLike) => void, ExitRateDirectFee>
  addFundSettings: Send<(_comptrollerProxy: AddressLike, _settingsData: BytesLike) => void, ExitRateDirectFee>
  getFeeManager: Call<() => string, ExitRateDirectFee>
  getInKindRateForFund: Call<(_comptrollerProxy: AddressLike) => BigNumber, ExitRateDirectFee>
  getRecipientForFund: Call<(_comptrollerProxy: AddressLike) => string, ExitRateDirectFee>
  getSettlementType: Call<() => BigNumber, ExitRateDirectFee>
  getSpecificAssetsRateForFund: Call<(_comptrollerProxy: AddressLike) => BigNumber, ExitRateDirectFee>
  payout: Send<(arg0: AddressLike, arg1: AddressLike) => boolean, ExitRateDirectFee>
  setRecipientForFund: Send<(_comptrollerProxy: AddressLike, _recipient: AddressLike) => void, ExitRateDirectFee>
  settle: Send<(_comptrollerProxy: AddressLike, arg1: AddressLike, arg2: BigNumberish, _settlementData: BytesLike, arg4: BigNumberish) => { settlementType_: BigNumber, payer_: string, sharesDue_: BigNumber }, ExitRateDirectFee>
  settlesOnHook: Call<(_hook: BigNumberish) => { settles_: boolean, usesGav_: boolean }, ExitRateDirectFee>
  update: Send<(arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike, arg4: BigNumberish) => void, ExitRateDirectFee>
  updatesOnHook: Call<(arg0: BigNumberish) => { updates_: boolean, usesGav_: boolean }, ExitRateDirectFee>
}

let ExitRateDirectFeeBytecode: string | undefined = undefined;
if (typeof window === 'undefined') {
  ExitRateDirectFeeBytecode =
    '0x60c060405234801561001057600080fd5b50604051610cdf380380610cdf8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b031916608052600160f81b60a0526001600160a01b03166001610c5e6100816000398061069f52508061052a528061081b52806108485250610c5e6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806362780b3c1161008c578063a8a0fa7d11610066578063a8a0fa7d146103ee578063b78b481314610414578063e337a91f14610456578063f2d6382614610476576100cf565b806362780b3c146103555780637bdd5b1d146103975780638c55f80f146103c0576100cf565b80630f5f6b4f146100d4578063223e650514610156578063233faf5f1461018e5780633146d05814610221578063320f0ddd1461024f57806341892d7e1461028a575b600080fd5b610154600480360360408110156100ea57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561011557600080fd5b82018360208201111561012757600080fd5b8035906020019184600183028401116401000000008311171561014957600080fd5b50909250905061047e565b005b61017c6004803603602081101561016c57600080fd5b50356001600160a01b03166104c1565b60408051918252519081900360200190f35b610154600480360360a08110156101a457600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156101e257600080fd5b8201836020820111156101f457600080fd5b8035906020019184600183028401116401000000008311171561021657600080fd5b9193509150356104e0565b6101546004803603604081101561023757600080fd5b506001600160a01b03813581169160200135166104e8565b61026f6004803603602081101561026557600080fd5b503560ff166104ec565b60408051921515835290151560208301528051918290030190f35b61031d600480360360a08110156102a057600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156102de57600080fd5b8201836020820111156102f057600080fd5b8035906020019184600183028401116401000000008311171561031257600080fd5b91935091503561051b565b6040518084600581111561032d57fe5b8152602001836001600160a01b03168152602001828152602001935050505060405180910390f35b61037b6004803603602081101561036b57600080fd5b50356001600160a01b031661068c565b604080516001600160a01b039092168252519081900360200190f35b61039f61069d565b604051808260058111156103af57fe5b815260200191505060405180910390f35b610154600480360360408110156103d657600080fd5b506001600160a01b03813581169160200135166106c1565b61017c6004803603602081101561040457600080fd5b50356001600160a01b03166107e4565b6104426004803603604081101561042a57600080fd5b506001600160a01b0381358116916020013516610809565b604080519115158252519081900360200190f35b61026f6004803603602081101561046c57600080fd5b503560ff16610811565b61037b610819565b61048983838361083d565b60008282606081101561049b57600080fd5b50604001356001600160a01b0316905080156104bb576104bb84826109ea565b50505050565b6001600160a01b031660009081526020819052604090205461ffff1690565b505050505050565b5050565b60008060038360038111156104fd57fe5b141561050f5750600190506000610516565b5060009050805b915091565b60008080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105865760405162461bcd60e51b8152600401808060200182810382526025815260200180610b836025913960400191505060405180910390fd5b6000806105c888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a4192505050565b9195509092509050600082156105e8576105e18c6107e4565b90506105f4565b6105f18c6104c1565b90505b61060a6127106106048484610a75565b90610ad5565b935083610624576000806000955095509550505050610680565b821515856001600160a01b03168d6001600160a01b03167f3535fa1da8a29b0e085cee0bb81ac6587dd875222e0854b76f3ffa3c16ab1a7f876040518082815260200191505060405180910390a461067a61069d565b95505050505b96509650969350505050565b600061069782610b3c565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b816001600160a01b031663c98091876040518163ffffffff1660e01b815260040160206040518083038186803b1580156106fa57600080fd5b505afa15801561070e573d6000803e3d6000fd5b505050506040513d602081101561072457600080fd5b505160408051631127a41d60e31b815290516001600160a01b039092169163893d20e891600480820192602092909190829003018186803b15801561076857600080fd5b505afa15801561077c573d6000803e3d6000fd5b505050506040513d602081101561079257600080fd5b50516001600160a01b031633146107da5760405162461bcd60e51b8152600401808060200182810382526030815260200180610bf96030913960400191505060405180910390fd5b6104e882826109ea565b6001600160a01b031660009081526020819052604090205462010000900461ffff1690565b600092915050565b600080915091565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108a45760405162461bcd60e51b8152600401808060200182810382526025815260200180610b836025913960400191505060405180910390fd5b600080838360408110156108b757600080fd5b5061ffff813581169350602090910135169050612710821061090a5760405162461bcd60e51b8152600401808060200182810382526028815260200180610b5b6028913960400191505060405180910390fd5b6127108161ffff161061094e5760405162461bcd60e51b8152600401808060200182810382526030815260200180610ba86030913960400191505060405180910390fd5b60408051808201825261ffff84811680835284821660208085018281526001600160a01b038c16600081815280845288902096518754925161ffff199093169087161763ffff0000191662010000929096169190910294909417909455845191825292810192909252825190927f9f856f74192181b265e61298e386477299c53e0cb24be55a84416f2af4ba4a61928290030190a25050505050565b6001600160a01b0382811660008181526001602052604080822080546001600160a01b0319169486169485179055517fa11fc98cfb391622348acc16de92f0efb77d55f71a6e9fa18bfef387ae8d19ce9190a35050565b6000806000838060200190516060811015610a5b57600080fd5b508051602082015160409092015190969195509350915050565b600082610a8457506000610697565b82820282848281610a9157fe5b0414610ace5760405162461bcd60e51b8152600401808060200182810382526021815260200180610bd86021913960400191505060405180910390fd5b9392505050565b6000808211610b2b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610b3457fe5b049392505050565b6001600160a01b03908116600090815260016020526040902054169056fe61646446756e6453657474696e67733a20696e4b696e6452617465206d61782065786365656465644f6e6c7920746865204665654d616e6765722063616e206d616b6520746869732063616c6c61646446756e6453657474696e67733a20737065636966696341737365747352617465206d6178206578636565646564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775f5f736574526563697069656e74466f7246756e643a204f6e6c79207661756c74206f776e65722063616c6c61626c65a26469706673582212208e4a242849c4a0b12bf5c0bdefb6f70878605ab68abe2a4b0eda46f020ca706d64736f6c634300060c0033';
}

// prettier-ignore
export const ExitRateDirectFee = contract<ExitRateDirectFee, ExitRateDirectFeeArgs>(ExitRateDirectFeeBytecode)`
  constructor(address _feeManager)
  event FundSettingsAdded(address indexed comptrollerProxy, uint256 inKindRate, uint256 specificAssetsRate)
  event RecipientSetForFund(address indexed comptrollerProxy, address indexed recipient)
  event Settled(address indexed comptrollerProxy, address indexed payer, uint256 sharesQuantity, bool indexed forSpecificAssets)
  function activateForFund(address, address)
  function addFundSettings(address _comptrollerProxy, bytes _settingsData)
  function getFeeManager() view returns (address feeManager_)
  function getInKindRateForFund(address _comptrollerProxy) view returns (uint256 rate_)
  function getRecipientForFund(address _comptrollerProxy) view returns (address recipient_)
  function getSettlementType() view returns (uint8 settlementType_)
  function getSpecificAssetsRateForFund(address _comptrollerProxy) view returns (uint256 rate_)
  function payout(address, address) returns (bool)
  function setRecipientForFund(address _comptrollerProxy, address _recipient)
  function settle(address _comptrollerProxy, address, uint8, bytes _settlementData, uint256) returns (uint8 settlementType_, address payer_, uint256 sharesDue_)
  function settlesOnHook(uint8 _hook) view returns (bool settles_, bool usesGav_)
  function update(address, address, uint8, bytes, uint256)
  function updatesOnHook(uint8) view returns (bool updates_, bool usesGav_)
`;
