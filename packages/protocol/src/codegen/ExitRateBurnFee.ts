/* eslint-disable */
// @ts-nocheck
import { BytesLike, BigNumber, BigNumberish } from 'ethers';
import { contract, Call, Send, AddressLike, Contract } from '@enzymefinance/ethers';

export type ExitRateBurnFeeArgs = [_feeManager: AddressLike];

// prettier-ignore
export interface ExitRateBurnFee extends Contract<ExitRateBurnFee> {
  activateForFund: Send<(arg0: AddressLike, arg1: AddressLike) => void, ExitRateBurnFee>
  addFundSettings: Send<(_comptrollerProxy: AddressLike, _settingsData: BytesLike) => void, ExitRateBurnFee>
  getFeeManager: Call<() => string, ExitRateBurnFee>
  getInKindRateForFund: Call<(_comptrollerProxy: AddressLike) => BigNumber, ExitRateBurnFee>
  getRecipientForFund: Call<(arg0: AddressLike) => string, ExitRateBurnFee>
  getSettlementType: Call<() => BigNumber, ExitRateBurnFee>
  getSpecificAssetsRateForFund: Call<(_comptrollerProxy: AddressLike) => BigNumber, ExitRateBurnFee>
  payout: Send<(arg0: AddressLike, arg1: AddressLike) => boolean, ExitRateBurnFee>
  settle: Send<(_comptrollerProxy: AddressLike, arg1: AddressLike, arg2: BigNumberish, _settlementData: BytesLike, arg4: BigNumberish) => { settlementType_: BigNumber, payer_: string, sharesDue_: BigNumber }, ExitRateBurnFee>
  settlesOnHook: Call<(_hook: BigNumberish) => { settles_: boolean, usesGav_: boolean }, ExitRateBurnFee>
  update: Send<(arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike, arg4: BigNumberish) => void, ExitRateBurnFee>
  updatesOnHook: Call<(arg0: BigNumberish) => { updates_: boolean, usesGav_: boolean }, ExitRateBurnFee>
}

let ExitRateBurnFeeBytecode: string | undefined = undefined;
if (typeof window === 'undefined') {
  ExitRateBurnFeeBytecode =
    '0x60c060405234801561001057600080fd5b50604051610a81380380610a818339818101604052602081101561003357600080fd5b50516001600160601b0319606082901b16608052600360f81b60a0526001600160a01b03166003610a00610081600039806107b5525080610440528061064b528061080f5250610a006000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806362780b3c1161007157806362780b3c1461033a5780637bdd5b1d1461037c578063a8a0fa7d146103a5578063b78b4813146103cb578063e337a91f1461040d578063f2d638261461042d576100b4565b80630f5f6b4f146100b9578063223e65051461013b578063233faf5f146101735780633146d05814610206578063320f0ddd1461023457806341892d7e1461026f575b600080fd5b610139600480360360408110156100cf57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100fa57600080fd5b82018360208201111561010c57600080fd5b8035906020019184600183028401116401000000008311171561012e57600080fd5b509092509050610435565b005b6101616004803603602081101561015157600080fd5b50356001600160a01b03166105e2565b60408051918252519081900360200190f35b610139600480360360a081101561018957600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156101c757600080fd5b8201836020820111156101d957600080fd5b803590602001918460018302840111640100000000831117156101fb57600080fd5b919350915035610601565b6101396004803603604081101561021c57600080fd5b506001600160a01b0381358116916020013516610609565b6102546004803603602081101561024a57600080fd5b503560ff1661060d565b60408051921515835290151560208301528051918290030190f35b610302600480360360a081101561028557600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156102c357600080fd5b8201836020820111156102d557600080fd5b803590602001918460018302840111640100000000831117156102f757600080fd5b91935091503561063c565b6040518084600581111561031257fe5b8152602001836001600160a01b03168152602001828152602001935050505060405180910390f35b6103606004803603602081101561035057600080fd5b50356001600160a01b03166107ad565b604080516001600160a01b039092168252519081900360200190f35b6103846107b3565b6040518082600581111561039457fe5b815260200191505060405180910390f35b610161600480360360208110156103bb57600080fd5b50356001600160a01b03166107d7565b6103f9600480360360408110156103e157600080fd5b506001600160a01b03813581169160200135166107fc565b604080519115158252519081900360200190f35b6102546004803603602081101561042357600080fd5b503560ff16610805565b61036061080d565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461049c5760405162461bcd60e51b81526004018080602001828103825260258152602001806109556025913960400191505060405180910390fd5b600080838360408110156104af57600080fd5b5061ffff81358116935060209091013516905061271082106105025760405162461bcd60e51b815260040180806020018281038252602881526020018061092d6028913960400191505060405180910390fd5b6127108161ffff16106105465760405162461bcd60e51b815260040180806020018281038252603081526020018061097a6030913960400191505060405180910390fd5b60408051808201825261ffff84811680835284821660208085018281526001600160a01b038c16600081815280845288902096518754925161ffff199093169087161763ffff0000191662010000929096169190910294909417909455845191825292810192909252825190927f9f856f74192181b265e61298e386477299c53e0cb24be55a84416f2af4ba4a61928290030190a25050505050565b6001600160a01b031660009081526020819052604090205461ffff1690565b505050505050565b5050565b600080600383600381111561061e57fe5b14156106305750600190506000610637565b5060009050805b915091565b60008080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106a75760405162461bcd60e51b81526004018080602001828103825260258152602001806109556025913960400191505060405180910390fd5b6000806106e988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061083192505050565b919550909250905060008215610709576107028c6107d7565b9050610715565b6107128c6105e2565b90505b61072b6127106107258484610865565b906108c5565b9350836107455760008060009550955095505050506107a1565b821515856001600160a01b03168d6001600160a01b03167f3535fa1da8a29b0e085cee0bb81ac6587dd875222e0854b76f3ffa3c16ab1a7f876040518082815260200191505060405180910390a461079b6107b3565b95505050505b96509650969350505050565b50600090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b031660009081526020819052604090205462010000900461ffff1690565b60005b92915050565b600080915091565b7f000000000000000000000000000000000000000000000000000000000000000090565b600080600083806020019051606081101561084b57600080fd5b508051602082015160409092015190969195509350915050565b600082610874575060006107ff565b8282028284828161088157fe5b04146108be5760405162461bcd60e51b81526004018080602001828103825260218152602001806109aa6021913960400191505060405180910390fd5b9392505050565b600080821161091b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161092457fe5b04939250505056fe61646446756e6453657474696e67733a20696e4b696e6452617465206d61782065786365656465644f6e6c7920746865204665654d616e6765722063616e206d616b6520746869732063616c6c61646446756e6453657474696e67733a20737065636966696341737365747352617465206d6178206578636565646564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220d387c12d7dc8df59efffac743d690af05b86882ddf2bfd4a61df78903dac61dc64736f6c634300060c0033';
}

// prettier-ignore
export const ExitRateBurnFee = contract<ExitRateBurnFee, ExitRateBurnFeeArgs>(ExitRateBurnFeeBytecode)`
  constructor(address _feeManager)
  event FundSettingsAdded(address indexed comptrollerProxy, uint256 inKindRate, uint256 specificAssetsRate)
  event Settled(address indexed comptrollerProxy, address indexed payer, uint256 sharesQuantity, bool indexed forSpecificAssets)
  function activateForFund(address, address)
  function addFundSettings(address _comptrollerProxy, bytes _settingsData)
  function getFeeManager() view returns (address feeManager_)
  function getInKindRateForFund(address _comptrollerProxy) view returns (uint256 rate_)
  function getRecipientForFund(address) view returns (address recipient_)
  function getSettlementType() view returns (uint8 settlementType_)
  function getSpecificAssetsRateForFund(address _comptrollerProxy) view returns (uint256 rate_)
  function payout(address, address) returns (bool)
  function settle(address _comptrollerProxy, address, uint8, bytes _settlementData, uint256) returns (uint8 settlementType_, address payer_, uint256 sharesDue_)
  function settlesOnHook(uint8 _hook) view returns (bool settles_, bool usesGav_)
  function update(address, address, uint8, bytes, uint256)
  function updatesOnHook(uint8) view returns (bool updates_, bool usesGav_)
`;
